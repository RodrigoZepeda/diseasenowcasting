// Generated by rstantools.  Do not edit by hand.

#ifndef LICENSE_INCLUDED
#define LICENSE_INCLUDED
/*
    diseasenowcasting is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    diseasenowcasting is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with diseasenowcasting.  If not, see <http://www.gnu.org/licenses/>.
*/
#endif //LICENSE_INCLUDED
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_nowcasting_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 679> locations_array__ =
  {" (found before start of program)",
  " (in 'nowcasting', line 918, column 0 to column 36)",
  " (in 'nowcasting', line 919, column 0 to column 38)",
  " (in 'nowcasting', line 920, column 0 to column 40)",
  " (in 'nowcasting', line 922, column 0 to column 41)",
  " (in 'nowcasting', line 923, column 0 to column 38)",
  " (in 'nowcasting', line 925, column 0 to column 42)",
  " (in 'nowcasting', line 927, column 0 to column 54)",
  " (in 'nowcasting', line 928, column 0 to column 52)",
  " (in 'nowcasting', line 929, column 0 to column 56)",
  " (in 'nowcasting', line 930, column 0 to column 59)",
  " (in 'nowcasting', line 931, column 0 to column 57)",
  " (in 'nowcasting', line 932, column 0 to column 56)",
  " (in 'nowcasting', line 940, column 0 to column 31)",
  " (in 'nowcasting', line 941, column 0 to column 36)",
  " (in 'nowcasting', line 942, column 0 to column 45)",
  " (in 'nowcasting', line 943, column 0 to column 50)",
  " (in 'nowcasting', line 945, column 0 to column 35)",
  " (in 'nowcasting', line 946, column 0 to column 41)",
  " (in 'nowcasting', line 947, column 0 to column 53)",
  " (in 'nowcasting', line 948, column 0 to column 54)",
  " (in 'nowcasting', line 950, column 0 to column 20)",
  " (in 'nowcasting', line 951, column 0 to column 20)",
  " (in 'nowcasting', line 953, column 0 to column 43)",
  " (in 'nowcasting', line 954, column 0 to column 44)",
  " (in 'nowcasting', line 955, column 0 to column 40)",
  " (in 'nowcasting', line 957, column 0 to column 55)",
  " (in 'nowcasting', line 958, column 0 to column 53)",
  " (in 'nowcasting', line 959, column 0 to column 56)",
  " (in 'nowcasting', line 960, column 0 to column 59)",
  " (in 'nowcasting', line 961, column 0 to column 57)",
  " (in 'nowcasting', line 962, column 0 to column 57)",
  " (in 'nowcasting', line 972, column 0 to column 95)",
  " (in 'nowcasting', line 973, column 0 to column 100)",
  " (in 'nowcasting', line 974, column 0 to column 69)",
  " (in 'nowcasting', line 975, column 0 to column 74)",
  " (in 'nowcasting', line 979, column 0 to column 94)",
  " (in 'nowcasting', line 983, column 0 to column 46)",
  " (in 'nowcasting', line 987, column 0 to column 98)",
  " (in 'nowcasting', line 991, column 0 to column 102)",
  " (in 'nowcasting', line 995, column 0 to column 100)",
  " (in 'nowcasting', line 1003, column 0 to column 50)",
  " (in 'nowcasting', line 1056, column 0 to column 80)",
  " (in 'nowcasting', line 1057, column 0 to column 100)",
  " (in 'nowcasting', line 1059, column 0 to line 1067, column 23)",
  " (in 'nowcasting', line 1069, column 0 to line 1070, column 80)",
  " (in 'nowcasting', line 1072, column 0 to line 1073, column 16)",
  " (in 'nowcasting', line 1075, column 0 to column 16)",
  " (in 'nowcasting', line 981, column 2 to column 55)",
  " (in 'nowcasting', line 980, column 0 to line 981, column 55)",
  " (in 'nowcasting', line 985, column 2 to column 56)",
  " (in 'nowcasting', line 984, column 0 to line 985, column 56)",
  " (in 'nowcasting', line 989, column 2 to column 56)",
  " (in 'nowcasting', line 988, column 0 to line 989, column 56)",
  " (in 'nowcasting', line 993, column 2 to column 62)",
  " (in 'nowcasting', line 992, column 0 to line 993, column 62)",
  " (in 'nowcasting', line 998, column 4 to column 84)",
  " (in 'nowcasting', line 997, column 2 to line 998, column 84)",
  " (in 'nowcasting', line 1000, column 2 to column 79)",
  " (in 'nowcasting', line 996, column 25 to line 1001, column 1)",
  " (in 'nowcasting', line 996, column 0 to line 1001, column 1)",
  " (in 'nowcasting', line 1006, column 2 to column 65)",
  " (in 'nowcasting', line 1009, column 4 to column 40)",
  " (in 'nowcasting', line 1008, column 2 to line 1009, column 40)",
  " (in 'nowcasting', line 1004, column 21 to line 1010, column 1)",
  " (in 'nowcasting', line 1004, column 0 to line 1010, column 1)",
  " (in 'nowcasting', line 1078, column 0 to column 49)",
  " (in 'nowcasting', line 1079, column 0 to column 44)",
  " (in 'nowcasting', line 1081, column 0 to column 49)",
  " (in 'nowcasting', line 1082, column 0 to column 44)",
  " (in 'nowcasting', line 1084, column 0 to column 43)",
  " (in 'nowcasting', line 1085, column 0 to column 48)",
  " (in 'nowcasting', line 1087, column 0 to column 46)",
  " (in 'nowcasting', line 1088, column 0 to column 48)",
  " (in 'nowcasting', line 1089, column 0 to column 46)",
  " (in 'nowcasting', line 1090, column 0 to column 48)",
  " (in 'nowcasting', line 1091, column 0 to column 47)",
  " (in 'nowcasting', line 1092, column 0 to column 51)",
  " (in 'nowcasting', line 1094, column 0 to column 44)",
  " (in 'nowcasting', line 1095, column 0 to column 44)",
  " (in 'nowcasting', line 1096, column 0 to column 47)",
  " (in 'nowcasting', line 1097, column 0 to column 48)",
  " (in 'nowcasting', line 1099, column 0 to column 109)",
  " (in 'nowcasting', line 1100, column 0 to column 109)",
  " (in 'nowcasting', line 1102, column 2 to column 106)",
  " (in 'nowcasting', line 1101, column 0 to line 1102, column 106)",
  " (in 'nowcasting', line 1104, column 2 to column 110)",
  " (in 'nowcasting', line 1105, column 2 to column 131)",
  " (in 'nowcasting', line 1103, column 14 to line 1106, column 1)",
  " (in 'nowcasting', line 1103, column 0 to line 1106, column 1)",
  " (in 'nowcasting', line 1109, column 2 to column 136)",
  " (in 'nowcasting', line 1108, column 0 to line 1109, column 136)",
  " (in 'nowcasting', line 1111, column 2 to column 146)",
  " (in 'nowcasting', line 1110, column 0 to line 1111, column 146)",
  " (in 'nowcasting', line 1113, column 2 to column 136)",
  " (in 'nowcasting', line 1112, column 0 to line 1113, column 136)",
  " (in 'nowcasting', line 1115, column 2 to column 146)",
  " (in 'nowcasting', line 1114, column 0 to line 1115, column 146)",
  " (in 'nowcasting', line 1117, column 2 to column 141)",
  " (in 'nowcasting', line 1116, column 0 to line 1117, column 141)",
  " (in 'nowcasting', line 1119, column 2 to column 161)",
  " (in 'nowcasting', line 1118, column 0 to line 1119, column 161)",
  " (in 'nowcasting', line 1133, column 4 to column 187)",
  " (in 'nowcasting', line 1132, column 9 to line 1134, column 3)",
  " (in 'nowcasting', line 1131, column 4 to column 92)",
  " (in 'nowcasting', line 1130, column 23 to line 1132, column 3)",
  " (in 'nowcasting', line 1130, column 9 to line 1134, column 3)",
  " (in 'nowcasting', line 1129, column 4 to column 49)",
  " (in 'nowcasting', line 1128, column 24 to line 1130, column 3)",
  " (in 'nowcasting', line 1128, column 9 to line 1134, column 3)",
  " (in 'nowcasting', line 1127, column 4 to column 118)",
  " (in 'nowcasting', line 1126, column 24 to line 1128, column 3)",
  " (in 'nowcasting', line 1126, column 9 to line 1134, column 3)",
  " (in 'nowcasting', line 1125, column 4 to column 85)",
  " (in 'nowcasting', line 1124, column 16 to line 1126, column 3)",
  " (in 'nowcasting', line 1124, column 2 to line 1134, column 3)",
  " (in 'nowcasting', line 1123, column 16 to line 1135, column 1)",
  " (in 'nowcasting', line 1123, column 0 to line 1135, column 1)",
  " (in 'nowcasting', line 1137, column 2 to column 19)",
  " (in 'nowcasting', line 745, column 0 to column 23)",
  " (in 'nowcasting', line 746, column 0 to column 24)",
  " (in 'nowcasting', line 747, column 0 to column 24)",
  " (in 'nowcasting', line 748, column 0 to column 20)",
  " (in 'nowcasting', line 750, column 6 to column 12)",
  " (in 'nowcasting', line 750, column 0 to column 30)",
  " (in 'nowcasting', line 751, column 6 to column 12)",
  " (in 'nowcasting', line 751, column 0 to column 30)",
  " (in 'nowcasting', line 752, column 6 to column 12)",
  " (in 'nowcasting', line 752, column 0 to column 28)",
  " (in 'nowcasting', line 781, column 0 to column 42)",
  " (in 'nowcasting', line 782, column 0 to column 38)",
  " (in 'nowcasting', line 783, column 0 to column 43)",
  " (in 'nowcasting', line 784, column 0 to column 44)",
  " (in 'nowcasting', line 785, column 0 to column 43)",
  " (in 'nowcasting', line 786, column 0 to column 39)",
  " (in 'nowcasting', line 788, column 6 to column 38)",
  " (in 'nowcasting', line 788, column 0 to column 60)",
  " (in 'nowcasting', line 789, column 6 to column 34)",
  " (in 'nowcasting', line 789, column 0 to column 52)",
  " (in 'nowcasting', line 790, column 6 to column 39)",
  " (in 'nowcasting', line 790, column 0 to column 62)",
  " (in 'nowcasting', line 791, column 6 to column 40)",
  " (in 'nowcasting', line 791, column 0 to column 64)",
  " (in 'nowcasting', line 792, column 6 to column 39)",
  " (in 'nowcasting', line 792, column 0 to column 62)",
  " (in 'nowcasting', line 793, column 6 to column 35)",
  " (in 'nowcasting', line 793, column 0 to column 54)",
  " (in 'nowcasting', line 809, column 0 to column 18)",
  " (in 'nowcasting', line 810, column 0 to column 18)",
  " (in 'nowcasting', line 811, column 0 to column 18)",
  " (in 'nowcasting', line 814, column 0 to column 26)",
  " (in 'nowcasting', line 815, column 0 to column 35)",
  " (in 'nowcasting', line 816, column 0 to column 18)",
  " (in 'nowcasting', line 817, column 0 to column 27)",
  " (in 'nowcasting', line 819, column 0 to column 26)",
  " (in 'nowcasting', line 820, column 0 to column 35)",
  " (in 'nowcasting', line 821, column 0 to column 18)",
  " (in 'nowcasting', line 822, column 0 to column 27)",
  " (in 'nowcasting', line 824, column 0 to column 17)",
  " (in 'nowcasting', line 825, column 0 to column 26)",
  " (in 'nowcasting', line 826, column 0 to column 22)",
  " (in 'nowcasting', line 827, column 0 to column 31)",
  " (in 'nowcasting', line 829, column 0 to column 19)",
  " (in 'nowcasting', line 830, column 0 to column 28)",
  " (in 'nowcasting', line 831, column 0 to column 19)",
  " (in 'nowcasting', line 832, column 0 to column 28)",
  " (in 'nowcasting', line 833, column 0 to column 18)",
  " (in 'nowcasting', line 834, column 0 to column 27)",
  " (in 'nowcasting', line 835, column 0 to column 23)",
  " (in 'nowcasting', line 836, column 0 to column 32)",
  " (in 'nowcasting', line 837, column 0 to column 18)",
  " (in 'nowcasting', line 838, column 0 to column 27)",
  " (in 'nowcasting', line 839, column 0 to column 24)",
  " (in 'nowcasting', line 840, column 0 to column 33)",
  " (in 'nowcasting', line 841, column 0 to column 26)",
  " (in 'nowcasting', line 842, column 0 to column 35)",
  " (in 'nowcasting', line 843, column 0 to column 24)",
  " (in 'nowcasting', line 844, column 0 to column 33)",
  " (in 'nowcasting', line 845, column 0 to column 26)",
  " (in 'nowcasting', line 846, column 0 to column 35)",
  " (in 'nowcasting', line 847, column 0 to column 25)",
  " (in 'nowcasting', line 848, column 0 to column 34)",
  " (in 'nowcasting', line 849, column 0 to column 29)",
  " (in 'nowcasting', line 850, column 0 to column 38)",
  " (in 'nowcasting', line 851, column 0 to column 18)",
  " (in 'nowcasting', line 853, column 0 to column 32)",
  " (in 'nowcasting', line 854, column 0 to column 31)",
  " (in 'nowcasting', line 855, column 0 to column 26)",
  " (in 'nowcasting', line 856, column 0 to column 28)",
  " (in 'nowcasting', line 857, column 0 to column 28)",
  " (in 'nowcasting', line 858, column 0 to column 36)",
  " (in 'nowcasting', line 859, column 0 to column 34)",
  " (in 'nowcasting', line 860, column 0 to column 34)",
  " (in 'nowcasting', line 864, column 0 to column 34)",
  " (in 'nowcasting', line 866, column 0 to column 14)",
  " (in 'nowcasting', line 867, column 0 to column 14)",
  " (in 'nowcasting', line 868, column 0 to column 14)",
  " (in 'nowcasting', line 870, column 0 to column 33)",
  " (in 'nowcasting', line 871, column 0 to column 34)",
  " (in 'nowcasting', line 872, column 0 to column 34)",
  " (in 'nowcasting', line 873, column 0 to column 33)",
  " (in 'nowcasting', line 874, column 0 to column 43)",
  " (in 'nowcasting', line 875, column 0 to column 41)",
  " (in 'nowcasting', line 877, column 0 to column 41)",
  " (in 'nowcasting', line 878, column 0 to column 36)",
  " (in 'nowcasting', line 879, column 0 to column 41)",
  " (in 'nowcasting', line 880, column 0 to column 43)",
  " (in 'nowcasting', line 881, column 0 to column 41)",
  " (in 'nowcasting', line 882, column 0 to column 36)",
  " (in 'nowcasting', line 883, column 0 to column 41)",
  " (in 'nowcasting', line 884, column 0 to column 43)",
  " (in 'nowcasting', line 886, column 6 to column 12)",
  " (in 'nowcasting', line 886, column 0 to column 36)",
  " (in 'nowcasting', line 887, column 6 to column 12)",
  " (in 'nowcasting', line 887, column 0 to column 34)",
  " (in 'nowcasting', line 899, column 2 to column 276)",
  " (in 'nowcasting', line 898, column 7 to line 900, column 1)",
  " (in 'nowcasting', line 897, column 2 to column 99)",
  " (in 'nowcasting', line 896, column 46 to line 898, column 1)",
  " (in 'nowcasting', line 896, column 7 to line 900, column 1)",
  " (in 'nowcasting', line 895, column 2 to column 75)",
  " (in 'nowcasting', line 894, column 44 to line 896, column 1)",
  " (in 'nowcasting', line 894, column 7 to line 900, column 1)",
  " (in 'nowcasting', line 893, column 2 to column 49)",
  " (in 'nowcasting', line 892, column 39 to line 894, column 1)",
  " (in 'nowcasting', line 892, column 7 to line 900, column 1)",
  " (in 'nowcasting', line 890, column 2 to column 32)",
  " (in 'nowcasting', line 891, column 2 to column 30)",
  " (in 'nowcasting', line 889, column 20 to line 892, column 1)",
  " (in 'nowcasting', line 889, column 0 to line 900, column 1)",
  " (in 'nowcasting', line 901, column 7 to column 17)",
  " (in 'nowcasting', line 901, column 19 to column 29)",
  " (in 'nowcasting', line 901, column 0 to column 39)",
  " (in 'nowcasting', line 902, column 7 to column 17)",
  " (in 'nowcasting', line 902, column 19 to column 29)",
  " (in 'nowcasting', line 902, column 0 to column 42)",
  " (in 'nowcasting', line 912, column 2 to column 205)",
  " (in 'nowcasting', line 911, column 45 to line 913, column 1)",
  " (in 'nowcasting', line 911, column 7 to line 913, column 1)",
  " (in 'nowcasting', line 906, column 2 to column 97)",
  " (in 'nowcasting', line 907, column 2 to column 98)",
  " (in 'nowcasting', line 909, column 2 to line 910, column 39)",
  " (in 'nowcasting', line 904, column 36 to line 911, column 1)",
  " (in 'nowcasting', line 904, column 0 to line 913, column 1)",
  " (in 'nowcasting', line 918, column 7 to column 12)",
  " (in 'nowcasting', line 919, column 25 to column 29)",
  " (in 'nowcasting', line 920, column 25 to column 29)",
  " (in 'nowcasting', line 922, column 7 to column 17)",
  " (in 'nowcasting', line 923, column 25 to column 29)",
  " (in 'nowcasting', line 925, column 7 to column 27)",
  " (in 'nowcasting', line 927, column 7 to column 33)",
  " (in 'nowcasting', line 928, column 7 to column 29)",
  " (in 'nowcasting', line 929, column 7 to column 35)",
  " (in 'nowcasting', line 930, column 7 to column 36)",
  " (in 'nowcasting', line 931, column 7 to column 35)",
  " (in 'nowcasting', line 932, column 7 to column 30)",
  " (in 'nowcasting', line 940, column 7 to column 12)",
  " (in 'nowcasting', line 941, column 7 to column 17)",
  " (in 'nowcasting', line 942, column 7 to column 27)",
  " (in 'nowcasting', line 943, column 7 to column 27)",
  " (in 'nowcasting', line 945, column 7 to column 12)",
  " (in 'nowcasting', line 945, column 14 to column 27)",
  " (in 'nowcasting', line 946, column 7 to column 17)",
  " (in 'nowcasting', line 946, column 19 to column 33)",
  " (in 'nowcasting', line 947, column 7 to column 27)",
  " (in 'nowcasting', line 947, column 29 to column 42)",
  " (in 'nowcasting', line 948, column 7 to column 27)",
  " (in 'nowcasting', line 948, column 29 to column 42)",
  " (in 'nowcasting', line 953, column 16 to column 32)",
  " (in 'nowcasting', line 954, column 16 to column 32)",
  " (in 'nowcasting', line 955, column 16 to column 33)",
  " (in 'nowcasting', line 957, column 16 to column 42)",
  " (in 'nowcasting', line 958, column 16 to column 38)",
  " (in 'nowcasting', line 959, column 16 to column 43)",
  " (in 'nowcasting', line 960, column 16 to column 44)",
  " (in 'nowcasting', line 961, column 16 to column 43)",
  " (in 'nowcasting', line 962, column 16 to column 39)",
  " (in 'nowcasting', line 972, column 7 to column 12)",
  " (in 'nowcasting', line 973, column 7 to column 17)",
  " (in 'nowcasting', line 974, column 7 to column 12)",
  " (in 'nowcasting', line 975, column 7 to column 17)",
  " (in 'nowcasting', line 979, column 7 to column 33)",
  " (in 'nowcasting', line 983, column 7 to column 29)",
  " (in 'nowcasting', line 987, column 7 to column 35)",
  " (in 'nowcasting', line 991, column 7 to column 36)",
  " (in 'nowcasting', line 995, column 7 to column 35)",
  " (in 'nowcasting', line 1003, column 7 to column 30)",
  " (in 'nowcasting', line 1056, column 7 to column 27)",
  " (in 'nowcasting', line 1057, column 7 to column 27)",
  " (in 'nowcasting', line 1059, column 7 to column 12)",
  " (in 'nowcasting', line 1059, column 14 to column 23)",
  " (in 'nowcasting', line 1069, column 7 to column 12)",
  " (in 'nowcasting', line 1069, column 14 to column 23)",
  " (in 'nowcasting', line 1072, column 6 to column 12)",
  " (in 'nowcasting', line 30, column 4 to column 13)",
  " (in 'nowcasting', line 29, column 9 to line 31, column 3)",
  " (in 'nowcasting', line 28, column 4 to column 13)",
  " (in 'nowcasting', line 27, column 12 to line 29, column 3)",
  " (in 'nowcasting', line 27, column 2 to line 31, column 3)",
  " (in 'nowcasting', line 32, column 2 to column 173)",
  " (in 'nowcasting', line 33, column 2 to column 11)",
  " (in 'nowcasting', line 16, column 25 to line 34, column 1)",
  " (in 'nowcasting', line 49, column 4 to column 13)",
  " (in 'nowcasting', line 48, column 9 to line 50, column 3)",
  " (in 'nowcasting', line 47, column 4 to column 13)",
  " (in 'nowcasting', line 46, column 12 to line 48, column 3)",
  " (in 'nowcasting', line 46, column 2 to line 50, column 3)",
  " (in 'nowcasting', line 51, column 2 to column 173)",
  " (in 'nowcasting', line 52, column 2 to column 11)",
  " (in 'nowcasting', line 35, column 25 to line 53, column 1)",
  " (in 'nowcasting', line 80, column 2 to column 84)",
  " (in 'nowcasting', line 54, column 45 to line 81, column 1)",
  " (in 'nowcasting', line 113, column 2 to column 29)",
  " (in 'nowcasting', line 82, column 48 to line 114, column 1)",
  " (in 'nowcasting', line 130, column 2 to column 36)",
  " (in 'nowcasting', line 115, column 32 to line 131, column 1)",
  " (in 'nowcasting', line 146, column 2 to column 38)",
  " (in 'nowcasting', line 132, column 36 to line 147, column 1)",
  " (in 'nowcasting', line 157, column 9 to column 26)",
  " (in 'nowcasting', line 157, column 28 to column 45)",
  " (in 'nowcasting', line 157, column 2 to column 103)",
  " (in 'nowcasting', line 159, column 2 to column 29)",
  " (in 'nowcasting', line 161, column 2 to column 77)",
  " (in 'nowcasting', line 162, column 2 to column 11)",
  " (in 'nowcasting', line 148, column 48 to line 163, column 1)",
  " (in 'nowcasting', line 173, column 9 to column 18)",
  " (in 'nowcasting', line 173, column 20 to column 29)",
  " (in 'nowcasting', line 173, column 2 to column 71)",
  " (in 'nowcasting', line 176, column 4 to column 76)",
  " (in 'nowcasting', line 175, column 16 to line 177, column 3)",
  " (in 'nowcasting', line 175, column 2 to line 177, column 3)",
  " (in 'nowcasting', line 178, column 2 to column 11)",
  " (in 'nowcasting', line 164, column 40 to line 179, column 1)",
  " (in 'nowcasting', line 189, column 9 to column 26)",
  " (in 'nowcasting', line 189, column 2 to column 30)",
  " (in 'nowcasting', line 192, column 4 to column 59)",
  " (in 'nowcasting', line 191, column 16 to line 193, column 3)",
  " (in 'nowcasting', line 191, column 2 to line 193, column 3)",
  " (in 'nowcasting', line 194, column 2 to column 11)",
  " (in 'nowcasting', line 180, column 31 to line 195, column 1)",
  " (in 'nowcasting', line 213, column 2 to column 26)",
  " (in 'nowcasting', line 214, column 9 to column 12)",
  " (in 'nowcasting', line 214, column 2 to column 16)",
  " (in 'nowcasting', line 217, column 4 to column 51)",
  " (in 'nowcasting', line 216, column 16 to line 218, column 3)",
  " (in 'nowcasting', line 216, column 2 to line 218, column 3)",
  " (in 'nowcasting', line 219, column 2 to column 11)",
  " (in 'nowcasting', line 196, column 41 to line 220, column 1)",
  " (in 'nowcasting', line 233, column 10 to column 29)",
  " (in 'nowcasting', line 233, column 2 to column 33)",
  " (in 'nowcasting', line 236, column 4 to column 29)",
  " (in 'nowcasting', line 235, column 2 to line 236, column 29)",
  " (in 'nowcasting', line 238, column 2 to column 31)",
  " (in 'nowcasting', line 239, column 2 to column 11)",
  " (in 'nowcasting', line 221, column 43 to line 240, column 1)",
  " (in 'nowcasting', line 253, column 10 to column 29)",
  " (in 'nowcasting', line 253, column 2 to column 33)",
  " (in 'nowcasting', line 256, column 4 to column 35)",
  " (in 'nowcasting', line 255, column 2 to line 256, column 35)",
  " (in 'nowcasting', line 258, column 2 to column 13)",
  " (in 'nowcasting', line 259, column 2 to column 11)",
  " (in 'nowcasting', line 241, column 43 to line 260, column 1)",
  " (in 'nowcasting', line 272, column 9 to column 24)",
  " (in 'nowcasting', line 272, column 2 to column 28)",
  " (in 'nowcasting', line 274, column 4 to column 51)",
  " (in 'nowcasting', line 273, column 2 to line 274, column 51)",
  " (in 'nowcasting', line 275, column 2 to column 11)",
  " (in 'nowcasting', line 261, column 34 to line 276, column 1)",
  " (in 'nowcasting', line 288, column 2 to column 31)",
  " (in 'nowcasting', line 277, column 34 to line 289, column 1)",
  " (in 'nowcasting', line 325, column 9 to column 14)",
  " (in 'nowcasting', line 325, column 16 to column 29)",
  " (in 'nowcasting', line 325, column 2 to column 54)",
  " (in 'nowcasting', line 326, column 9 to column 19)",
  " (in 'nowcasting', line 326, column 21 to column 35)",
  " (in 'nowcasting', line 326, column 2 to column 60)",
  " (in 'nowcasting', line 327, column 9 to column 17)",
  " (in 'nowcasting', line 327, column 2 to column 55)",
  " (in 'nowcasting', line 328, column 9 to column 17)",
  " (in 'nowcasting', line 328, column 2 to column 61)",
  " (in 'nowcasting', line 329, column 9 to column 17)",
  " (in 'nowcasting', line 329, column 2 to column 55)",
  " (in 'nowcasting', line 331, column 9 to column 14)",
  " (in 'nowcasting', line 331, column 16 to column 25)",
  " (in 'nowcasting', line 331, column 2 to column 65)",
  " (in 'nowcasting', line 332, column 9 to column 14)",
  " (in 'nowcasting', line 332, column 16 to column 25)",
  " (in 'nowcasting', line 332, column 2 to column 66)",
  " (in 'nowcasting', line 333, column 9 to column 19)",
  " (in 'nowcasting', line 333, column 21 to column 31)",
  " (in 'nowcasting', line 333, column 2 to column 78)",
  " (in 'nowcasting', line 335, column 9 to column 30)",
  " (in 'nowcasting', line 335, column 32 to column 60)",
  " (in 'nowcasting', line 335, column 2 to column 145)",
  " (in 'nowcasting', line 336, column 9 to column 30)",
  " (in 'nowcasting', line 336, column 32 to column 60)",
  " (in 'nowcasting', line 336, column 2 to column 146)",
  " (in 'nowcasting', line 337, column 9 to column 30)",
  " (in 'nowcasting', line 337, column 32 to column 56)",
  " (in 'nowcasting', line 337, column 2 to column 133)",
  " (in 'nowcasting', line 338, column 9 to column 30)",
  " (in 'nowcasting', line 338, column 32 to column 56)",
  " (in 'nowcasting', line 338, column 2 to column 134)",
  " (in 'nowcasting', line 341, column 4 to column 39)",
  " (in 'nowcasting', line 342, column 4 to column 42)",
  " (in 'nowcasting', line 344, column 4 to column 25)",
  " (in 'nowcasting', line 345, column 4 to column 31)",
  " (in 'nowcasting', line 339, column 16 to line 346, column 3)",
  " (in 'nowcasting', line 339, column 2 to line 346, column 3)",
  " (in 'nowcasting', line 348, column 2 to column 19)",
  " (in 'nowcasting', line 349, column 2 to column 19)",
  " (in 'nowcasting', line 354, column 6 to column 82)",
  " (in 'nowcasting', line 352, column 33 to line 355, column 5)",
  " (in 'nowcasting', line 352, column 4 to line 355, column 5)",
  " (in 'nowcasting', line 351, column 21 to line 356, column 3)",
  " (in 'nowcasting', line 351, column 2 to line 356, column 3)",
  " (in 'nowcasting', line 361, column 6 to column 45)",
  " (in 'nowcasting', line 363, column 6 to column 121)",
  " (in 'nowcasting', line 368, column 8 to column 69)",
  " (in 'nowcasting', line 367, column 6 to line 368, column 69)",
  " (in 'nowcasting', line 371, column 8 to column 67)",
  " (in 'nowcasting', line 370, column 6 to line 371, column 67)",
  " (in 'nowcasting', line 374, column 8 to column 70)",
  " (in 'nowcasting', line 373, column 6 to line 374, column 70)",
  " (in 'nowcasting', line 377, column 8 to column 73)",
  " (in 'nowcasting', line 376, column 6 to line 377, column 73)",
  " (in 'nowcasting', line 380, column 8 to column 71)",
  " (in 'nowcasting', line 379, column 6 to line 380, column 71)",
  " (in 'nowcasting', line 383, column 8 to column 71)",
  " (in 'nowcasting', line 382, column 6 to line 383, column 71)",
  " (in 'nowcasting', line 387, column 8 to column 29)",
  " (in 'nowcasting', line 389, column 8 to column 109)",
  " (in 'nowcasting', line 390, column 8 to column 112)",
  " (in 'nowcasting', line 385, column 20 to line 391, column 7)",
  " (in 'nowcasting', line 385, column 6 to line 391, column 7)",
  " (in 'nowcasting', line 359, column 32 to line 392, column 5)",
  " (in 'nowcasting', line 359, column 4 to line 392, column 5)",
  " (in 'nowcasting', line 358, column 20 to line 393, column 3)",
  " (in 'nowcasting', line 358, column 2 to line 393, column 3)",
  " (in 'nowcasting', line 395, column 2 to column 57)",
  " (in 'nowcasting', line 398, column 4 to column 41)",
  " (in 'nowcasting', line 397, column 2 to line 398, column 41)",
  " (in 'nowcasting', line 399, column 2 to column 11)",
  " (in 'nowcasting', line 314, column 3 to line 400, column 1)",
  " (in 'nowcasting', line 407, column 8 to column 14)",
  " (in 'nowcasting', line 407, column 2 to column 30)",
  " (in 'nowcasting', line 409, column 4 to column 95)",
  " (in 'nowcasting', line 408, column 2 to line 409, column 95)",
  " (in 'nowcasting', line 410, column 2 to column 18)",
  " (in 'nowcasting', line 403, column 72 to line 411, column 1)",
  " (in 'nowcasting', line 414, column 2 to column 16)",
  " (in 'nowcasting', line 413, column 26 to line 415, column 1)",
  " (in 'nowcasting', line 417, column 2 to column 16)",
  " (in 'nowcasting', line 416, column 30 to line 418, column 1)",
  " (in 'nowcasting', line 422, column 4 to column 33)",
  " (in 'nowcasting', line 423, column 10 to column 16)",
  " (in 'nowcasting', line 423, column 4 to column 25)",
  " (in 'nowcasting', line 425, column 6 to column 33)",
  " (in 'nowcasting', line 424, column 4 to line 425, column 33)",
  " (in 'nowcasting', line 426, column 4 to column 13)",
  " (in 'nowcasting', line 420, column 47 to line 427, column 1)",
  " (in 'nowcasting', line 431, column 4 to column 33)",
  " (in 'nowcasting', line 432, column 10 to column 16)",
  " (in 'nowcasting', line 432, column 4 to column 25)",
  " (in 'nowcasting', line 434, column 6 to column 37)",
  " (in 'nowcasting', line 433, column 4 to line 434, column 37)",
  " (in 'nowcasting', line 435, column 4 to column 13)",
  " (in 'nowcasting', line 429, column 51 to line 436, column 1)",
  " (in 'nowcasting', line 439, column 2 to column 30)",
  " (in 'nowcasting', line 438, column 28 to line 440, column 1)",
  " (in 'nowcasting', line 442, column 2 to column 36)",
  " (in 'nowcasting', line 441, column 32 to line 443, column 1)",
  " (in 'nowcasting', line 447, column 4 to column 33)",
  " (in 'nowcasting', line 448, column 10 to column 16)",
  " (in 'nowcasting', line 448, column 4 to column 25)",
  " (in 'nowcasting', line 450, column 6 to column 35)",
  " (in 'nowcasting', line 449, column 4 to line 450, column 35)",
  " (in 'nowcasting', line 451, column 4 to column 13)",
  " (in 'nowcasting', line 445, column 49 to line 452, column 1)",
  " (in 'nowcasting', line 456, column 4 to column 33)",
  " (in 'nowcasting', line 457, column 10 to column 16)",
  " (in 'nowcasting', line 457, column 4 to column 25)",
  " (in 'nowcasting', line 459, column 6 to column 39)",
  " (in 'nowcasting', line 458, column 4 to line 459, column 39)",
  " (in 'nowcasting', line 460, column 4 to column 13)",
  " (in 'nowcasting', line 454, column 53 to line 461, column 1)",
  " (in 'nowcasting', line 464, column 2 to column 31)",
  " (in 'nowcasting', line 463, column 39 to line 465, column 1)",
  " (in 'nowcasting', line 467, column 2 to column 31)",
  " (in 'nowcasting', line 466, column 43 to line 468, column 1)",
  " (in 'nowcasting', line 472, column 4 to column 33)",
  " (in 'nowcasting', line 473, column 10 to column 16)",
  " (in 'nowcasting', line 473, column 4 to column 25)",
  " (in 'nowcasting', line 475, column 6 to column 41)",
  " (in 'nowcasting', line 474, column 4 to line 475, column 41)",
  " (in 'nowcasting', line 476, column 4 to column 13)",
  " (in 'nowcasting', line 470, column 65 to line 477, column 1)",
  " (in 'nowcasting', line 481, column 4 to column 33)",
  " (in 'nowcasting', line 482, column 10 to column 16)",
  " (in 'nowcasting', line 482, column 4 to column 25)",
  " (in 'nowcasting', line 484, column 6 to column 45)",
  " (in 'nowcasting', line 483, column 4 to line 484, column 45)",
  " (in 'nowcasting', line 485, column 4 to column 13)",
  " (in 'nowcasting', line 479, column 69 to line 486, column 1)",
  " (in 'nowcasting', line 489, column 2 to column 38)",
  " (in 'nowcasting', line 488, column 41 to line 490, column 1)",
  " (in 'nowcasting', line 492, column 2 to column 44)",
  " (in 'nowcasting', line 491, column 45 to line 493, column 1)",
  " (in 'nowcasting', line 497, column 4 to column 33)",
  " (in 'nowcasting', line 498, column 10 to column 16)",
  " (in 'nowcasting', line 498, column 4 to column 25)",
  " (in 'nowcasting', line 500, column 6 to column 43)",
  " (in 'nowcasting', line 499, column 4 to line 500, column 43)",
  " (in 'nowcasting', line 501, column 4 to column 13)",
  " (in 'nowcasting', line 495, column 67 to line 502, column 1)",
  " (in 'nowcasting', line 506, column 4 to column 33)",
  " (in 'nowcasting', line 507, column 10 to column 16)",
  " (in 'nowcasting', line 507, column 4 to column 25)",
  " (in 'nowcasting', line 509, column 6 to column 47)",
  " (in 'nowcasting', line 508, column 4 to line 509, column 47)",
  " (in 'nowcasting', line 510, column 4 to column 13)",
  " (in 'nowcasting', line 504, column 71 to line 511, column 1)",
  " (in 'nowcasting', line 522, column 2 to column 30)",
  " (in 'nowcasting', line 521, column 50 to line 523, column 1)",
  " (in 'nowcasting', line 525, column 2 to column 45)",
  " (in 'nowcasting', line 524, column 54 to line 526, column 1)",
  " (in 'nowcasting', line 530, column 4 to column 33)",
  " (in 'nowcasting', line 531, column 10 to column 16)",
  " (in 'nowcasting', line 531, column 4 to column 25)",
  " (in 'nowcasting', line 533, column 6 to column 47)",
  " (in 'nowcasting', line 532, column 4 to line 533, column 47)",
  " (in 'nowcasting', line 534, column 4 to column 13)",
  " (in 'nowcasting', line 528, column 81 to line 535, column 1)",
  " (in 'nowcasting', line 539, column 4 to column 33)",
  " (in 'nowcasting', line 540, column 10 to column 16)",
  " (in 'nowcasting', line 540, column 4 to column 25)",
  " (in 'nowcasting', line 542, column 6 to column 51)",
  " (in 'nowcasting', line 541, column 4 to line 542, column 51)",
  " (in 'nowcasting', line 543, column 4 to column 13)",
  " (in 'nowcasting', line 537, column 85 to line 544, column 1)",
  " (in 'nowcasting', line 546, column 2 to column 44)",
  " (in 'nowcasting', line 545, column 52 to line 547, column 1)",
  " (in 'nowcasting', line 549, column 2 to column 50)",
  " (in 'nowcasting', line 548, column 56 to line 550, column 1)",
  " (in 'nowcasting', line 554, column 4 to column 33)",
  " (in 'nowcasting', line 555, column 10 to column 16)",
  " (in 'nowcasting', line 555, column 4 to column 25)",
  " (in 'nowcasting', line 557, column 6 to column 49)",
  " (in 'nowcasting', line 556, column 4 to line 557, column 49)",
  " (in 'nowcasting', line 558, column 4 to column 13)",
  " (in 'nowcasting', line 552, column 83 to line 559, column 1)",
  " (in 'nowcasting', line 563, column 4 to column 33)",
  " (in 'nowcasting', line 564, column 10 to column 16)",
  " (in 'nowcasting', line 564, column 4 to column 25)",
  " (in 'nowcasting', line 566, column 6 to column 53)",
  " (in 'nowcasting', line 565, column 4 to line 566, column 53)",
  " (in 'nowcasting', line 567, column 4 to column 13)",
  " (in 'nowcasting', line 561, column 87 to line 568, column 1)",
  " (in 'nowcasting', line 572, column 9 to column 16)",
  " (in 'nowcasting', line 572, column 18 to column 25)",
  " (in 'nowcasting', line 572, column 2 to column 35)",
  " (in 'nowcasting', line 597, column 4 to column 189)",
  " (in 'nowcasting', line 596, column 9 to line 598, column 3)",
  " (in 'nowcasting', line 592, column 8 to column 63)",
  " (in 'nowcasting', line 591, column 26 to line 593, column 7)",
  " (in 'nowcasting', line 591, column 6 to line 593, column 7)",
  " (in 'nowcasting', line 590, column 24 to line 594, column 5)",
  " (in 'nowcasting', line 590, column 4 to line 594, column 5)",
  " (in 'nowcasting', line 595, column 4 to column 19)",
  " (in 'nowcasting', line 589, column 29 to line 596, column 3)",
  " (in 'nowcasting', line 589, column 9 to line 598, column 3)",
  " (in 'nowcasting', line 585, column 8 to column 57)",
  " (in 'nowcasting', line 584, column 26 to line 586, column 7)",
  " (in 'nowcasting', line 584, column 6 to line 586, column 7)",
  " (in 'nowcasting', line 583, column 24 to line 587, column 5)",
  " (in 'nowcasting', line 583, column 4 to line 587, column 5)",
  " (in 'nowcasting', line 588, column 4 to column 19)",
  " (in 'nowcasting', line 582, column 27 to line 589, column 3)",
  " (in 'nowcasting', line 582, column 9 to line 598, column 3)",
  " (in 'nowcasting', line 578, column 8 to column 49)",
  " (in 'nowcasting', line 577, column 26 to line 579, column 7)",
  " (in 'nowcasting', line 577, column 6 to line 579, column 7)",
  " (in 'nowcasting', line 576, column 24 to line 580, column 5)",
  " (in 'nowcasting', line 576, column 4 to line 580, column 5)",
  " (in 'nowcasting', line 581, column 4 to column 19)",
  " (in 'nowcasting', line 575, column 22 to line 582, column 3)",
  " (in 'nowcasting', line 575, column 9 to line 598, column 3)",
  " (in 'nowcasting', line 574, column 4 to column 13)",
  " (in 'nowcasting', line 573, column 20 to line 575, column 3)",
  " (in 'nowcasting', line 573, column 2 to line 598, column 3)",
  " (in 'nowcasting', line 571, column 38 to line 599, column 1)",
  " (in 'nowcasting', line 615, column 9 to column 19)",
  " (in 'nowcasting', line 615, column 21 to column 31)",
  " (in 'nowcasting', line 615, column 2 to column 81)",
  " (in 'nowcasting', line 618, column 4 to column 54)",
  " (in 'nowcasting', line 617, column 2 to line 618, column 54)",
  " (in 'nowcasting', line 619, column 2 to column 17)",
  " (in 'nowcasting', line 601, column 50 to line 620, column 1)",
  " (in 'nowcasting', line 638, column 9 to column 19)",
  " (in 'nowcasting', line 638, column 21 to column 31)",
  " (in 'nowcasting', line 638, column 2 to column 78)",
  " (in 'nowcasting', line 640, column 9 to column 19)",
  " (in 'nowcasting', line 640, column 21 to column 31)",
  " (in 'nowcasting', line 640, column 2 to column 111)",
  " (in 'nowcasting', line 644, column 6 to column 110)",
  " (in 'nowcasting', line 643, column 60 to line 645, column 5)",
  " (in 'nowcasting', line 643, column 4 to line 645, column 5)",
  " (in 'nowcasting', line 642, column 21 to line 646, column 3)",
  " (in 'nowcasting', line 642, column 2 to line 646, column 3)",
  " (in 'nowcasting', line 647, column 2 to column 12)",
  " (in 'nowcasting', line 622, column 92 to line 648, column 1)",
  " (in 'nowcasting', line 665, column 9 to column 19)",
  " (in 'nowcasting', line 665, column 21 to column 31)",
  " (in 'nowcasting', line 665, column 2 to column 81)",
  " (in 'nowcasting', line 667, column 9 to column 19)",
  " (in 'nowcasting', line 667, column 21 to column 31)",
  " (in 'nowcasting', line 667, column 2 to column 111)",
  " (in 'nowcasting', line 668, column 9 to column 19)",
  " (in 'nowcasting', line 668, column 21 to column 31)",
  " (in 'nowcasting', line 668, column 2 to column 117)",
  " (in 'nowcasting', line 671, column 4 to column 116)",
  " (in 'nowcasting', line 670, column 2 to line 671, column 116)",
  " (in 'nowcasting', line 677, column 8 to column 25)",
  " (in 'nowcasting', line 676, column 13 to line 678, column 7)",
  " (in 'nowcasting', line 675, column 8 to column 51)",
  " (in 'nowcasting', line 674, column 29 to line 676, column 7)",
  " (in 'nowcasting', line 674, column 6 to line 678, column 7)",
  " (in 'nowcasting', line 673, column 27 to line 679, column 5)",
  " (in 'nowcasting', line 673, column 4 to line 679, column 5)",
  " (in 'nowcasting', line 672, column 25 to line 680, column 3)",
  " (in 'nowcasting', line 672, column 2 to line 680, column 3)",
  " (in 'nowcasting', line 681, column 2 to column 15)",
  " (in 'nowcasting', line 650, column 94 to line 682, column 1)",
  " (in 'nowcasting', line 688, column 10 to column 34)",
  " (in 'nowcasting', line 688, column 4 to column 52)",
  " (in 'nowcasting', line 689, column 4 to column 18)",
  " (in 'nowcasting', line 690, column 4 to column 21)",
  " (in 'nowcasting', line 693, column 6 to column 60)",
  " (in 'nowcasting', line 694, column 6 to column 66)",
  " (in 'nowcasting', line 698, column 8 to column 38)",
  " (in 'nowcasting', line 697, column 13 to line 699, column 7)",
  " (in 'nowcasting', line 696, column 8 to column 63)",
  " (in 'nowcasting', line 695, column 28 to line 697, column 7)",
  " (in 'nowcasting', line 695, column 6 to line 699, column 7)",
  " (in 'nowcasting', line 691, column 23 to line 700, column 5)",
  " (in 'nowcasting', line 691, column 4 to line 700, column 5)",
  " (in 'nowcasting', line 701, column 4 to column 22)",
  " (in 'nowcasting', line 686, column 28 to line 702, column 1)",
  " (in 'nowcasting', line 708, column 10 to column 34)",
  " (in 'nowcasting', line 708, column 4 to column 52)",
  " (in 'nowcasting', line 709, column 4 to column 18)",
  " (in 'nowcasting', line 710, column 4 to column 21)",
  " (in 'nowcasting', line 713, column 6 to column 60)",
  " (in 'nowcasting', line 714, column 6 to column 66)",
  " (in 'nowcasting', line 718, column 8 to column 38)",
  " (in 'nowcasting', line 717, column 13 to line 719, column 7)",
  " (in 'nowcasting', line 716, column 8 to column 61)",
  " (in 'nowcasting', line 715, column 28 to line 717, column 7)",
  " (in 'nowcasting', line 715, column 6 to line 719, column 7)",
  " (in 'nowcasting', line 711, column 23 to line 720, column 5)",
  " (in 'nowcasting', line 711, column 4 to line 720, column 5)",
  " (in 'nowcasting', line 721, column 4 to column 22)",
  " (in 'nowcasting', line 706, column 28 to line 722, column 1)",
  " (in 'nowcasting', line 727, column 10 to column 19)",
  " (in 'nowcasting', line 727, column 21 to column 26)",
  " (in 'nowcasting', line 727, column 4 to column 83)",
  " (in 'nowcasting', line 735, column 12 to column 99)",
  " (in 'nowcasting', line 734, column 17 to line 736, column 11)",
  " (in 'nowcasting', line 733, column 12 to column 120)",
  " (in 'nowcasting', line 732, column 31 to line 734, column 11)",
  " (in 'nowcasting', line 732, column 10 to line 736, column 11)",
  " (in 'nowcasting', line 731, column 30 to line 737, column 9)",
  " (in 'nowcasting', line 731, column 8 to line 737, column 9)",
  " (in 'nowcasting', line 729, column 29 to line 738, column 7)",
  " (in 'nowcasting', line 729, column 6 to line 738, column 7)",
  " (in 'nowcasting', line 728, column 27 to line 739, column 5)",
  " (in 'nowcasting', line 728, column 4 to line 739, column 5)",
  " (in 'nowcasting', line 740, column 4 to column 28)",
  " (in 'nowcasting', line 725, column 44 to line 741, column 1)"};
int max_int(const int& a, const int& b, std::ostream* pstream__);
int min_int(const int& a, const int& b, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
AR(const T0__& y_arg__, const T1__& phi_arg__, const int& t, const int& p,
   std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
MA(const T0__& xi_arg__, const T1__& theta_arg__, const int& t, const int& q,
   std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_phi_AR(const T0__& phi_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_theta_MA(const T0__& theta_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_val_2_vec(const T0__& A_arg__, const T1__& val, std::ostream*
                 pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
append_vec_2_val(const T0__& val, const T1__& A_arg__, std::ostream*
                 pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rowwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
colwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__);
template <typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T16__, typename T17__,
          typename T18__, typename T19__, typename T20__, typename T21__,
          typename T32__, typename T33__, typename T34__, typename T35__,
          typename T36__, typename T37__, typename T38__, typename T39__,
          typename T40__, typename T41__, typename T42__, typename T43__,
          stan::require_all_t<stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T16__>,
                              stan::is_vt_not_complex<T16__>,
                              stan::is_col_vector<T17__>,
                              stan::is_vt_not_complex<T17__>,
                              stan::is_col_vector<T18__>,
                              stan::is_vt_not_complex<T18__>,
                              stan::is_col_vector<T19__>,
                              stan::is_vt_not_complex<T19__>,
                              stan::is_col_vector<T20__>,
                              stan::is_vt_not_complex<T20__>,
                              stan::is_col_vector<T21__>,
                              stan::is_vt_not_complex<T21__>,
                              stan::is_col_vector<T32__>,
                              stan::is_vt_not_complex<T32__>,
                              stan::is_col_vector<T33__>,
                              stan::is_vt_not_complex<T33__>,
                              stan::is_col_vector<T34__>,
                              stan::is_vt_not_complex<T34__>,
                              stan::is_col_vector<T35__>,
                              stan::is_vt_not_complex<T35__>,
                              stan::is_stan_scalar<T36__>,
                              stan::is_stan_scalar<T37__>,
                              stan::is_col_vector<T38__>,
                              stan::is_vt_not_complex<T38__>,
                              stan::is_col_vector<T39__>,
                              stan::is_vt_not_complex<T39__>,
                              stan::is_eigen_matrix_dynamic<T40__>,
                              stan::is_vt_not_complex<T40__>,
                              stan::is_eigen_matrix_dynamic<T41__>,
                              stan::is_vt_not_complex<T41__>,
                              stan::is_eigen_matrix_dynamic<T42__>,
                              stan::is_vt_not_complex<T42__>,
                              stan::is_eigen_matrix_dynamic<T43__>,
                              stan::is_vt_not_complex<T43__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                stan::base_type_t<T7__>, stan::base_type_t<T8__>,
                stan::promote_args_t<stan::base_type_t<T9__>,
                  stan::base_type_t<T16__>, stan::base_type_t<T17__>,
                  stan::base_type_t<T18__>, stan::base_type_t<T19__>,
                  stan::promote_args_t<stan::base_type_t<T20__>,
                    stan::base_type_t<T21__>, stan::base_type_t<T32__>,
                    stan::base_type_t<T33__>, stan::base_type_t<T34__>,
                    stan::promote_args_t<stan::base_type_t<T35__>, T36__,
                      T37__, stan::base_type_t<T38__>,
                      stan::base_type_t<T39__>,
                      stan::promote_args_t<stan::base_type_t<T40__>,
                        stan::base_type_t<T41__>, stan::base_type_t<T42__>,
                        stan::base_type_t<T43__>>>>>>,-1,-1>
state_space_model(const int& num_steps, const int& num_delays, const int&
                  num_strata, const int& tsize, const T4__& phi_mu_arg__,
                  const T5__& theta_mu_arg__, const T6__& phi_nu_arg__,
                  const T7__& mu_intercept_arg__, const T8__&
                  nu_intercept_arg__, const T9__& lambda_cycle_arg__,
                  const int& has_day_of_week_epi, const int& has_weekend_epi,
                  const int& has_day_of_month_epi, const int&
                  has_month_of_year_epi, const int& has_week_of_year_epi,
                  const int& has_holidays_epi, const T16__&
                  beta_dow_epi_arg__, const T17__& beta_wkend_epi_arg__,
                  const T18__& beta_dom_epi_arg__, const T19__&
                  beta_month_epi_arg__, const T20__& beta_week_epi_arg__,
                  const T21__& beta_holidays_epi_arg__,
                  const std::vector<int>& day_of_week_epi,
                  const std::vector<int>& weekend_epi,
                  const std::vector<int>& day_of_month_epi,
                  const std::vector<int>& month_of_year_epi,
                  const std::vector<int>& week_of_year_epi,
                  const std::vector<int>& holidays_epi, const int& mu_p,
                  const int& mu_q, const int& nu_p, const int& has_cycle,
                  const T32__& mu_init_arg__, const T33__& nu_init_arg__,
                  const T34__& c_init_arg__, const T35__& ctilde_init_arg__,
                  const T36__& sd_mu, const T37__& sd_nu, const T38__&
                  sd_cycle_arg__, const T39__& sd_ctilde_arg__, const T40__&
                  xi_mu_arg__, const T41__& xi_nu_arg__, const T42__&
                  xi_cycle_arg__, const T43__& xi_ctilde_arg__, std::ostream*
                  pstream__);
template <typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
std::vector<stan::promote_args_t<stan::base_type_t<T2__>>>
get_val_for_model(const int& n_rows, const int& num_delays, const T2__&
                  m_arg__, const std::vector<std::vector<int>>& case_idx,
                  const int& s_col, const int& d_col, const int& t_col,
                  std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
log_transform(const T0__& x, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
inv_log_transform(const T0__& y, std::ostream* pstream__);
std::vector<double>
log_transform(const std::vector<double>& x, std::ostream* pstream__);
std::vector<double>
inv_log_transform(const std::vector<double>& y, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
log1p_transform(const T0__& x, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
stan::promote_args_t<T0__>
inv_log1p_transform(const T0__& y, std::ostream* pstream__);
std::vector<double>
log1p_transform(const std::vector<double>& x, std::ostream* pstream__);
std::vector<double>
inv_log1p_transform(const std::vector<double>& y, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
softplus_transform(const T0__& x, const T1__& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
inv_softplus_transform(const T0__& y, const T1__& k, std::ostream* pstream__);
std::vector<double>
softplus_transform(const std::vector<double>& x, const double& k,
                   std::ostream* pstream__);
std::vector<double>
inv_softplus_transform(const std::vector<double>& y, const double& k,
                       std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
softplus1p_transform(const T0__& x, const T1__& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
inv_softplus1p_transform(const T0__& y, const T1__& k, std::ostream*
                         pstream__);
std::vector<double>
softplus1p_transform(const std::vector<double>& x, const double& k,
                     std::ostream* pstream__);
std::vector<double>
inv_softplus1p_transform(const std::vector<double>& y, const double& k,
                         std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
dhyperbolic_transform(const T0__& x, const T1__& k, const T2__& c,
                      std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
inv_dhyperbolic_transform(const T0__& y, const T1__& k, const T2__& c,
                          std::ostream* pstream__);
std::vector<double>
dhyperbolic_transform(const std::vector<double>& x, const double& k,
                      const double& c, std::ostream* pstream__);
std::vector<double>
inv_dhyperbolic_transform(const std::vector<double>& y, const double& k,
                          const double& c, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
dhyperbolic1p_transform(const T0__& x, const T1__& k, const T2__& c,
                        std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
inv_dhyperbolic1p_transform(const T0__& y, const T1__& k, const T2__& c,
                            std::ostream* pstream__);
std::vector<double>
dhyperbolic1p_transform(const std::vector<double>& x, const double& k,
                        const double& c, std::ostream* pstream__);
std::vector<double>
inv_dhyperbolic1p_transform(const std::vector<double>& y, const double& k,
                            const double& c, std::ostream* pstream__);
template <typename T0__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T5__, T6__>,-1,-1>
transform_state_space_model(const T0__& m_arg__, const int& identity_link,
                            const int& log_link, const int& softplus_link,
                            const int& dist_hyper_link, const T5__& k,
                            const T6__& c, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
count_cases(const std::vector<std::vector<int>>& case_idx, const int&
            num_strata, const int& num_delays, const int& n_rows, const int&
            d_col, const int& s_col, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
mean_cases(const std::vector<double>& cases_real,
           const std::vector<std::vector<int>>& case_idx, const int&
           num_strata, const int& num_delays, const int& n_rows, const int&
           d_col, const int& s_col, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
sd_cases(const std::vector<double>& cases_real,
         const std::vector<std::vector<int>>& case_idx, const int&
         num_strata, const int& num_delays, const int& n_rows, const int&
         d_col, const int& s_col, std::ostream* pstream__);
template <typename T7__, typename T8__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_eigen_matrix_dynamic<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
std::vector<
  stan::promote_args_t<stan::base_type_t<T7__>, stan::base_type_t<T8__>>>
normalize_cases(const std::vector<double>& cases_real,
                const std::vector<std::vector<int>>& case_idx, const int&
                num_strata, const int& num_delays, const int& n_rows,
                const int& d_col, const int& s_col, const T7__& mu_arg__,
                const T8__& sigma_arg__, std::ostream* pstream__);
template <typename T7__, typename T8__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_eigen_matrix_dynamic<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
std::vector<
  stan::promote_args_t<stan::base_type_t<T7__>, stan::base_type_t<T8__>>>
inv_normalize_cases(const std::vector<double>& normalized,
                    const std::vector<std::vector<int>>& case_idx, const int&
                    num_strata, const int& num_delays, const int& n_rows,
                    const int& d_col, const int& s_col, const T7__& mu_arg__,
                    const T8__& sigma_arg__, std::ostream* pstream__);
template <typename T0__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_eigen_matrix_dynamic<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_eigen_matrix_dynamic<T9__>,
                              stan::is_vt_not_complex<T9__>>* = nullptr>
std::vector<
  std::vector<
    stan::promote_args_t<T0__, stan::base_type_t<T8__>,
      stan::base_type_t<T9__>>>>
inv_normalize_cases_2(const std::vector<std::vector<T0__>>& normalized_mat,
                      const std::vector<std::vector<int>>& case_idx,
                      const int& num_strata, const int& num_delays,
                      const int& num_steps, const int& tsize, const int&
                      d_col, const int& s_col, const T8__& mu_arg__,
                      const T9__& sigma_arg__, std::ostream* pstream__);
int max_int(const int& a, const int& b, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 298;
    if (stan::math::logical_gt(a, b)) {
      current_statement__ = 296;
      return a;
    } else {
      current_statement__ = 294;
      return b;
    }
    current_statement__ = 299;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__,
      "Error in `max_int` function. This is an internal error of the `diseasenowcasting` package. Report to `https://github.com/RodrigoZepeda/diseasenowcasting/issues`");
    throw std::domain_error(errmsg_stream__.str());
    current_statement__ = 300;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int min_int(const int& a, const int& b, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 306;
    if (stan::math::logical_gt(a, b)) {
      current_statement__ = 304;
      return b;
    } else {
      current_statement__ = 302;
      return a;
    }
    current_statement__ = 307;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__,
      "Error in `min_int` function. This is an internal error of the `diseasenowcasting` package. Report to `https://github.com/RodrigoZepeda/diseasenowcasting/issues`");
    throw std::domain_error(errmsg_stream__.str());
    current_statement__ = 308;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
AR(const T0__& y_arg__, const T1__& phi_arg__, const int& t, const int& p,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& phi = stan::math::to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 310;
    return stan::math::multiply(
             stan::model::rvalue(y, "y", stan::model::index_omni(),
               stan::model::index_min_max(((t + 1) -
                 min_int(t, (p + 1), pstream__)), t)),
             stan::model::rvalue(phi, "phi",
               stan::model::index_min_max(((p + 2) -
                 min_int(t, (p + 1), pstream__)), (p + 1))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
MA(const T0__& xi_arg__, const T1__& theta_arg__, const int& t, const int& q,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xi = stan::math::to_ref(xi_arg__);
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 312;
    return AR(xi, theta, t, q, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_phi_AR(const T0__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& phi = stan::math::to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 314;
    return append_val_2_vec(phi, 0.0, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_theta_MA(const T0__& theta_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 316;
    return append_val_2_vec(theta, 1.0, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  const auto& B = stan::math::to_ref(B_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 318;
    stan::math::validate_non_negative_index("C", "rows(A) + rows(B)",
      (stan::math::rows(A) + stan::math::rows(B)));
    current_statement__ = 319;
    stan::math::validate_non_negative_index("C", "cols(A) + cols(B)",
      (stan::math::cols(A) + stan::math::cols(B)));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) +
        stan::math::rows(B)), (stan::math::cols(A) + stan::math::cols(B)),
        DUMMY_VAR__);
    current_statement__ = 320;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) + stan::math::rows(B)),
        (stan::math::cols(A) + stan::math::cols(B))), "assigning variable C");
    current_statement__ = 321;
    stan::model::assign(C, A, "assigning variable C",
      stan::model::index_min_max(1, stan::math::rows(A)),
      stan::model::index_min_max(1, stan::math::cols(A)));
    current_statement__ = 322;
    stan::model::assign(C, B, "assigning variable C",
      stan::model::index_min_max((stan::math::rows(A) + 1),
        (stan::math::rows(A) + stan::math::rows(B))),
      stan::model::index_min_max((stan::math::cols(A) + 1),
        (stan::math::cols(A) + stan::math::cols(B))));
    current_statement__ = 323;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 325;
    stan::math::validate_non_negative_index("C", "rows(A) * k",
      (stan::math::rows(A) * k));
    current_statement__ = 326;
    stan::math::validate_non_negative_index("C", "cols(A) * k",
      (stan::math::cols(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) *
        k), (stan::math::cols(A) * k), DUMMY_VAR__);
    current_statement__ = 327;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) * k),
        (stan::math::cols(A) * k)), "assigning variable C");
    current_statement__ = 330;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 328;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::rows(A)) + 1), (l
          * stan::math::rows(A))),
        stan::model::index_min_max((((l - 1) * stan::math::cols(A)) + 1), (l
          * stan::math::cols(A))));
    }
    current_statement__ = 331;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 333;
    stan::math::validate_non_negative_index("C", "num_elements(A) * k",
      (stan::math::num_elements(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) * k), DUMMY_VAR__);
    current_statement__ = 337;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 335;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::num_elements(A)) +
          1), (l * stan::math::num_elements(A))));
    }
    current_statement__ = 338;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 340;
    n = stan::math::num_elements(A);
    current_statement__ = 341;
    stan::math::validate_non_negative_index("C", "n * k", (n * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n * k), DUMMY_VAR__);
    current_statement__ = 345;
    for (int j = 1; j <= n; ++j) {
      current_statement__ = 343;
      stan::model::assign(C,
        stan::math::rep_vector(
          stan::model::rvalue(A, "A", stan::model::index_uni(j)), k),
        "assigning variable C",
        stan::model::index_min_max((((j - 1) * k) + 1), (k * j)));
    }
    current_statement__ = 346;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_val_2_vec(const T0__& A_arg__, const T1__& val, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 348;
    stan::math::validate_non_negative_index("B", "num_elements(A) + 1",
      (stan::math::num_elements(A) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) + 1), DUMMY_VAR__);
    current_statement__ = 351;
    if (stan::math::logical_gt(stan::math::num_elements(A), 0)) {
      current_statement__ = 350;
      stan::model::assign(B, A, "assigning variable B",
        stan::model::index_min_max(1, stan::math::num_elements(A)));
    }
    current_statement__ = 352;
    stan::model::assign(B, val, "assigning variable B",
      stan::model::index_uni((stan::math::num_elements(A) + 1)));
    current_statement__ = 353;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
append_vec_2_val(const T0__& val, const T1__& A_arg__, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 355;
    stan::math::validate_non_negative_index("B", "num_elements(A) + 1",
      (stan::math::num_elements(A) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) + 1), DUMMY_VAR__);
    current_statement__ = 358;
    if (stan::math::logical_gt(stan::math::num_elements(A), 0)) {
      current_statement__ = 357;
      stan::model::assign(B, A, "assigning variable B",
        stan::model::index_min_max(2, (stan::math::num_elements(A) + 1)));
    }
    current_statement__ = 359;
    stan::model::assign(B, val, "assigning variable B",
      stan::model::index_uni(1));
    current_statement__ = 360;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rowwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 362;
    stan::math::validate_non_negative_index("B", "num_elements(A)",
      stan::math::num_elements(A));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       A), DUMMY_VAR__);
    current_statement__ = 365;
    for (int d = 1; d <= stan::math::rows(A); ++d) {
      current_statement__ = 364;
      stan::model::assign(B,
        stan::math::transpose(
          stan::model::rvalue(A, "A", stan::model::index_uni(d),
            stan::model::index_omni())), "assigning variable B",
        stan::model::index_min_max(((stan::math::cols(A) * (d - 1)) + 1),
          (stan::math::cols(A) * d)));
    }
    current_statement__ = 366;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
colwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 368;
    return rowwise_mat_2_vec(stan::math::transpose(A), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T16__, typename T17__,
          typename T18__, typename T19__, typename T20__, typename T21__,
          typename T32__, typename T33__, typename T34__, typename T35__,
          typename T36__, typename T37__, typename T38__, typename T39__,
          typename T40__, typename T41__, typename T42__, typename T43__,
          stan::require_all_t<stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T16__>,
                              stan::is_vt_not_complex<T16__>,
                              stan::is_col_vector<T17__>,
                              stan::is_vt_not_complex<T17__>,
                              stan::is_col_vector<T18__>,
                              stan::is_vt_not_complex<T18__>,
                              stan::is_col_vector<T19__>,
                              stan::is_vt_not_complex<T19__>,
                              stan::is_col_vector<T20__>,
                              stan::is_vt_not_complex<T20__>,
                              stan::is_col_vector<T21__>,
                              stan::is_vt_not_complex<T21__>,
                              stan::is_col_vector<T32__>,
                              stan::is_vt_not_complex<T32__>,
                              stan::is_col_vector<T33__>,
                              stan::is_vt_not_complex<T33__>,
                              stan::is_col_vector<T34__>,
                              stan::is_vt_not_complex<T34__>,
                              stan::is_col_vector<T35__>,
                              stan::is_vt_not_complex<T35__>,
                              stan::is_stan_scalar<T36__>,
                              stan::is_stan_scalar<T37__>,
                              stan::is_col_vector<T38__>,
                              stan::is_vt_not_complex<T38__>,
                              stan::is_col_vector<T39__>,
                              stan::is_vt_not_complex<T39__>,
                              stan::is_eigen_matrix_dynamic<T40__>,
                              stan::is_vt_not_complex<T40__>,
                              stan::is_eigen_matrix_dynamic<T41__>,
                              stan::is_vt_not_complex<T41__>,
                              stan::is_eigen_matrix_dynamic<T42__>,
                              stan::is_vt_not_complex<T42__>,
                              stan::is_eigen_matrix_dynamic<T43__>,
                              stan::is_vt_not_complex<T43__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                stan::base_type_t<T7__>, stan::base_type_t<T8__>,
                stan::promote_args_t<stan::base_type_t<T9__>,
                  stan::base_type_t<T16__>, stan::base_type_t<T17__>,
                  stan::base_type_t<T18__>, stan::base_type_t<T19__>,
                  stan::promote_args_t<stan::base_type_t<T20__>,
                    stan::base_type_t<T21__>, stan::base_type_t<T32__>,
                    stan::base_type_t<T33__>, stan::base_type_t<T34__>,
                    stan::promote_args_t<stan::base_type_t<T35__>, T36__,
                      T37__, stan::base_type_t<T38__>,
                      stan::base_type_t<T39__>,
                      stan::promote_args_t<stan::base_type_t<T40__>,
                        stan::base_type_t<T41__>, stan::base_type_t<T42__>,
                        stan::base_type_t<T43__>>>>>>,-1,-1>
state_space_model(const int& num_steps, const int& num_delays, const int&
                  num_strata, const int& tsize, const T4__& phi_mu_arg__,
                  const T5__& theta_mu_arg__, const T6__& phi_nu_arg__,
                  const T7__& mu_intercept_arg__, const T8__&
                  nu_intercept_arg__, const T9__& lambda_cycle_arg__,
                  const int& has_day_of_week_epi, const int& has_weekend_epi,
                  const int& has_day_of_month_epi, const int&
                  has_month_of_year_epi, const int& has_week_of_year_epi,
                  const int& has_holidays_epi, const T16__&
                  beta_dow_epi_arg__, const T17__& beta_wkend_epi_arg__,
                  const T18__& beta_dom_epi_arg__, const T19__&
                  beta_month_epi_arg__, const T20__& beta_week_epi_arg__,
                  const T21__& beta_holidays_epi_arg__,
                  const std::vector<int>& day_of_week_epi,
                  const std::vector<int>& weekend_epi,
                  const std::vector<int>& day_of_month_epi,
                  const std::vector<int>& month_of_year_epi,
                  const std::vector<int>& week_of_year_epi,
                  const std::vector<int>& holidays_epi, const int& mu_p,
                  const int& mu_q, const int& nu_p, const int& has_cycle,
                  const T32__& mu_init_arg__, const T33__& nu_init_arg__,
                  const T34__& c_init_arg__, const T35__& ctilde_init_arg__,
                  const T36__& sd_mu, const T37__& sd_nu, const T38__&
                  sd_cycle_arg__, const T39__& sd_ctilde_arg__, const T40__&
                  xi_mu_arg__, const T41__& xi_nu_arg__, const T42__&
                  xi_cycle_arg__, const T43__& xi_ctilde_arg__, std::ostream*
                  pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::base_type_t<T7__>,
                             stan::base_type_t<T8__>,
                             stan::promote_args_t<stan::base_type_t<T9__>,
                               stan::base_type_t<T16__>,
                               stan::base_type_t<T17__>,
                               stan::base_type_t<T18__>,
                               stan::base_type_t<T19__>,
                               stan::promote_args_t<stan::base_type_t<T20__>,
                                 stan::base_type_t<T21__>,
                                 stan::base_type_t<T32__>,
                                 stan::base_type_t<T33__>,
                                 stan::base_type_t<T34__>,
                                 stan::promote_args_t<stan::base_type_t<T35__>,
                                   T36__, T37__, stan::base_type_t<T38__>,
                                   stan::base_type_t<T39__>,
                                   stan::promote_args_t<stan::base_type_t<T40__>,
                                     stan::base_type_t<T41__>,
                                     stan::base_type_t<T42__>,
                                     stan::base_type_t<T43__>>>>>>;
  int current_statement__ = 0;
  const auto& phi_mu = stan::math::to_ref(phi_mu_arg__);
  const auto& theta_mu = stan::math::to_ref(theta_mu_arg__);
  const auto& phi_nu = stan::math::to_ref(phi_nu_arg__);
  const auto& mu_intercept = stan::math::to_ref(mu_intercept_arg__);
  const auto& nu_intercept = stan::math::to_ref(nu_intercept_arg__);
  const auto& lambda_cycle = stan::math::to_ref(lambda_cycle_arg__);
  const auto& beta_dow_epi = stan::math::to_ref(beta_dow_epi_arg__);
  const auto& beta_wkend_epi = stan::math::to_ref(beta_wkend_epi_arg__);
  const auto& beta_dom_epi = stan::math::to_ref(beta_dom_epi_arg__);
  const auto& beta_month_epi = stan::math::to_ref(beta_month_epi_arg__);
  const auto& beta_week_epi = stan::math::to_ref(beta_week_epi_arg__);
  const auto& beta_holidays_epi = stan::math::to_ref(beta_holidays_epi_arg__);
  const auto& mu_init = stan::math::to_ref(mu_init_arg__);
  const auto& nu_init = stan::math::to_ref(nu_init_arg__);
  const auto& c_init = stan::math::to_ref(c_init_arg__);
  const auto& ctilde_init = stan::math::to_ref(ctilde_init_arg__);
  const auto& sd_cycle = stan::math::to_ref(sd_cycle_arg__);
  const auto& sd_ctilde = stan::math::to_ref(sd_ctilde_arg__);
  const auto& xi_mu = stan::math::to_ref(xi_mu_arg__);
  const auto& xi_nu = stan::math::to_ref(xi_nu_arg__);
  const auto& xi_cycle = stan::math::to_ref(xi_cycle_arg__);
  const auto& xi_ctilde = stan::math::to_ref(xi_ctilde_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 370;
    stan::math::validate_non_negative_index("error_mu", "tsize", tsize);
    current_statement__ = 371;
    stan::math::validate_non_negative_index("error_mu", "num_steps - 1",
      (num_steps - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> error_mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, (num_steps - 1),
        DUMMY_VAR__);
    current_statement__ = 372;
    stan::model::assign(error_mu, stan::math::multiply(sd_mu, xi_mu),
      "assigning variable error_mu");
    current_statement__ = 373;
    stan::math::validate_non_negative_index("error_nu", "num_strata",
      num_strata);
    current_statement__ = 374;
    stan::math::validate_non_negative_index("error_nu", "num_delays - 1",
      (num_delays - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> error_nu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, (num_delays
        - 1), DUMMY_VAR__);
    current_statement__ = 375;
    stan::model::assign(error_nu, stan::math::multiply(sd_nu, xi_nu),
      "assigning variable error_nu");
    current_statement__ = 376;
    stan::math::validate_non_negative_index("phi_mu_star", "mu_p + 1", (mu_p
      + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> phi_mu_star =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((mu_p + 1), DUMMY_VAR__);
    current_statement__ = 377;
    stan::model::assign(phi_mu_star, create_phi_AR(phi_mu, pstream__),
      "assigning variable phi_mu_star");
    current_statement__ = 378;
    stan::math::validate_non_negative_index("theta_mu_star", "mu_q + 1",
      (mu_q + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_star =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((mu_q + 1), DUMMY_VAR__);
    current_statement__ = 379;
    stan::model::assign(theta_mu_star, create_theta_MA(theta_mu, pstream__),
      "assigning variable theta_mu_star");
    current_statement__ = 380;
    stan::math::validate_non_negative_index("phi_nu_star", "nu_p + 1", (nu_p
      + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> phi_nu_star =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nu_p + 1), DUMMY_VAR__);
    current_statement__ = 381;
    stan::model::assign(phi_nu_star, create_phi_AR(phi_nu, pstream__),
      "assigning variable phi_nu_star");
    current_statement__ = 382;
    stan::math::validate_non_negative_index("m", "tsize", tsize);
    current_statement__ = 383;
    stan::math::validate_non_negative_index("m", "num_steps", num_steps);
    Eigen::Matrix<local_scalar_t__,-1,-1> m =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
        DUMMY_VAR__);
    current_statement__ = 384;
    stan::model::assign(m, stan::math::rep_matrix(0.0, tsize, num_steps),
      "assigning variable m");
    current_statement__ = 385;
    stan::math::validate_non_negative_index("mu", "tsize", tsize);
    current_statement__ = 386;
    stan::math::validate_non_negative_index("mu", "num_steps", num_steps);
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
        DUMMY_VAR__);
    current_statement__ = 387;
    stan::model::assign(mu, stan::math::rep_matrix(0.0, tsize, num_steps),
      "assigning variable mu");
    current_statement__ = 388;
    stan::math::validate_non_negative_index("nu", "num_strata", num_strata);
    current_statement__ = 389;
    stan::math::validate_non_negative_index("nu", "num_delays", num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> nu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 390;
    stan::model::assign(nu,
      stan::math::rep_matrix(0.0, num_strata, num_delays),
      "assigning variable nu");
    current_statement__ = 391;
    stan::math::validate_non_negative_index("error_cycle",
      "has_cycle ? tsize : 0", (has_cycle ? tsize : 0));
    current_statement__ = 392;
    stan::math::validate_non_negative_index("error_cycle",
      "has_cycle ? num_steps - 1 : 0", (has_cycle ? (num_steps - 1) : 0));
    Eigen::Matrix<local_scalar_t__,-1,-1> error_cycle =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((has_cycle ? tsize : 0),
        (has_cycle ? (num_steps - 1) : 0), DUMMY_VAR__);
    current_statement__ = 393;
    stan::model::assign(error_cycle,
      stan::math::rep_matrix(0.0, (has_cycle ? tsize : 0),
        (has_cycle ? (num_steps - 1) : 0)), "assigning variable error_cycle");
    current_statement__ = 394;
    stan::math::validate_non_negative_index("error_ctilde",
      "has_cycle ? tsize : 0", (has_cycle ? tsize : 0));
    current_statement__ = 395;
    stan::math::validate_non_negative_index("error_ctilde",
      "has_cycle ? num_steps - 1 : 0", (has_cycle ? (num_steps - 1) : 0));
    Eigen::Matrix<local_scalar_t__,-1,-1> error_ctilde =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((has_cycle ? tsize : 0),
        (has_cycle ? (num_steps - 1) : 0), DUMMY_VAR__);
    current_statement__ = 396;
    stan::model::assign(error_ctilde,
      stan::math::rep_matrix(0.0, (has_cycle ? tsize : 0),
        (has_cycle ? (num_steps - 1) : 0)), "assigning variable error_ctilde");
    current_statement__ = 397;
    stan::math::validate_non_negative_index("cycle_t",
      "has_cycle ? tsize : 0", (has_cycle ? tsize : 0));
    current_statement__ = 398;
    stan::math::validate_non_negative_index("cycle_t",
      "has_cycle ? num_steps : 0", (has_cycle ? num_steps : 0));
    Eigen::Matrix<local_scalar_t__,-1,-1> cycle_t =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((has_cycle ? tsize : 0),
        (has_cycle ? num_steps : 0), DUMMY_VAR__);
    current_statement__ = 399;
    stan::model::assign(cycle_t,
      stan::math::rep_matrix(0.0, (has_cycle ? tsize : 0),
        (has_cycle ? num_steps : 0)), "assigning variable cycle_t");
    current_statement__ = 400;
    stan::math::validate_non_negative_index("ctilde_t",
      "has_cycle ? tsize : 0", (has_cycle ? tsize : 0));
    current_statement__ = 401;
    stan::math::validate_non_negative_index("ctilde_t",
      "has_cycle ? num_steps : 0", (has_cycle ? num_steps : 0));
    Eigen::Matrix<local_scalar_t__,-1,-1> ctilde_t =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((has_cycle ? tsize : 0),
        (has_cycle ? num_steps : 0), DUMMY_VAR__);
    current_statement__ = 402;
    stan::model::assign(ctilde_t,
      stan::math::rep_matrix(0.0, (has_cycle ? tsize : 0),
        (has_cycle ? num_steps : 0)), "assigning variable ctilde_t");
    current_statement__ = 408;
    if (has_cycle) {
      current_statement__ = 403;
      stan::model::assign(error_cycle,
        stan::math::multiply(
          stan::model::rvalue(sd_cycle, "sd_cycle", stan::model::index_uni(1)),
          xi_cycle), "assigning variable error_cycle");
      current_statement__ = 404;
      stan::model::assign(error_ctilde,
        stan::math::multiply(
          stan::model::rvalue(sd_ctilde, "sd_ctilde",
            stan::model::index_uni(1)), xi_ctilde),
        "assigning variable error_ctilde");
      current_statement__ = 405;
      stan::model::assign(cycle_t, c_init, "assigning variable cycle_t",
        stan::model::index_omni(), stan::model::index_uni(1));
      current_statement__ = 406;
      stan::model::assign(ctilde_t, ctilde_init,
        "assigning variable ctilde_t", stan::model::index_omni(),
        stan::model::index_uni(1));
    }
    current_statement__ = 409;
    stan::model::assign(mu, mu_init, "assigning variable mu",
      stan::model::index_omni(), stan::model::index_uni(1));
    current_statement__ = 410;
    stan::model::assign(nu, nu_init, "assigning variable nu",
      stan::model::index_omni(), stan::model::index_uni(1));
    current_statement__ = 415;
    if (stan::math::logical_gt(num_delays, 1)) {
      current_statement__ = 413;
      for (int d = 1; d <= (num_delays - 1); ++d) {
        current_statement__ = 411;
        stan::model::assign(nu,
          stan::math::add(
            stan::math::add(nu_intercept,
              AR(stan::model::deep_copy(nu), phi_nu_star, (d + 1), nu_p,
                pstream__)),
            stan::model::rvalue(error_nu, "error_nu",
              stan::model::index_omni(), stan::model::index_uni(d))),
          "assigning variable nu", stan::model::index_omni(),
          stan::model::index_uni((d + 1)));
      }
    }
    current_statement__ = 438;
    if (stan::math::logical_gt(num_steps, 1)) {
      current_statement__ = 436;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 416;
        stan::model::assign(m,
          stan::math::add(
            stan::model::rvalue(mu, "mu", stan::model::index_omni(),
              stan::model::index_uni(t)), colwise_mat_2_vec(nu, pstream__)),
          "assigning variable m", stan::model::index_omni(),
          stan::model::index_uni(t));
        current_statement__ = 417;
        stan::model::assign(mu,
          stan::math::add(
            stan::math::add(
              stan::math::add(mu_intercept,
                AR(stan::model::deep_copy(mu), phi_mu_star, (t + 1), mu_p,
                  pstream__)),
              MA(error_mu, theta_mu_star, t, mu_q, pstream__)),
            stan::model::rvalue(error_mu, "error_mu",
              stan::model::index_omni(), stan::model::index_uni(t))),
          "assigning variable mu", stan::model::index_omni(),
          stan::model::index_uni((t + 1)));
        current_statement__ = 419;
        if (has_day_of_week_epi) {
          current_statement__ = 418;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::math::rep_vector(
                stan::model::rvalue(beta_dow_epi, "beta_dow_epi",
                  stan::model::index_uni(
                    stan::model::rvalue(day_of_week_epi, "day_of_week_epi",
                      stan::model::index_uni(t)))), tsize)),
            "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
        }
        current_statement__ = 421;
        if (has_weekend_epi) {
          current_statement__ = 420;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::math::rep_vector(
                stan::model::rvalue(beta_wkend_epi, "beta_wkend_epi",
                  stan::model::index_uni(
                    stan::model::rvalue(weekend_epi, "weekend_epi",
                      stan::model::index_uni(t)))), tsize)),
            "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
        }
        current_statement__ = 423;
        if (has_day_of_month_epi) {
          current_statement__ = 422;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::math::rep_vector(
                stan::model::rvalue(beta_dom_epi, "beta_dom_epi",
                  stan::model::index_uni(
                    stan::model::rvalue(day_of_month_epi, "day_of_month_epi",
                      stan::model::index_uni(t)))), tsize)),
            "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
        }
        current_statement__ = 425;
        if (has_month_of_year_epi) {
          current_statement__ = 424;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::math::rep_vector(
                stan::model::rvalue(beta_month_epi, "beta_month_epi",
                  stan::model::index_uni(
                    stan::model::rvalue(month_of_year_epi,
                      "month_of_year_epi", stan::model::index_uni(t)))),
                tsize)), "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
        }
        current_statement__ = 427;
        if (has_week_of_year_epi) {
          current_statement__ = 426;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::math::rep_vector(
                stan::model::rvalue(beta_week_epi, "beta_week_epi",
                  stan::model::index_uni(
                    stan::model::rvalue(week_of_year_epi, "week_of_year_epi",
                      stan::model::index_uni(t)))), tsize)),
            "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
        }
        current_statement__ = 429;
        if (has_holidays_epi) {
          current_statement__ = 428;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::math::rep_vector(
                stan::model::rvalue(beta_holidays_epi, "beta_holidays_epi",
                  stan::model::index_uni(
                    stan::model::rvalue(holidays_epi, "holidays_epi",
                      stan::model::index_uni(t)))), tsize)),
            "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
        }
        current_statement__ = 434;
        if (has_cycle) {
          current_statement__ = 430;
          stan::model::assign(m,
            stan::math::add(
              stan::model::deep_copy(
                stan::model::rvalue(m, "m", stan::model::index_omni(),
                  stan::model::index_uni(t))),
              stan::model::rvalue(cycle_t, "cycle_t",
                stan::model::index_omni(), stan::model::index_uni(t))),
            "assigning variable m", stan::model::index_omni(),
            stan::model::index_uni(t));
          current_statement__ = 431;
          stan::model::assign(cycle_t,
            stan::math::add(
              stan::math::add(
                stan::math::elt_multiply(
                  stan::model::deep_copy(
                    stan::model::rvalue(cycle_t, "cycle_t",
                      stan::model::index_omni(), stan::model::index_uni(t))),
                  stan::math::cos(lambda_cycle)),
                stan::math::elt_multiply(
                  stan::model::rvalue(ctilde_t, "ctilde_t",
                    stan::model::index_omni(), stan::model::index_uni(t)),
                  stan::math::sin(lambda_cycle))),
              stan::model::rvalue(error_cycle, "error_cycle",
                stan::model::index_omni(), stan::model::index_uni(t))),
            "assigning variable cycle_t", stan::model::index_omni(),
            stan::model::index_uni((t + 1)));
          current_statement__ = 432;
          stan::model::assign(ctilde_t,
            stan::math::add(
              stan::math::add(
                stan::math::elt_multiply(
                  stan::math::minus(
                    stan::model::rvalue(cycle_t, "cycle_t",
                      stan::model::index_omni(), stan::model::index_uni(t))),
                  stan::math::sin(lambda_cycle)),
                stan::math::elt_multiply(
                  stan::model::deep_copy(
                    stan::model::rvalue(ctilde_t, "ctilde_t",
                      stan::model::index_omni(), stan::model::index_uni(t))),
                  stan::math::cos(lambda_cycle))),
              stan::model::rvalue(error_ctilde, "error_ctilde",
                stan::model::index_omni(), stan::model::index_uni(t))),
            "assigning variable ctilde_t", stan::model::index_omni(),
            stan::model::index_uni((t + 1)));
        }
      }
    }
    current_statement__ = 439;
    stan::model::assign(m,
      stan::math::add(
        stan::model::rvalue(mu, "mu", stan::model::index_omni(),
          stan::model::index_uni(num_steps)),
        colwise_mat_2_vec(nu, pstream__)), "assigning variable m",
      stan::model::index_omni(), stan::model::index_uni(num_steps));
    current_statement__ = 441;
    if (has_cycle) {
      current_statement__ = 440;
      stan::model::assign(m,
        stan::math::add(
          stan::model::deep_copy(
            stan::model::rvalue(m, "m", stan::model::index_omni(),
              stan::model::index_uni(num_steps))),
          stan::model::rvalue(cycle_t, "cycle_t", stan::model::index_omni(),
            stan::model::index_uni(num_steps))), "assigning variable m",
        stan::model::index_omni(), stan::model::index_uni(num_steps));
    }
    current_statement__ = 442;
    return m;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
std::vector<stan::promote_args_t<stan::base_type_t<T2__>>>
get_val_for_model(const int& n_rows, const int& num_delays, const T2__&
                  m_arg__, const std::vector<std::vector<int>>& case_idx,
                  const int& s_col, const int& d_col, const int& t_col,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 444;
    stan::math::validate_non_negative_index("dist_val", "n_rows", n_rows);
    std::vector<local_scalar_t__> dist_val =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 447;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 446;
      stan::model::assign(dist_val,
        stan::model::rvalue(m, "m",
          stan::model::index_uni(((num_delays *
            (stan::model::rvalue(case_idx, "case_idx",
               stan::model::index_uni(n), stan::model::index_uni(s_col)) -
            1)) +
            stan::model::rvalue(case_idx, "case_idx",
              stan::model::index_uni(n), stan::model::index_uni(d_col)))),
          stan::model::index_uni(
            stan::model::rvalue(case_idx, "case_idx",
              stan::model::index_uni(n), stan::model::index_uni(t_col)))),
        "assigning variable dist_val", stan::model::index_uni(n));
    }
    current_statement__ = 448;
    return dist_val;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
log_transform(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 450;
    return stan::math::log(x);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
inv_log_transform(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 452;
    return stan::math::exp(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
log_transform(const std::vector<double>& x, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 454;
    n_rows = stan::math::num_elements(x);
    current_statement__ = 455;
    stan::math::validate_non_negative_index("y", "n_rows", n_rows);
    std::vector<local_scalar_t__> y =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 458;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 457;
      stan::model::assign(y,
        log_transform(stan::model::rvalue(x, "x", stan::model::index_uni(n)),
          pstream__), "assigning variable y", stan::model::index_uni(n));
    }
    current_statement__ = 459;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
inv_log_transform(const std::vector<double>& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 461;
    n_rows = stan::math::num_elements(y);
    current_statement__ = 462;
    stan::math::validate_non_negative_index("x", "n_rows", n_rows);
    std::vector<local_scalar_t__> x =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 465;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 464;
      stan::model::assign(x,
        inv_log_transform(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), pstream__),
        "assigning variable x", stan::model::index_uni(n));
    }
    current_statement__ = 466;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
log1p_transform(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 468;
    return log_transform((x + 1), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
inv_log1p_transform(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 470;
    return (inv_log_transform(y, pstream__) - 1.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
log1p_transform(const std::vector<double>& x, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 472;
    n_rows = stan::math::num_elements(x);
    current_statement__ = 473;
    stan::math::validate_non_negative_index("y", "n_rows", n_rows);
    std::vector<local_scalar_t__> y =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 476;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 475;
      stan::model::assign(y,
        log1p_transform(
          stan::model::rvalue(x, "x", stan::model::index_uni(n)), pstream__),
        "assigning variable y", stan::model::index_uni(n));
    }
    current_statement__ = 477;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
inv_log1p_transform(const std::vector<double>& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 479;
    n_rows = stan::math::num_elements(y);
    current_statement__ = 480;
    stan::math::validate_non_negative_index("x", "n_rows", n_rows);
    std::vector<local_scalar_t__> x =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 483;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 482;
      stan::model::assign(x,
        inv_log1p_transform(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), pstream__),
        "assigning variable x", stan::model::index_uni(n));
    }
    current_statement__ = 484;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
softplus_transform(const T0__& x, const T1__& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 486;
    return (k * stan::math::log((stan::math::exp((x / k)) - 1.0)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
inv_softplus_transform(const T0__& y, const T1__& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 488;
    return (k * stan::math::log((1.0 + stan::math::exp((y / k)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
softplus_transform(const std::vector<double>& x, const double& k,
                   std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 490;
    n_rows = stan::math::num_elements(x);
    current_statement__ = 491;
    stan::math::validate_non_negative_index("y", "n_rows", n_rows);
    std::vector<local_scalar_t__> y =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 494;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 493;
      stan::model::assign(y,
        softplus_transform(
          stan::model::rvalue(x, "x", stan::model::index_uni(n)), k,
          pstream__), "assigning variable y", stan::model::index_uni(n));
    }
    current_statement__ = 495;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
inv_softplus_transform(const std::vector<double>& y, const double& k,
                       std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 497;
    n_rows = stan::math::num_elements(y);
    current_statement__ = 498;
    stan::math::validate_non_negative_index("x", "n_rows", n_rows);
    std::vector<local_scalar_t__> x =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 501;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 500;
      stan::model::assign(x,
        inv_softplus_transform(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), k,
          pstream__), "assigning variable x", stan::model::index_uni(n));
    }
    current_statement__ = 502;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
softplus1p_transform(const T0__& x, const T1__& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 504;
    return softplus_transform((x + 1), k, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
inv_softplus1p_transform(const T0__& y, const T1__& k, std::ostream*
                         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 506;
    return (inv_softplus_transform(y, k, pstream__) - 1.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
softplus1p_transform(const std::vector<double>& x, const double& k,
                     std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 508;
    n_rows = stan::math::num_elements(x);
    current_statement__ = 509;
    stan::math::validate_non_negative_index("y", "n_rows", n_rows);
    std::vector<local_scalar_t__> y =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 512;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 511;
      stan::model::assign(y,
        softplus1p_transform(
          stan::model::rvalue(x, "x", stan::model::index_uni(n)), k,
          pstream__), "assigning variable y", stan::model::index_uni(n));
    }
    current_statement__ = 513;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
inv_softplus1p_transform(const std::vector<double>& y, const double& k,
                         std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 515;
    n_rows = stan::math::num_elements(y);
    current_statement__ = 516;
    stan::math::validate_non_negative_index("x", "n_rows", n_rows);
    std::vector<local_scalar_t__> x =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 519;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 518;
      stan::model::assign(x,
        inv_softplus1p_transform(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), k,
          pstream__), "assigning variable x", stan::model::index_uni(n));
    }
    current_statement__ = 520;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
dhyperbolic_transform(const T0__& x, const T1__& k, const T2__& c,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 522;
    return ((stan::math::pow(x, 2) - k) / (c * x));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
inv_dhyperbolic_transform(const T0__& y, const T1__& k, const T2__& c,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 524;
    return (((c * y) / 2.0) +
           stan::math::sqrt((stan::math::pow(((c * y) / 2.0), 2) + k)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
dhyperbolic_transform(const std::vector<double>& x, const double& k,
                      const double& c, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 526;
    n_rows = stan::math::num_elements(x);
    current_statement__ = 527;
    stan::math::validate_non_negative_index("y", "n_rows", n_rows);
    std::vector<local_scalar_t__> y =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 530;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 529;
      stan::model::assign(y,
        dhyperbolic_transform(
          stan::model::rvalue(x, "x", stan::model::index_uni(n)), k, c,
          pstream__), "assigning variable y", stan::model::index_uni(n));
    }
    current_statement__ = 531;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
inv_dhyperbolic_transform(const std::vector<double>& y, const double& k,
                          const double& c, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 533;
    n_rows = stan::math::num_elements(y);
    current_statement__ = 534;
    stan::math::validate_non_negative_index("x", "n_rows", n_rows);
    std::vector<local_scalar_t__> x =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 537;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 536;
      stan::model::assign(x,
        inv_dhyperbolic_transform(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), k, c,
          pstream__), "assigning variable x", stan::model::index_uni(n));
    }
    current_statement__ = 538;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
dhyperbolic1p_transform(const T0__& x, const T1__& k, const T2__& c,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 540;
    return dhyperbolic_transform((x + 1), k, c, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
inv_dhyperbolic1p_transform(const T0__& y, const T1__& k, const T2__& c,
                            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 542;
    return (inv_dhyperbolic_transform(y, k, c, pstream__) - 1.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
dhyperbolic1p_transform(const std::vector<double>& x, const double& k,
                        const double& c, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 544;
    n_rows = stan::math::num_elements(x);
    current_statement__ = 545;
    stan::math::validate_non_negative_index("y", "n_rows", n_rows);
    std::vector<local_scalar_t__> y =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 548;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 547;
      stan::model::assign(y,
        dhyperbolic1p_transform(
          stan::model::rvalue(x, "x", stan::model::index_uni(n)), k, c,
          pstream__), "assigning variable y", stan::model::index_uni(n));
    }
    current_statement__ = 549;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<double>
inv_dhyperbolic1p_transform(const std::vector<double>& y, const double& k,
                            const double& c, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n_rows = std::numeric_limits<int>::min();
    current_statement__ = 551;
    n_rows = stan::math::num_elements(y);
    current_statement__ = 552;
    stan::math::validate_non_negative_index("x", "n_rows", n_rows);
    std::vector<local_scalar_t__> x =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 555;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 554;
      stan::model::assign(x,
        inv_dhyperbolic1p_transform(
          stan::model::rvalue(y, "y", stan::model::index_uni(n)), k, c,
          pstream__), "assigning variable x", stan::model::index_uni(n));
    }
    current_statement__ = 556;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T5__, T6__>,-1,-1>
transform_state_space_model(const T0__& m_arg__, const int& identity_link,
                            const int& log_link, const int& softplus_link,
                            const int& dist_hyper_link, const T5__& k,
                            const T6__& c, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T5__, T6__>;
  int current_statement__ = 0;
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 558;
    stan::math::validate_non_negative_index("m_trans", "rows(m)",
      stan::math::rows(m));
    current_statement__ = 559;
    stan::math::validate_non_negative_index("m_trans", "cols(m)",
      stan::math::cols(m));
    Eigen::Matrix<local_scalar_t__,-1,-1> m_trans =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(stan::math::rows(m),
        stan::math::cols(m), DUMMY_VAR__);
    current_statement__ = 589;
    if (identity_link) {
      current_statement__ = 587;
      return m;
    } else {
      current_statement__ = 586;
      if (log_link) {
        current_statement__ = 583;
        for (int i = 1; i <= stan::math::rows(m); ++i) {
          current_statement__ = 581;
          for (int j = 1; j <= stan::math::cols(m); ++j) {
            current_statement__ = 579;
            stan::model::assign(m_trans,
              inv_log_transform(
                stan::model::rvalue(m, "m", stan::model::index_uni(i),
                  stan::model::index_uni(j)), pstream__),
              "assigning variable m_trans", stan::model::index_uni(i),
              stan::model::index_uni(j));
          }
        }
        current_statement__ = 584;
        return m_trans;
      } else {
        current_statement__ = 578;
        if (softplus_link) {
          current_statement__ = 575;
          for (int i = 1; i <= stan::math::rows(m); ++i) {
            current_statement__ = 573;
            for (int j = 1; j <= stan::math::cols(m); ++j) {
              current_statement__ = 571;
              stan::model::assign(m_trans,
                inv_softplus_transform(
                  stan::model::rvalue(m, "m", stan::model::index_uni(i),
                    stan::model::index_uni(j)), k, pstream__),
                "assigning variable m_trans", stan::model::index_uni(i),
                stan::model::index_uni(j));
            }
          }
          current_statement__ = 576;
          return m_trans;
        } else {
          current_statement__ = 570;
          if (dist_hyper_link) {
            current_statement__ = 567;
            for (int i = 1; i <= stan::math::rows(m); ++i) {
              current_statement__ = 565;
              for (int j = 1; j <= stan::math::cols(m); ++j) {
                current_statement__ = 563;
                stan::model::assign(m_trans,
                  inv_dhyperbolic_transform(
                    stan::model::rvalue(m, "m", stan::model::index_uni(i),
                      stan::model::index_uni(j)), k, c, pstream__),
                  "assigning variable m_trans", stan::model::index_uni(i),
                  stan::model::index_uni(j));
              }
            }
            current_statement__ = 568;
            return m_trans;
          } else {
            current_statement__ = 561;
            std::stringstream errmsg_stream__;
            stan::math::stan_print(&errmsg_stream__,
              "Invalid link @transform_state_space_model. This is an internal error of the `diseasenowcasting` package. Report to `https://github.com/RodrigoZepeda/diseasenowcasting/issues`");
            throw std::domain_error(errmsg_stream__.str());
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
count_cases(const std::vector<std::vector<int>>& case_idx, const int&
            num_strata, const int& num_delays, const int& n_rows, const int&
            d_col, const int& s_col, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 591;
    stan::math::validate_non_negative_index("n_count", "num_strata",
      num_strata);
    current_statement__ = 592;
    stan::math::validate_non_negative_index("n_count", "num_delays",
      num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> n_count =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 593;
    stan::model::assign(n_count,
      stan::math::rep_matrix(0, num_strata, num_delays),
      "assigning variable n_count");
    current_statement__ = 595;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 594;
      stan::model::assign(n_count,
        (stan::model::rvalue(n_count, "n_count",
           stan::model::index_uni(
             stan::model::rvalue(case_idx, "case_idx",
               stan::model::index_uni(n), stan::model::index_uni(s_col))),
           stan::model::index_uni(
             stan::model::rvalue(case_idx, "case_idx",
               stan::model::index_uni(n), stan::model::index_uni(d_col)))) +
        1), "assigning variable n_count",
        stan::model::index_uni(
          stan::model::rvalue(case_idx, "case_idx",
            stan::model::index_uni(n), stan::model::index_uni(s_col))),
        stan::model::index_uni(
          stan::model::rvalue(case_idx, "case_idx",
            stan::model::index_uni(n), stan::model::index_uni(d_col))));
    }
    current_statement__ = 596;
    return n_count;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
mean_cases(const std::vector<double>& cases_real,
           const std::vector<std::vector<int>>& case_idx, const int&
           num_strata, const int& num_delays, const int& n_rows, const int&
           d_col, const int& s_col, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 598;
    stan::math::validate_non_negative_index("mu", "num_strata", num_strata);
    current_statement__ = 599;
    stan::math::validate_non_negative_index("mu", "num_delays", num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 600;
    stan::model::assign(mu,
      stan::math::rep_matrix(0.0, num_strata, num_delays),
      "assigning variable mu");
    current_statement__ = 601;
    stan::math::validate_non_negative_index("n_count", "num_strata",
      num_strata);
    current_statement__ = 602;
    stan::math::validate_non_negative_index("n_count", "num_delays",
      num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> n_count =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 603;
    stan::model::assign(n_count,
      count_cases(case_idx, num_strata, num_delays, n_rows, d_col, s_col,
        pstream__), "assigning variable n_count");
    current_statement__ = 608;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 606;
      if (stan::math::logical_gt(
            stan::model::rvalue(n_count, "n_count",
              stan::model::index_uni(
                stan::model::rvalue(case_idx, "case_idx",
                  stan::model::index_uni(n), stan::model::index_uni(s_col))),
              stan::model::index_uni(
                stan::model::rvalue(case_idx, "case_idx",
                  stan::model::index_uni(n), stan::model::index_uni(d_col)))),
            0.0)) {
        current_statement__ = 604;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu",
             stan::model::index_uni(
               stan::model::rvalue(case_idx, "case_idx",
                 stan::model::index_uni(n), stan::model::index_uni(s_col))),
             stan::model::index_uni(
               stan::model::rvalue(case_idx, "case_idx",
                 stan::model::index_uni(n), stan::model::index_uni(d_col))))
          +
          (stan::model::rvalue(cases_real, "cases_real",
             stan::model::index_uni(n)) /
          stan::model::rvalue(n_count, "n_count",
            stan::model::index_uni(
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(s_col))),
            stan::model::index_uni(
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(d_col)))))),
          "assigning variable mu",
          stan::model::index_uni(
            stan::model::rvalue(case_idx, "case_idx",
              stan::model::index_uni(n), stan::model::index_uni(s_col))),
          stan::model::index_uni(
            stan::model::rvalue(case_idx, "case_idx",
              stan::model::index_uni(n), stan::model::index_uni(d_col))));
      }
    }
    current_statement__ = 609;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
sd_cases(const std::vector<double>& cases_real,
         const std::vector<std::vector<int>>& case_idx, const int&
         num_strata, const int& num_delays, const int& n_rows, const int&
         d_col, const int& s_col, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 611;
    stan::math::validate_non_negative_index("sigma", "num_strata", num_strata);
    current_statement__ = 612;
    stan::math::validate_non_negative_index("sigma", "num_delays", num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> sigma =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 613;
    stan::model::assign(sigma,
      stan::math::rep_matrix(0.0, num_strata, num_delays),
      "assigning variable sigma");
    current_statement__ = 614;
    stan::math::validate_non_negative_index("n_count", "num_strata",
      num_strata);
    current_statement__ = 615;
    stan::math::validate_non_negative_index("n_count", "num_delays",
      num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> n_count =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 616;
    stan::model::assign(n_count,
      count_cases(case_idx, num_strata, num_delays, n_rows, d_col, s_col,
        pstream__), "assigning variable n_count");
    current_statement__ = 617;
    stan::math::validate_non_negative_index("mu", "num_strata", num_strata);
    current_statement__ = 618;
    stan::math::validate_non_negative_index("mu", "num_delays", num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 619;
    stan::model::assign(mu,
      mean_cases(cases_real, case_idx, num_strata, num_delays, n_rows, d_col,
        s_col, pstream__), "assigning variable mu");
    current_statement__ = 621;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 620;
      stan::model::assign(sigma,
        (stan::model::rvalue(sigma, "sigma",
           stan::model::index_uni(
             stan::model::rvalue(case_idx, "case_idx",
               stan::model::index_uni(n), stan::model::index_uni(s_col))),
           stan::model::index_uni(
             stan::model::rvalue(case_idx, "case_idx",
               stan::model::index_uni(n), stan::model::index_uni(d_col)))) +
        stan::math::pow(
          (stan::model::rvalue(cases_real, "cases_real",
             stan::model::index_uni(n)) -
          stan::model::rvalue(mu, "mu",
            stan::model::index_uni(
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(s_col))),
            stan::model::index_uni(
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(d_col))))),
          2)), "assigning variable sigma",
        stan::model::index_uni(
          stan::model::rvalue(case_idx, "case_idx",
            stan::model::index_uni(n), stan::model::index_uni(s_col))),
        stan::model::index_uni(
          stan::model::rvalue(case_idx, "case_idx",
            stan::model::index_uni(n), stan::model::index_uni(d_col))));
    }
    current_statement__ = 630;
    for (int d = 1; d <= num_delays; ++d) {
      current_statement__ = 628;
      for (int s = 1; s <= num_strata; ++s) {
        current_statement__ = 626;
        if (stan::math::logical_gt(
              stan::model::rvalue(n_count, "n_count",
                stan::model::index_uni(s), stan::model::index_uni(d)), 0.0)) {
          current_statement__ = 624;
          stan::model::assign(sigma,
            stan::math::sqrt(
              (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(s),
                 stan::model::index_uni(d)) /
              stan::model::rvalue(n_count, "n_count",
                stan::model::index_uni(s), stan::model::index_uni(d)))),
            "assigning variable sigma", stan::model::index_uni(s),
            stan::model::index_uni(d));
        } else {
          current_statement__ = 622;
          stan::model::assign(sigma, 0.0, "assigning variable sigma",
            stan::model::index_uni(s), stan::model::index_uni(d));
        }
      }
    }
    current_statement__ = 631;
    return sigma;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T7__, typename T8__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_eigen_matrix_dynamic<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
std::vector<
  stan::promote_args_t<stan::base_type_t<T7__>, stan::base_type_t<T8__>>>
normalize_cases(const std::vector<double>& cases_real,
                const std::vector<std::vector<int>>& case_idx, const int&
                num_strata, const int& num_delays, const int& n_rows,
                const int& d_col, const int& s_col, const T7__& mu_arg__,
                const T8__& sigma_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T7__>,
                             stan::base_type_t<T8__>>;
  int current_statement__ = 0;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 633;
    stan::math::validate_non_negative_index("normalized",
      "num_elements(cases_real)", stan::math::num_elements(cases_real));
    std::vector<local_scalar_t__> normalized =
      std::vector<local_scalar_t__>(stan::math::num_elements(cases_real),
        DUMMY_VAR__);
    local_scalar_t__ mu_value = DUMMY_VAR__;
    local_scalar_t__ sigma_value = DUMMY_VAR__;
    current_statement__ = 645;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 637;
      mu_value = stan::model::rvalue(mu, "mu",
                   stan::model::index_uni(
                     stan::model::rvalue(case_idx, "case_idx",
                       stan::model::index_uni(n),
                       stan::model::index_uni(s_col))),
                   stan::model::index_uni(
                     stan::model::rvalue(case_idx, "case_idx",
                       stan::model::index_uni(n),
                       stan::model::index_uni(d_col))));
      current_statement__ = 638;
      sigma_value = stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni(
                        stan::model::rvalue(case_idx, "case_idx",
                          stan::model::index_uni(n),
                          stan::model::index_uni(s_col))),
                      stan::model::index_uni(
                        stan::model::rvalue(case_idx, "case_idx",
                          stan::model::index_uni(n),
                          stan::model::index_uni(d_col))));
      current_statement__ = 643;
      if (stan::math::logical_gt(sigma_value, 0.0)) {
        current_statement__ = 641;
        stan::model::assign(normalized,
          ((stan::model::rvalue(cases_real, "cases_real",
              stan::model::index_uni(n)) - mu_value) / sigma_value),
          "assigning variable normalized", stan::model::index_uni(n));
      } else {
        current_statement__ = 639;
        stan::model::assign(normalized,
          stan::model::rvalue(cases_real, "cases_real",
            stan::model::index_uni(n)), "assigning variable normalized",
          stan::model::index_uni(n));
      }
    }
    current_statement__ = 646;
    return normalized;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T7__, typename T8__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_eigen_matrix_dynamic<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
std::vector<
  stan::promote_args_t<stan::base_type_t<T7__>, stan::base_type_t<T8__>>>
inv_normalize_cases(const std::vector<double>& normalized,
                    const std::vector<std::vector<int>>& case_idx, const int&
                    num_strata, const int& num_delays, const int& n_rows,
                    const int& d_col, const int& s_col, const T7__& mu_arg__,
                    const T8__& sigma_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T7__>,
                             stan::base_type_t<T8__>>;
  int current_statement__ = 0;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 648;
    stan::math::validate_non_negative_index("real_cases",
      "num_elements(normalized)", stan::math::num_elements(normalized));
    std::vector<local_scalar_t__> real_cases =
      std::vector<local_scalar_t__>(stan::math::num_elements(normalized),
        DUMMY_VAR__);
    local_scalar_t__ mu_value = DUMMY_VAR__;
    local_scalar_t__ sigma_value = DUMMY_VAR__;
    current_statement__ = 660;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 652;
      mu_value = stan::model::rvalue(mu, "mu",
                   stan::model::index_uni(
                     stan::model::rvalue(case_idx, "case_idx",
                       stan::model::index_uni(n),
                       stan::model::index_uni(s_col))),
                   stan::model::index_uni(
                     stan::model::rvalue(case_idx, "case_idx",
                       stan::model::index_uni(n),
                       stan::model::index_uni(d_col))));
      current_statement__ = 653;
      sigma_value = stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni(
                        stan::model::rvalue(case_idx, "case_idx",
                          stan::model::index_uni(n),
                          stan::model::index_uni(s_col))),
                      stan::model::index_uni(
                        stan::model::rvalue(case_idx, "case_idx",
                          stan::model::index_uni(n),
                          stan::model::index_uni(d_col))));
      current_statement__ = 658;
      if (stan::math::logical_gt(sigma_value, 0.0)) {
        current_statement__ = 656;
        stan::model::assign(real_cases,
          ((stan::model::rvalue(normalized, "normalized",
              stan::model::index_uni(n)) * sigma_value) + mu_value),
          "assigning variable real_cases", stan::model::index_uni(n));
      } else {
        current_statement__ = 654;
        stan::model::assign(real_cases,
          stan::model::rvalue(normalized, "normalized",
            stan::model::index_uni(n)), "assigning variable real_cases",
          stan::model::index_uni(n));
      }
    }
    current_statement__ = 661;
    return real_cases;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_eigen_matrix_dynamic<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_eigen_matrix_dynamic<T9__>,
                              stan::is_vt_not_complex<T9__>>*>
std::vector<
  std::vector<
    stan::promote_args_t<T0__, stan::base_type_t<T8__>,
      stan::base_type_t<T9__>>>>
inv_normalize_cases_2(const std::vector<std::vector<T0__>>& normalized_mat,
                      const std::vector<std::vector<int>>& case_idx,
                      const int& num_strata, const int& num_delays,
                      const int& num_steps, const int& tsize, const int&
                      d_col, const int& s_col, const T8__& mu_arg__,
                      const T9__& sigma_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T8__>,
                             stan::base_type_t<T9__>>;
  int current_statement__ = 0;
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 663;
    stan::math::validate_non_negative_index("unnormalized_mat", "num_steps",
      num_steps);
    current_statement__ = 664;
    stan::math::validate_non_negative_index("unnormalized_mat", "tsize",
      tsize);
    std::vector<std::vector<local_scalar_t__>> unnormalized_mat =
      std::vector<std::vector<local_scalar_t__>>(num_steps,
        std::vector<local_scalar_t__>(tsize, DUMMY_VAR__));
    current_statement__ = 665;
    stan::model::assign(unnormalized_mat,
      stan::math::rep_array(0, num_steps, tsize),
      "assigning variable unnormalized_mat");
    current_statement__ = 676;
    for (int s = 1; s <= num_strata; ++s) {
      current_statement__ = 674;
      for (int d = 1; d <= num_delays; ++d) {
        current_statement__ = 672;
        for (int t = 1; t <= num_steps; ++t) {
          current_statement__ = 670;
          if (stan::math::logical_gt(
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(s), stan::model::index_uni(d)), 0.0)) {
            current_statement__ = 668;
            stan::model::assign(unnormalized_mat,
              ((stan::model::rvalue(normalized_mat, "normalized_mat",
                  stan::model::index_uni(t),
                  stan::model::index_uni(((num_delays * (s - 1)) + d))) *
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(s),
                stan::model::index_uni(d))) +
              stan::model::rvalue(mu, "mu", stan::model::index_uni(s),
                stan::model::index_uni(d))),
              "assigning variable unnormalized_mat",
              stan::model::index_uni(t),
              stan::model::index_uni(((num_delays * (s - 1)) + d)));
          } else {
            current_statement__ = 666;
            stan::model::assign(unnormalized_mat,
              stan::model::rvalue(normalized_mat, "normalized_mat",
                stan::model::index_uni(t),
                stan::model::index_uni(((num_delays * (s - 1)) + d))),
              "assigning variable unnormalized_mat",
              stan::model::index_uni(t),
              stan::model::index_uni(((num_delays * (s - 1)) + d)));
          }
        }
      }
    }
    current_statement__ = 677;
    return unnormalized_mat;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_nowcasting final : public model_base_crtp<model_nowcasting> {
private:
  int num_steps;
  int num_delays;
  int num_strata;
  int n_rows;
  std::vector<std::vector<int>> case_idx;
  std::vector<double> cases_real;
  std::vector<int> cases_int;
  int has_day_of_week_epi;
  int has_weekend_epi;
  int has_day_of_month_epi;
  int has_month_of_year_epi;
  int has_week_of_year_epi;
  int has_holidays_epi;
  std::vector<int> day_of_week_epi;
  std::vector<int> weekend_epi;
  std::vector<int> day_of_month_epi;
  std::vector<int> month_of_year_epi;
  std::vector<int> week_of_year_epi;
  std::vector<int> holidays_epi;
  int mu_p;
  int mu_q;
  int nu_p;
  double mu_intercept_param_1;
  double mu_intercept_param_2;
  double mu_0_param_1;
  double mu_0_param_2;
  double nu_intercept_param_1;
  double nu_intercept_param_2;
  double nu_0_param_1;
  double nu_0_param_2;
  double c_0_param_1;
  double c_0_param_2;
  double ctilde_0_param_1;
  double ctilde_0_param_2;
  double sd_mu_param_1;
  double sd_mu_param_2;
  double sd_nu_param_1;
  double sd_nu_param_2;
  double sd_c_param_1;
  double sd_c_param_2;
  double sd_ctilde_param_1;
  double sd_ctilde_param_2;
  double sd_m_param_1;
  double sd_m_param_2;
  double sd_dow_epi_param_1;
  double sd_dow_epi_param_2;
  double sd_wkend_epi_param_1;
  double sd_wkend_epi_param_2;
  double sd_dom_epi_param_1;
  double sd_dom_epi_param_2;
  double sd_month_epi_param_1;
  double sd_month_epi_param_2;
  double sd_week_epi_param_1;
  double sd_week_epi_param_2;
  double sd_holidays_epi_param_1;
  double sd_holidays_epi_param_2;
  double dof;
  int prior_only;
  int has_cycle;
  int dist;
  int link_x;
  int link_y;
  int normalize_data;
  double control_k_transform;
  double control_c_transform;
  int tsize;
  int t_col;
  int d_col;
  int s_col;
  int is_normal;
  int is_student;
  int is_poisson;
  int is_negbin;
  int is_continuous;
  int is_discrete;
  int identity_link_x;
  int log_link_x;
  int softplus_link_x;
  int dist_hyper_link_x;
  int identity_link_y;
  int log_link_y;
  int softplus_link_y;
  int dist_hyper_link_y;
  std::vector<double> cases_real_trans;
  std::vector<int> cases_int_trans;
  Eigen::Matrix<double,-1,-1> mu_data_data__;
  Eigen::Matrix<double,-1,-1> sigma_data_data__;
  int lambda_cycle_1dim__;
  int beta_dow_epi_param_1dim__;
  int beta_wkend_epi_param_1dim__;
  int beta_dom_epi_param_1dim__;
  int beta_month_epi_param_1dim__;
  int beta_week_epi_param_1dim__;
  int beta_holidays_epi_param_1dim__;
  int c_init_centered_1dim__;
  int ctilde_init_centered_1dim__;
  int xi_mu_2dim__;
  int xi_nu_2dim__;
  int xi_cycle_1dim__;
  int xi_cycle_2dim__;
  int xi_ctilde_1dim__;
  int xi_ctilde_2dim__;
  int sd_cycle_1dim__;
  int sd_ctilde_1dim__;
  int sd_m_1dim__;
  int sd_dow_epi_1dim__;
  int sd_wkend_epi_1dim__;
  int sd_dom_epi_1dim__;
  int sd_month_epi_1dim__;
  int sd_week_epi_1dim__;
  int sd_holidays_epi_1dim__;
  int beta_dow_epi_1dim__;
  int beta_wkend_epi_1dim__;
  int beta_dom_epi_1dim__;
  int beta_month_epi_1dim__;
  int beta_week_epi_1dim__;
  int beta_holidays_epi_1dim__;
  int c_init_1dim__;
  int ctilde_init_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mu_data{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sigma_data{nullptr, 0, 0};
public:
  ~model_nowcasting() {}
  model_nowcasting(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nowcasting_namespace::model_nowcasting";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 119;
      context__.validate_dims("data initialization", "num_steps", "int",
        std::vector<size_t>{});
      num_steps = std::numeric_limits<int>::min();
      current_statement__ = 119;
      num_steps = context__.vals_i("num_steps")[(1 - 1)];
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "num_steps", num_steps,
        1);
      current_statement__ = 120;
      context__.validate_dims("data initialization", "num_delays", "int",
        std::vector<size_t>{});
      num_delays = std::numeric_limits<int>::min();
      current_statement__ = 120;
      num_delays = context__.vals_i("num_delays")[(1 - 1)];
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "num_delays",
        num_delays, 0);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "num_strata", "int",
        std::vector<size_t>{});
      num_strata = std::numeric_limits<int>::min();
      current_statement__ = 121;
      num_strata = context__.vals_i("num_strata")[(1 - 1)];
      current_statement__ = 121;
      stan::math::check_greater_or_equal(function__, "num_strata",
        num_strata, 1);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "n_rows", "int",
        std::vector<size_t>{});
      n_rows = std::numeric_limits<int>::min();
      current_statement__ = 122;
      n_rows = context__.vals_i("n_rows")[(1 - 1)];
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "n_rows", n_rows, 1);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("case_idx", "n_rows", n_rows);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "case_idx", "int",
        std::vector<size_t>{static_cast<size_t>(n_rows),
          static_cast<size_t>(3)});
      case_idx = std::vector<std::vector<int>>(n_rows,
                   std::vector<int>(3, std::numeric_limits<int>::min()));
      {
        std::vector<int> case_idx_flat__;
        current_statement__ = 124;
        case_idx_flat__ = context__.vals_i("case_idx");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= n_rows; ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(case_idx, case_idx_flat__[(pos__ - 1)],
              "assigning variable case_idx", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      stan::math::validate_non_negative_index("cases_real", "n_rows", n_rows);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "cases_real", "double",
        std::vector<size_t>{static_cast<size_t>(n_rows)});
      cases_real = std::vector<double>(n_rows,
                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 126;
      cases_real = context__.vals_r("cases_real");
      current_statement__ = 127;
      stan::math::validate_non_negative_index("cases_int", "n_rows", n_rows);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "cases_int", "int",
        std::vector<size_t>{static_cast<size_t>(n_rows)});
      cases_int = std::vector<int>(n_rows, std::numeric_limits<int>::min());
      current_statement__ = 128;
      cases_int = context__.vals_i("cases_int");
      current_statement__ = 129;
      context__.validate_dims("data initialization", "has_day_of_week_epi",
        "int", std::vector<size_t>{});
      has_day_of_week_epi = std::numeric_limits<int>::min();
      current_statement__ = 129;
      has_day_of_week_epi = context__.vals_i("has_day_of_week_epi")[(1 - 1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "has_day_of_week_epi",
        has_day_of_week_epi, 0);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "has_day_of_week_epi",
        has_day_of_week_epi, 1);
      current_statement__ = 130;
      context__.validate_dims("data initialization", "has_weekend_epi",
        "int", std::vector<size_t>{});
      has_weekend_epi = std::numeric_limits<int>::min();
      current_statement__ = 130;
      has_weekend_epi = context__.vals_i("has_weekend_epi")[(1 - 1)];
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "has_weekend_epi",
        has_weekend_epi, 0);
      current_statement__ = 130;
      stan::math::check_less_or_equal(function__, "has_weekend_epi",
        has_weekend_epi, 1);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "has_day_of_month_epi",
        "int", std::vector<size_t>{});
      has_day_of_month_epi = std::numeric_limits<int>::min();
      current_statement__ = 131;
      has_day_of_month_epi = context__.vals_i("has_day_of_month_epi")[(1 -
        1)];
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "has_day_of_month_epi",
        has_day_of_month_epi, 0);
      current_statement__ = 131;
      stan::math::check_less_or_equal(function__, "has_day_of_month_epi",
        has_day_of_month_epi, 1);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "has_month_of_year_epi",
        "int", std::vector<size_t>{});
      has_month_of_year_epi = std::numeric_limits<int>::min();
      current_statement__ = 132;
      has_month_of_year_epi = context__.vals_i("has_month_of_year_epi")[(1 -
        1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "has_month_of_year_epi",
        has_month_of_year_epi, 0);
      current_statement__ = 132;
      stan::math::check_less_or_equal(function__, "has_month_of_year_epi",
        has_month_of_year_epi, 1);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "has_week_of_year_epi",
        "int", std::vector<size_t>{});
      has_week_of_year_epi = std::numeric_limits<int>::min();
      current_statement__ = 133;
      has_week_of_year_epi = context__.vals_i("has_week_of_year_epi")[(1 -
        1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "has_week_of_year_epi",
        has_week_of_year_epi, 0);
      current_statement__ = 133;
      stan::math::check_less_or_equal(function__, "has_week_of_year_epi",
        has_week_of_year_epi, 1);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "has_holidays_epi",
        "int", std::vector<size_t>{});
      has_holidays_epi = std::numeric_limits<int>::min();
      current_statement__ = 134;
      has_holidays_epi = context__.vals_i("has_holidays_epi")[(1 - 1)];
      current_statement__ = 134;
      stan::math::check_greater_or_equal(function__, "has_holidays_epi",
        has_holidays_epi, 0);
      current_statement__ = 134;
      stan::math::check_less_or_equal(function__, "has_holidays_epi",
        has_holidays_epi, 1);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("day_of_week_epi",
        "has_day_of_week_epi ? n_rows : 0",
        (has_day_of_week_epi ? n_rows : 0));
      current_statement__ = 136;
      context__.validate_dims("data initialization", "day_of_week_epi",
        "int",
        std::vector<size_t>{static_cast<size_t>(
                              (has_day_of_week_epi ? n_rows : 0))});
      day_of_week_epi = std::vector<int>((has_day_of_week_epi ? n_rows : 0),
                          std::numeric_limits<int>::min());
      current_statement__ = 136;
      day_of_week_epi = context__.vals_i("day_of_week_epi");
      current_statement__ = 137;
      stan::math::validate_non_negative_index("weekend_epi",
        "has_weekend_epi ? n_rows : 0", (has_weekend_epi ? n_rows : 0));
      current_statement__ = 138;
      context__.validate_dims("data initialization", "weekend_epi", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (has_weekend_epi ? n_rows : 0))});
      weekend_epi = std::vector<int>((has_weekend_epi ? n_rows : 0),
                      std::numeric_limits<int>::min());
      current_statement__ = 138;
      weekend_epi = context__.vals_i("weekend_epi");
      current_statement__ = 139;
      stan::math::validate_non_negative_index("day_of_month_epi",
        "has_day_of_month_epi ? n_rows : 0",
        (has_day_of_month_epi ? n_rows : 0));
      current_statement__ = 140;
      context__.validate_dims("data initialization", "day_of_month_epi",
        "int",
        std::vector<size_t>{static_cast<size_t>(
                              (has_day_of_month_epi ? n_rows : 0))});
      day_of_month_epi = std::vector<int>((has_day_of_month_epi ? n_rows : 0),
                           std::numeric_limits<int>::min());
      current_statement__ = 140;
      day_of_month_epi = context__.vals_i("day_of_month_epi");
      current_statement__ = 141;
      stan::math::validate_non_negative_index("month_of_year_epi",
        "has_month_of_year_epi ? n_rows : 0",
        (has_month_of_year_epi ? n_rows : 0));
      current_statement__ = 142;
      context__.validate_dims("data initialization", "month_of_year_epi",
        "int",
        std::vector<size_t>{static_cast<size_t>(
                              (has_month_of_year_epi ? n_rows : 0))});
      month_of_year_epi = std::vector<int>((has_month_of_year_epi ? n_rows : 0),
                            std::numeric_limits<int>::min());
      current_statement__ = 142;
      month_of_year_epi = context__.vals_i("month_of_year_epi");
      current_statement__ = 143;
      stan::math::validate_non_negative_index("week_of_year_epi",
        "has_week_of_year_epi ? n_rows : 0",
        (has_week_of_year_epi ? n_rows : 0));
      current_statement__ = 144;
      context__.validate_dims("data initialization", "week_of_year_epi",
        "int",
        std::vector<size_t>{static_cast<size_t>(
                              (has_week_of_year_epi ? n_rows : 0))});
      week_of_year_epi = std::vector<int>((has_week_of_year_epi ? n_rows : 0),
                           std::numeric_limits<int>::min());
      current_statement__ = 144;
      week_of_year_epi = context__.vals_i("week_of_year_epi");
      current_statement__ = 145;
      stan::math::validate_non_negative_index("holidays_epi",
        "has_holidays_epi ? n_rows : 0", (has_holidays_epi ? n_rows : 0));
      current_statement__ = 146;
      context__.validate_dims("data initialization", "holidays_epi", "int",
        std::vector<size_t>{static_cast<size_t>(
                              (has_holidays_epi ? n_rows : 0))});
      holidays_epi = std::vector<int>((has_holidays_epi ? n_rows : 0),
                       std::numeric_limits<int>::min());
      current_statement__ = 146;
      holidays_epi = context__.vals_i("holidays_epi");
      current_statement__ = 147;
      context__.validate_dims("data initialization", "mu_p", "int",
        std::vector<size_t>{});
      mu_p = std::numeric_limits<int>::min();
      current_statement__ = 147;
      mu_p = context__.vals_i("mu_p")[(1 - 1)];
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "mu_p", mu_p, 0);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "mu_q", "int",
        std::vector<size_t>{});
      mu_q = std::numeric_limits<int>::min();
      current_statement__ = 148;
      mu_q = context__.vals_i("mu_q")[(1 - 1)];
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "mu_q", mu_q, 0);
      current_statement__ = 149;
      context__.validate_dims("data initialization", "nu_p", "int",
        std::vector<size_t>{});
      nu_p = std::numeric_limits<int>::min();
      current_statement__ = 149;
      nu_p = context__.vals_i("nu_p")[(1 - 1)];
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "nu_p", nu_p, 0);
      current_statement__ = 150;
      context__.validate_dims("data initialization", "mu_intercept_param_1",
        "double", std::vector<size_t>{});
      mu_intercept_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 150;
      mu_intercept_param_1 = context__.vals_r("mu_intercept_param_1")[(1 -
        1)];
      current_statement__ = 151;
      context__.validate_dims("data initialization", "mu_intercept_param_2",
        "double", std::vector<size_t>{});
      mu_intercept_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 151;
      mu_intercept_param_2 = context__.vals_r("mu_intercept_param_2")[(1 -
        1)];
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "mu_intercept_param_2",
        mu_intercept_param_2, 0);
      current_statement__ = 152;
      context__.validate_dims("data initialization", "mu_0_param_1",
        "double", std::vector<size_t>{});
      mu_0_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 152;
      mu_0_param_1 = context__.vals_r("mu_0_param_1")[(1 - 1)];
      current_statement__ = 153;
      context__.validate_dims("data initialization", "mu_0_param_2",
        "double", std::vector<size_t>{});
      mu_0_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 153;
      mu_0_param_2 = context__.vals_r("mu_0_param_2")[(1 - 1)];
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "mu_0_param_2",
        mu_0_param_2, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization", "nu_intercept_param_1",
        "double", std::vector<size_t>{});
      nu_intercept_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 154;
      nu_intercept_param_1 = context__.vals_r("nu_intercept_param_1")[(1 -
        1)];
      current_statement__ = 155;
      context__.validate_dims("data initialization", "nu_intercept_param_2",
        "double", std::vector<size_t>{});
      nu_intercept_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 155;
      nu_intercept_param_2 = context__.vals_r("nu_intercept_param_2")[(1 -
        1)];
      current_statement__ = 155;
      stan::math::check_greater_or_equal(function__, "nu_intercept_param_2",
        nu_intercept_param_2, 0);
      current_statement__ = 156;
      context__.validate_dims("data initialization", "nu_0_param_1",
        "double", std::vector<size_t>{});
      nu_0_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 156;
      nu_0_param_1 = context__.vals_r("nu_0_param_1")[(1 - 1)];
      current_statement__ = 157;
      context__.validate_dims("data initialization", "nu_0_param_2",
        "double", std::vector<size_t>{});
      nu_0_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 157;
      nu_0_param_2 = context__.vals_r("nu_0_param_2")[(1 - 1)];
      current_statement__ = 157;
      stan::math::check_greater_or_equal(function__, "nu_0_param_2",
        nu_0_param_2, 0);
      current_statement__ = 158;
      context__.validate_dims("data initialization", "c_0_param_1", "double",
        std::vector<size_t>{});
      c_0_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 158;
      c_0_param_1 = context__.vals_r("c_0_param_1")[(1 - 1)];
      current_statement__ = 159;
      context__.validate_dims("data initialization", "c_0_param_2", "double",
        std::vector<size_t>{});
      c_0_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 159;
      c_0_param_2 = context__.vals_r("c_0_param_2")[(1 - 1)];
      current_statement__ = 159;
      stan::math::check_greater_or_equal(function__, "c_0_param_2",
        c_0_param_2, 0);
      current_statement__ = 160;
      context__.validate_dims("data initialization", "ctilde_0_param_1",
        "double", std::vector<size_t>{});
      ctilde_0_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 160;
      ctilde_0_param_1 = context__.vals_r("ctilde_0_param_1")[(1 - 1)];
      current_statement__ = 161;
      context__.validate_dims("data initialization", "ctilde_0_param_2",
        "double", std::vector<size_t>{});
      ctilde_0_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 161;
      ctilde_0_param_2 = context__.vals_r("ctilde_0_param_2")[(1 - 1)];
      current_statement__ = 161;
      stan::math::check_greater_or_equal(function__, "ctilde_0_param_2",
        ctilde_0_param_2, 0);
      current_statement__ = 162;
      context__.validate_dims("data initialization", "sd_mu_param_1",
        "double", std::vector<size_t>{});
      sd_mu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 162;
      sd_mu_param_1 = context__.vals_r("sd_mu_param_1")[(1 - 1)];
      current_statement__ = 163;
      context__.validate_dims("data initialization", "sd_mu_param_2",
        "double", std::vector<size_t>{});
      sd_mu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 163;
      sd_mu_param_2 = context__.vals_r("sd_mu_param_2")[(1 - 1)];
      current_statement__ = 163;
      stan::math::check_greater_or_equal(function__, "sd_mu_param_2",
        sd_mu_param_2, 0);
      current_statement__ = 164;
      context__.validate_dims("data initialization", "sd_nu_param_1",
        "double", std::vector<size_t>{});
      sd_nu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 164;
      sd_nu_param_1 = context__.vals_r("sd_nu_param_1")[(1 - 1)];
      current_statement__ = 165;
      context__.validate_dims("data initialization", "sd_nu_param_2",
        "double", std::vector<size_t>{});
      sd_nu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 165;
      sd_nu_param_2 = context__.vals_r("sd_nu_param_2")[(1 - 1)];
      current_statement__ = 165;
      stan::math::check_greater_or_equal(function__, "sd_nu_param_2",
        sd_nu_param_2, 0);
      current_statement__ = 166;
      context__.validate_dims("data initialization", "sd_c_param_1",
        "double", std::vector<size_t>{});
      sd_c_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 166;
      sd_c_param_1 = context__.vals_r("sd_c_param_1")[(1 - 1)];
      current_statement__ = 167;
      context__.validate_dims("data initialization", "sd_c_param_2",
        "double", std::vector<size_t>{});
      sd_c_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 167;
      sd_c_param_2 = context__.vals_r("sd_c_param_2")[(1 - 1)];
      current_statement__ = 167;
      stan::math::check_greater_or_equal(function__, "sd_c_param_2",
        sd_c_param_2, 0);
      current_statement__ = 168;
      context__.validate_dims("data initialization", "sd_ctilde_param_1",
        "double", std::vector<size_t>{});
      sd_ctilde_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 168;
      sd_ctilde_param_1 = context__.vals_r("sd_ctilde_param_1")[(1 - 1)];
      current_statement__ = 169;
      context__.validate_dims("data initialization", "sd_ctilde_param_2",
        "double", std::vector<size_t>{});
      sd_ctilde_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 169;
      sd_ctilde_param_2 = context__.vals_r("sd_ctilde_param_2")[(1 - 1)];
      current_statement__ = 169;
      stan::math::check_greater_or_equal(function__, "sd_ctilde_param_2",
        sd_ctilde_param_2, 0);
      current_statement__ = 170;
      context__.validate_dims("data initialization", "sd_m_param_1",
        "double", std::vector<size_t>{});
      sd_m_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 170;
      sd_m_param_1 = context__.vals_r("sd_m_param_1")[(1 - 1)];
      current_statement__ = 171;
      context__.validate_dims("data initialization", "sd_m_param_2",
        "double", std::vector<size_t>{});
      sd_m_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 171;
      sd_m_param_2 = context__.vals_r("sd_m_param_2")[(1 - 1)];
      current_statement__ = 171;
      stan::math::check_greater_or_equal(function__, "sd_m_param_2",
        sd_m_param_2, 0);
      current_statement__ = 172;
      context__.validate_dims("data initialization", "sd_dow_epi_param_1",
        "double", std::vector<size_t>{});
      sd_dow_epi_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 172;
      sd_dow_epi_param_1 = context__.vals_r("sd_dow_epi_param_1")[(1 - 1)];
      current_statement__ = 173;
      context__.validate_dims("data initialization", "sd_dow_epi_param_2",
        "double", std::vector<size_t>{});
      sd_dow_epi_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 173;
      sd_dow_epi_param_2 = context__.vals_r("sd_dow_epi_param_2")[(1 - 1)];
      current_statement__ = 173;
      stan::math::check_greater_or_equal(function__, "sd_dow_epi_param_2",
        sd_dow_epi_param_2, 0);
      current_statement__ = 174;
      context__.validate_dims("data initialization", "sd_wkend_epi_param_1",
        "double", std::vector<size_t>{});
      sd_wkend_epi_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 174;
      sd_wkend_epi_param_1 = context__.vals_r("sd_wkend_epi_param_1")[(1 -
        1)];
      current_statement__ = 175;
      context__.validate_dims("data initialization", "sd_wkend_epi_param_2",
        "double", std::vector<size_t>{});
      sd_wkend_epi_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 175;
      sd_wkend_epi_param_2 = context__.vals_r("sd_wkend_epi_param_2")[(1 -
        1)];
      current_statement__ = 175;
      stan::math::check_greater_or_equal(function__, "sd_wkend_epi_param_2",
        sd_wkend_epi_param_2, 0);
      current_statement__ = 176;
      context__.validate_dims("data initialization", "sd_dom_epi_param_1",
        "double", std::vector<size_t>{});
      sd_dom_epi_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 176;
      sd_dom_epi_param_1 = context__.vals_r("sd_dom_epi_param_1")[(1 - 1)];
      current_statement__ = 177;
      context__.validate_dims("data initialization", "sd_dom_epi_param_2",
        "double", std::vector<size_t>{});
      sd_dom_epi_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 177;
      sd_dom_epi_param_2 = context__.vals_r("sd_dom_epi_param_2")[(1 - 1)];
      current_statement__ = 177;
      stan::math::check_greater_or_equal(function__, "sd_dom_epi_param_2",
        sd_dom_epi_param_2, 0);
      current_statement__ = 178;
      context__.validate_dims("data initialization", "sd_month_epi_param_1",
        "double", std::vector<size_t>{});
      sd_month_epi_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 178;
      sd_month_epi_param_1 = context__.vals_r("sd_month_epi_param_1")[(1 -
        1)];
      current_statement__ = 179;
      context__.validate_dims("data initialization", "sd_month_epi_param_2",
        "double", std::vector<size_t>{});
      sd_month_epi_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 179;
      sd_month_epi_param_2 = context__.vals_r("sd_month_epi_param_2")[(1 -
        1)];
      current_statement__ = 179;
      stan::math::check_greater_or_equal(function__, "sd_month_epi_param_2",
        sd_month_epi_param_2, 0);
      current_statement__ = 180;
      context__.validate_dims("data initialization", "sd_week_epi_param_1",
        "double", std::vector<size_t>{});
      sd_week_epi_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 180;
      sd_week_epi_param_1 = context__.vals_r("sd_week_epi_param_1")[(1 - 1)];
      current_statement__ = 181;
      context__.validate_dims("data initialization", "sd_week_epi_param_2",
        "double", std::vector<size_t>{});
      sd_week_epi_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 181;
      sd_week_epi_param_2 = context__.vals_r("sd_week_epi_param_2")[(1 - 1)];
      current_statement__ = 181;
      stan::math::check_greater_or_equal(function__, "sd_week_epi_param_2",
        sd_week_epi_param_2, 0);
      current_statement__ = 182;
      context__.validate_dims("data initialization",
        "sd_holidays_epi_param_1", "double", std::vector<size_t>{});
      sd_holidays_epi_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 182;
      sd_holidays_epi_param_1 = context__.vals_r("sd_holidays_epi_param_1")[(1
        - 1)];
      current_statement__ = 183;
      context__.validate_dims("data initialization",
        "sd_holidays_epi_param_2", "double", std::vector<size_t>{});
      sd_holidays_epi_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 183;
      sd_holidays_epi_param_2 = context__.vals_r("sd_holidays_epi_param_2")[(1
        - 1)];
      current_statement__ = 183;
      stan::math::check_greater_or_equal(function__,
        "sd_holidays_epi_param_2", sd_holidays_epi_param_2, 0);
      current_statement__ = 184;
      context__.validate_dims("data initialization", "dof", "double",
        std::vector<size_t>{});
      dof = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 184;
      dof = context__.vals_r("dof")[(1 - 1)];
      current_statement__ = 184;
      stan::math::check_greater_or_equal(function__, "dof", dof, 0);
      current_statement__ = 185;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 185;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 185;
      stan::math::check_greater_or_equal(function__, "prior_only",
        prior_only, 0);
      current_statement__ = 185;
      stan::math::check_less_or_equal(function__, "prior_only", prior_only, 1);
      current_statement__ = 186;
      context__.validate_dims("data initialization", "has_cycle", "int",
        std::vector<size_t>{});
      has_cycle = std::numeric_limits<int>::min();
      current_statement__ = 186;
      has_cycle = context__.vals_i("has_cycle")[(1 - 1)];
      current_statement__ = 186;
      stan::math::check_greater_or_equal(function__, "has_cycle", has_cycle,
        0);
      current_statement__ = 186;
      stan::math::check_less_or_equal(function__, "has_cycle", has_cycle, 1);
      current_statement__ = 187;
      context__.validate_dims("data initialization", "dist", "int",
        std::vector<size_t>{});
      dist = std::numeric_limits<int>::min();
      current_statement__ = 187;
      dist = context__.vals_i("dist")[(1 - 1)];
      current_statement__ = 187;
      stan::math::check_greater_or_equal(function__, "dist", dist, 0);
      current_statement__ = 187;
      stan::math::check_less_or_equal(function__, "dist", dist, 3);
      current_statement__ = 188;
      context__.validate_dims("data initialization", "link_x", "int",
        std::vector<size_t>{});
      link_x = std::numeric_limits<int>::min();
      current_statement__ = 188;
      link_x = context__.vals_i("link_x")[(1 - 1)];
      current_statement__ = 188;
      stan::math::check_greater_or_equal(function__, "link_x", link_x, 0);
      current_statement__ = 188;
      stan::math::check_less_or_equal(function__, "link_x", link_x, 3);
      current_statement__ = 189;
      context__.validate_dims("data initialization", "link_y", "int",
        std::vector<size_t>{});
      link_y = std::numeric_limits<int>::min();
      current_statement__ = 189;
      link_y = context__.vals_i("link_y")[(1 - 1)];
      current_statement__ = 189;
      stan::math::check_greater_or_equal(function__, "link_y", link_y, 0);
      current_statement__ = 189;
      stan::math::check_less_or_equal(function__, "link_y", link_y, 3);
      current_statement__ = 190;
      context__.validate_dims("data initialization", "normalize_data", "int",
        std::vector<size_t>{});
      normalize_data = std::numeric_limits<int>::min();
      current_statement__ = 190;
      normalize_data = context__.vals_i("normalize_data")[(1 - 1)];
      current_statement__ = 190;
      stan::math::check_greater_or_equal(function__, "normalize_data",
        normalize_data, 0);
      current_statement__ = 190;
      stan::math::check_less_or_equal(function__, "normalize_data",
        normalize_data, 1);
      current_statement__ = 191;
      context__.validate_dims("data initialization", "control_k_transform",
        "double", std::vector<size_t>{});
      control_k_transform = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 191;
      control_k_transform = context__.vals_r("control_k_transform")[(1 - 1)];
      current_statement__ = 191;
      stan::math::check_greater_or_equal(function__, "control_k_transform",
        control_k_transform, 0);
      current_statement__ = 192;
      context__.validate_dims("data initialization", "control_c_transform",
        "double", std::vector<size_t>{});
      control_c_transform = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 192;
      control_c_transform = context__.vals_r("control_c_transform")[(1 - 1)];
      current_statement__ = 192;
      stan::math::check_greater_or_equal(function__, "control_c_transform",
        control_c_transform, 0);
      current_statement__ = 193;
      tsize = std::numeric_limits<int>::min();
      current_statement__ = 193;
      tsize = (num_delays * num_strata);
      current_statement__ = 194;
      t_col = std::numeric_limits<int>::min();
      current_statement__ = 194;
      t_col = 1;
      current_statement__ = 195;
      d_col = std::numeric_limits<int>::min();
      current_statement__ = 195;
      d_col = 2;
      current_statement__ = 196;
      s_col = std::numeric_limits<int>::min();
      current_statement__ = 196;
      s_col = 3;
      current_statement__ = 197;
      is_normal = std::numeric_limits<int>::min();
      current_statement__ = 197;
      is_normal = (stan::math::logical_eq(dist, 0) ? 1 : 0);
      current_statement__ = 198;
      is_student = std::numeric_limits<int>::min();
      current_statement__ = 198;
      is_student = (stan::math::logical_eq(dist, 1) ? 1 : 0);
      current_statement__ = 199;
      is_poisson = std::numeric_limits<int>::min();
      current_statement__ = 199;
      is_poisson = (stan::math::logical_eq(dist, 2) ? 1 : 0);
      current_statement__ = 200;
      is_negbin = std::numeric_limits<int>::min();
      current_statement__ = 200;
      is_negbin = (stan::math::logical_eq(dist, 3) ? 1 : 0);
      current_statement__ = 201;
      is_continuous = std::numeric_limits<int>::min();
      current_statement__ = 201;
      is_continuous = (is_normal + is_student);
      current_statement__ = 202;
      is_discrete = std::numeric_limits<int>::min();
      current_statement__ = 202;
      is_discrete = (is_poisson + is_negbin);
      current_statement__ = 203;
      identity_link_x = std::numeric_limits<int>::min();
      current_statement__ = 203;
      identity_link_x = (stan::math::logical_eq(link_x, 0) ? 1 : 0);
      current_statement__ = 204;
      log_link_x = std::numeric_limits<int>::min();
      current_statement__ = 204;
      log_link_x = (stan::math::logical_eq(link_x, 1) ? 1 : 0);
      current_statement__ = 205;
      softplus_link_x = std::numeric_limits<int>::min();
      current_statement__ = 205;
      softplus_link_x = (stan::math::logical_eq(link_x, 2) ? 1 : 0);
      current_statement__ = 206;
      dist_hyper_link_x = std::numeric_limits<int>::min();
      current_statement__ = 206;
      dist_hyper_link_x = (stan::math::logical_eq(link_x, 3) ? 1 : 0);
      current_statement__ = 207;
      identity_link_y = std::numeric_limits<int>::min();
      current_statement__ = 207;
      identity_link_y = (stan::math::logical_eq(link_y, 0) ? 1 : 0);
      current_statement__ = 208;
      log_link_y = std::numeric_limits<int>::min();
      current_statement__ = 208;
      log_link_y = (stan::math::logical_eq(link_y, 1) ? 1 : 0);
      current_statement__ = 209;
      softplus_link_y = std::numeric_limits<int>::min();
      current_statement__ = 209;
      softplus_link_y = (stan::math::logical_eq(link_y, 2) ? 1 : 0);
      current_statement__ = 210;
      dist_hyper_link_y = std::numeric_limits<int>::min();
      current_statement__ = 210;
      dist_hyper_link_y = (stan::math::logical_eq(link_y, 3) ? 1 : 0);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("cases_real_trans", "n_rows",
        n_rows);
      current_statement__ = 212;
      cases_real_trans = std::vector<double>(n_rows,
                           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 213;
      stan::math::validate_non_negative_index("cases_int_trans", "n_rows",
        n_rows);
      current_statement__ = 214;
      cases_int_trans = std::vector<int>(n_rows,
                          std::numeric_limits<int>::min());
      current_statement__ = 229;
      if (identity_link_y) {
        current_statement__ = 226;
        stan::model::assign(cases_real_trans, cases_real,
          "assigning variable cases_real_trans");
        current_statement__ = 227;
        stan::model::assign(cases_int_trans, cases_int,
          "assigning variable cases_int_trans");
      } else {
        current_statement__ = 225;
        if ((stan::math::primitive_value(log_link_y) &&
            stan::math::primitive_value(is_continuous))) {
          current_statement__ = 223;
          stan::model::assign(cases_real_trans,
            log1p_transform(cases_real, pstream__),
            "assigning variable cases_real_trans");
        } else {
          current_statement__ = 222;
          if ((stan::math::primitive_value(softplus_link_y) &&
              stan::math::primitive_value(is_continuous))) {
            current_statement__ = 220;
            stan::model::assign(cases_real_trans,
              softplus1p_transform(cases_real, control_k_transform, pstream__),
              "assigning variable cases_real_trans");
          } else {
            current_statement__ = 219;
            if ((stan::math::primitive_value(dist_hyper_link_y) &&
                stan::math::primitive_value(is_continuous))) {
              current_statement__ = 217;
              stan::model::assign(cases_real_trans,
                dhyperbolic1p_transform(cases_real, control_k_transform,
                  control_c_transform, pstream__),
                "assigning variable cases_real_trans");
            } else {
              current_statement__ = 215;
              std::stringstream errmsg_stream__;
              stan::math::stan_print(&errmsg_stream__,
                "Cannot transform non-continuous data with other link than `identity`. Did you mean to set `identity_link_x`? This is an internal error of the `diseasenowcasting` package @transformed_data.stan. Report to `https://github.com/RodrigoZepeda/diseasenowcasting/issues`");
              throw std::domain_error(errmsg_stream__.str());
            }
          }
        }
      }
      current_statement__ = 230;
      stan::math::validate_non_negative_index("mu_data", "num_strata",
        num_strata);
      current_statement__ = 231;
      stan::math::validate_non_negative_index("mu_data", "num_delays",
        num_delays);
      current_statement__ = 232;
      mu_data_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_strata,
                         num_delays,
                         std::numeric_limits<double>::quiet_NaN());
      new (&mu_data)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mu_data_data__.data(),
        num_strata, num_delays);
      current_statement__ = 233;
      stan::math::validate_non_negative_index("sigma_data", "num_strata",
        num_strata);
      current_statement__ = 234;
      stan::math::validate_non_negative_index("sigma_data", "num_delays",
        num_delays);
      current_statement__ = 235;
      sigma_data_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_strata,
                            num_delays,
                            std::numeric_limits<double>::quiet_NaN());
      new (&sigma_data)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sigma_data_data__.data(),
        num_strata, num_delays);
      current_statement__ = 243;
      if ((stan::math::primitive_value(normalize_data) &&
          stan::math::primitive_value(is_continuous))) {
        current_statement__ = 239;
        stan::model::assign(mu_data,
          mean_cases(cases_real_trans, case_idx, num_strata, num_delays,
            n_rows, d_col, s_col, pstream__), "assigning variable mu_data");
        current_statement__ = 240;
        stan::model::assign(sigma_data,
          sd_cases(cases_real_trans, case_idx, num_strata, num_delays,
            n_rows, d_col, s_col, pstream__), "assigning variable sigma_data");
        current_statement__ = 241;
        stan::model::assign(cases_real_trans,
          normalize_cases(stan::model::deep_copy(cases_real_trans), case_idx,
            num_strata, num_delays, n_rows, d_col, s_col, mu_data,
            sigma_data, pstream__), "assigning variable cases_real_trans");
      } else {
        current_statement__ = 238;
        if ((stan::math::primitive_value(normalize_data) &&
            stan::math::primitive_value(
              stan::math::logical_negation(is_continuous)))) {
          current_statement__ = 236;
          std::stringstream errmsg_stream__;
          stan::math::stan_print(&errmsg_stream__,
            "Cannot normalize non-continuous data. This is an internal error of the `diseasenowcasting` package @transformed_data.stan. Report to `https://github.com/RodrigoZepeda/diseasenowcasting/issues`");
          throw std::domain_error(errmsg_stream__.str());
        }
      }
      current_statement__ = 244;
      stan::math::validate_non_negative_index("mu_intercept_centered",
        "tsize", tsize);
      current_statement__ = 245;
      stan::math::validate_non_negative_index("phi_mu", "mu_p", mu_p);
      current_statement__ = 246;
      stan::math::validate_non_negative_index("theta_mu", "mu_q", mu_q);
      current_statement__ = 247;
      stan::math::validate_non_negative_index("nu_intercept_centered",
        "num_strata", num_strata);
      current_statement__ = 248;
      stan::math::validate_non_negative_index("phi_nu", "nu_p", nu_p);
      current_statement__ = 249;
      lambda_cycle_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 249;
      lambda_cycle_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 249;
      stan::math::validate_non_negative_index("lambda_cycle",
        "has_cycle ? tsize : 0", lambda_cycle_1dim__);
      current_statement__ = 250;
      beta_dow_epi_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 250;
      beta_dow_epi_param_1dim__ = (has_day_of_week_epi ? 6 : 0);
      current_statement__ = 250;
      stan::math::validate_non_negative_index("beta_dow_epi_param",
        "has_day_of_week_epi ? 6 : 0", beta_dow_epi_param_1dim__);
      current_statement__ = 251;
      beta_wkend_epi_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 251;
      beta_wkend_epi_param_1dim__ = (has_weekend_epi ? 1 : 0);
      current_statement__ = 251;
      stan::math::validate_non_negative_index("beta_wkend_epi_param",
        "has_weekend_epi ? 1 : 0", beta_wkend_epi_param_1dim__);
      current_statement__ = 252;
      beta_dom_epi_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 252;
      beta_dom_epi_param_1dim__ = (has_day_of_month_epi ? 30 : 0);
      current_statement__ = 252;
      stan::math::validate_non_negative_index("beta_dom_epi_param",
        "has_day_of_month_epi ? 30 : 0", beta_dom_epi_param_1dim__);
      current_statement__ = 253;
      beta_month_epi_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 253;
      beta_month_epi_param_1dim__ = (has_month_of_year_epi ? 11 : 0);
      current_statement__ = 253;
      stan::math::validate_non_negative_index("beta_month_epi_param",
        "has_month_of_year_epi ? 11 : 0", beta_month_epi_param_1dim__);
      current_statement__ = 254;
      beta_week_epi_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 254;
      beta_week_epi_param_1dim__ = (has_week_of_year_epi ? 51 : 0);
      current_statement__ = 254;
      stan::math::validate_non_negative_index("beta_week_epi_param",
        "has_week_of_year_epi ? 51 : 0", beta_week_epi_param_1dim__);
      current_statement__ = 255;
      beta_holidays_epi_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 255;
      beta_holidays_epi_param_1dim__ = (has_holidays_epi ? 1 : 0);
      current_statement__ = 255;
      stan::math::validate_non_negative_index("beta_holidays_epi_param",
        "has_holidays_epi ? 1 : 0", beta_holidays_epi_param_1dim__);
      current_statement__ = 256;
      stan::math::validate_non_negative_index("mu_init_centered", "tsize",
        tsize);
      current_statement__ = 257;
      stan::math::validate_non_negative_index("nu_init_centered",
        "num_strata", num_strata);
      current_statement__ = 258;
      c_init_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 258;
      c_init_centered_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 258;
      stan::math::validate_non_negative_index("c_init_centered",
        "has_cycle ? tsize : 0", c_init_centered_1dim__);
      current_statement__ = 259;
      ctilde_init_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 259;
      ctilde_init_centered_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 259;
      stan::math::validate_non_negative_index("ctilde_init_centered",
        "has_cycle ? tsize : 0", ctilde_init_centered_1dim__);
      current_statement__ = 260;
      stan::math::validate_non_negative_index("xi_mu", "tsize", tsize);
      current_statement__ = 261;
      xi_mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 261;
      xi_mu_2dim__ = (num_steps - 1);
      current_statement__ = 261;
      stan::math::validate_non_negative_index("xi_mu", "num_steps - 1",
        xi_mu_2dim__);
      current_statement__ = 262;
      stan::math::validate_non_negative_index("xi_nu", "num_strata",
        num_strata);
      current_statement__ = 263;
      xi_nu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 263;
      xi_nu_2dim__ = (num_delays - 1);
      current_statement__ = 263;
      stan::math::validate_non_negative_index("xi_nu", "num_delays - 1",
        xi_nu_2dim__);
      current_statement__ = 264;
      xi_cycle_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 264;
      xi_cycle_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 264;
      stan::math::validate_non_negative_index("xi_cycle",
        "has_cycle ? tsize : 0", xi_cycle_1dim__);
      current_statement__ = 265;
      xi_cycle_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 265;
      xi_cycle_2dim__ = (num_steps - 1);
      current_statement__ = 265;
      stan::math::validate_non_negative_index("xi_cycle", "num_steps - 1",
        xi_cycle_2dim__);
      current_statement__ = 266;
      xi_ctilde_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 266;
      xi_ctilde_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 266;
      stan::math::validate_non_negative_index("xi_ctilde",
        "has_cycle ? tsize : 0", xi_ctilde_1dim__);
      current_statement__ = 267;
      xi_ctilde_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 267;
      xi_ctilde_2dim__ = (num_steps - 1);
      current_statement__ = 267;
      stan::math::validate_non_negative_index("xi_ctilde", "num_steps - 1",
        xi_ctilde_2dim__);
      current_statement__ = 268;
      sd_cycle_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 268;
      sd_cycle_1dim__ = (has_cycle ? 1 : 0);
      current_statement__ = 268;
      stan::math::validate_non_negative_index("sd_cycle",
        "has_cycle ? 1 : 0", sd_cycle_1dim__);
      current_statement__ = 269;
      sd_ctilde_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 269;
      sd_ctilde_1dim__ = (has_cycle ? 1 : 0);
      current_statement__ = 269;
      stan::math::validate_non_negative_index("sd_ctilde",
        "has_cycle ? 1 : 0", sd_ctilde_1dim__);
      current_statement__ = 270;
      sd_m_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 270;
      sd_m_1dim__ = (is_poisson ? 0 : 1);
      current_statement__ = 270;
      stan::math::validate_non_negative_index("sd_m", "is_poisson ? 0 : 1",
        sd_m_1dim__);
      current_statement__ = 271;
      sd_dow_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 271;
      sd_dow_epi_1dim__ = (has_day_of_week_epi ? 1 : 0);
      current_statement__ = 271;
      stan::math::validate_non_negative_index("sd_dow_epi",
        "has_day_of_week_epi ? 1 : 0", sd_dow_epi_1dim__);
      current_statement__ = 272;
      sd_wkend_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 272;
      sd_wkend_epi_1dim__ = (has_weekend_epi ? 1 : 0);
      current_statement__ = 272;
      stan::math::validate_non_negative_index("sd_wkend_epi",
        "has_weekend_epi ? 1 : 0", sd_wkend_epi_1dim__);
      current_statement__ = 273;
      sd_dom_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 273;
      sd_dom_epi_1dim__ = (has_day_of_month_epi ? 1 : 0);
      current_statement__ = 273;
      stan::math::validate_non_negative_index("sd_dom_epi",
        "has_day_of_month_epi ? 1 : 0", sd_dom_epi_1dim__);
      current_statement__ = 274;
      sd_month_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 274;
      sd_month_epi_1dim__ = (has_month_of_year_epi ? 1 : 0);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("sd_month_epi",
        "has_month_of_year_epi ? 1 : 0", sd_month_epi_1dim__);
      current_statement__ = 275;
      sd_week_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 275;
      sd_week_epi_1dim__ = (has_week_of_year_epi ? 1 : 0);
      current_statement__ = 275;
      stan::math::validate_non_negative_index("sd_week_epi",
        "has_week_of_year_epi ? 1 : 0", sd_week_epi_1dim__);
      current_statement__ = 276;
      sd_holidays_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 276;
      sd_holidays_epi_1dim__ = (has_holidays_epi ? 1 : 0);
      current_statement__ = 276;
      stan::math::validate_non_negative_index("sd_holidays_epi",
        "has_holidays_epi ? 1 : 0", sd_holidays_epi_1dim__);
      current_statement__ = 277;
      stan::math::validate_non_negative_index("mu_intercept", "tsize", tsize);
      current_statement__ = 278;
      stan::math::validate_non_negative_index("nu_intercept", "num_strata",
        num_strata);
      current_statement__ = 279;
      stan::math::validate_non_negative_index("mu_init", "tsize", tsize);
      current_statement__ = 280;
      stan::math::validate_non_negative_index("nu_init", "num_strata",
        num_strata);
      current_statement__ = 281;
      beta_dow_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 281;
      beta_dow_epi_1dim__ = (has_day_of_week_epi ? 7 : 0);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("beta_dow_epi",
        "has_day_of_week_epi ? 7 : 0", beta_dow_epi_1dim__);
      current_statement__ = 282;
      beta_wkend_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 282;
      beta_wkend_epi_1dim__ = (has_weekend_epi ? 1 : 0);
      current_statement__ = 282;
      stan::math::validate_non_negative_index("beta_wkend_epi",
        "has_weekend_epi ? 1 : 0", beta_wkend_epi_1dim__);
      current_statement__ = 283;
      beta_dom_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 283;
      beta_dom_epi_1dim__ = (has_day_of_month_epi ? 31 : 0);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("beta_dom_epi",
        "has_day_of_month_epi ? 31 : 0", beta_dom_epi_1dim__);
      current_statement__ = 284;
      beta_month_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 284;
      beta_month_epi_1dim__ = (has_month_of_year_epi ? 12 : 0);
      current_statement__ = 284;
      stan::math::validate_non_negative_index("beta_month_epi",
        "has_month_of_year_epi ? 12 : 0", beta_month_epi_1dim__);
      current_statement__ = 285;
      beta_week_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 285;
      beta_week_epi_1dim__ = (has_week_of_year_epi ? 53 : 0);
      current_statement__ = 285;
      stan::math::validate_non_negative_index("beta_week_epi",
        "has_week_of_year_epi ? 53 : 0", beta_week_epi_1dim__);
      current_statement__ = 286;
      beta_holidays_epi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 286;
      beta_holidays_epi_1dim__ = (has_holidays_epi ? 1 : 0);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("beta_holidays_epi",
        "has_holidays_epi ? 1 : 0", beta_holidays_epi_1dim__);
      current_statement__ = 287;
      c_init_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 287;
      c_init_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 287;
      stan::math::validate_non_negative_index("c_init",
        "has_cycle ? tsize : 0", c_init_1dim__);
      current_statement__ = 288;
      ctilde_init_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 288;
      ctilde_init_1dim__ = (has_cycle ? tsize : 0);
      current_statement__ = 288;
      stan::math::validate_non_negative_index("ctilde_init",
        "has_cycle ? tsize : 0", ctilde_init_1dim__);
      current_statement__ = 289;
      stan::math::validate_non_negative_index("m", "tsize", tsize);
      current_statement__ = 290;
      stan::math::validate_non_negative_index("m", "num_steps", num_steps);
      current_statement__ = 291;
      stan::math::validate_non_negative_index("m_trans", "tsize", tsize);
      current_statement__ = 292;
      stan::math::validate_non_negative_index("m_trans", "num_steps",
        num_steps);
      current_statement__ = 293;
      stan::math::validate_non_negative_index("dist_val", "n_rows", n_rows);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = tsize + mu_p + mu_q + num_strata + nu_p +
      lambda_cycle_1dim__ + beta_dow_epi_param_1dim__ +
      beta_wkend_epi_param_1dim__ + beta_dom_epi_param_1dim__ +
      beta_month_epi_param_1dim__ + beta_week_epi_param_1dim__ +
      beta_holidays_epi_param_1dim__ + tsize + num_strata +
      c_init_centered_1dim__ + ctilde_init_centered_1dim__ + (tsize *
      xi_mu_2dim__) + (num_strata * xi_nu_2dim__) + (xi_cycle_1dim__ *
      xi_cycle_2dim__) + (xi_ctilde_1dim__ * xi_ctilde_2dim__) + 1 + 1 +
      sd_cycle_1dim__ + sd_ctilde_1dim__ + sd_m_1dim__ + sd_dow_epi_1dim__ +
      sd_wkend_epi_1dim__ + sd_dom_epi_1dim__ + sd_month_epi_1dim__ +
      sd_week_epi_1dim__ + sd_holidays_epi_1dim__;
  }
  inline std::string model_name() const final {
    return "model_nowcasting";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcasting_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 1;
      mu_intercept_centered = in__.template read<
                                Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_p, DUMMY_VAR__);
      current_statement__ = 2;
      phi_mu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, mu_p);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_q, DUMMY_VAR__);
      current_statement__ = 3;
      theta_mu = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                   lp__, mu_q);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 4;
      nu_intercept_centered = in__.template read<
                                Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nu_p, DUMMY_VAR__);
      current_statement__ = 5;
      phi_nu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, nu_p);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_cycle =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_cycle_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      lambda_cycle = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_cycle_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dow_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dow_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 7;
      beta_dow_epi_param = in__.template read<
                             Eigen::Matrix<local_scalar_t__,-1,1>>(beta_dow_epi_param_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_wkend_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_wkend_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      beta_wkend_epi_param = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_wkend_epi_param_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dom_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dom_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 9;
      beta_dom_epi_param = in__.template read<
                             Eigen::Matrix<local_scalar_t__,-1,1>>(beta_dom_epi_param_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_month_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_month_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      beta_month_epi_param = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_month_epi_param_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_week_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_week_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      beta_week_epi_param = in__.template read<
                              Eigen::Matrix<local_scalar_t__,-1,1>>(beta_week_epi_param_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_holidays_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_holidays_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 12;
      beta_holidays_epi_param = in__.template read<
                                  Eigen::Matrix<local_scalar_t__,-1,1>>(beta_holidays_epi_param_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 13;
      mu_init_centered = in__.template read<
                           Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 14;
      nu_init_centered = in__.template read<
                           Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<local_scalar_t__,-1,1> c_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_init_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 15;
      c_init_centered = in__.template read<
                          Eigen::Matrix<local_scalar_t__,-1,1>>(c_init_centered_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> ctilde_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ctilde_init_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 16;
      ctilde_init_centered = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(ctilde_init_centered_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, xi_mu_2dim__,
          DUMMY_VAR__);
      current_statement__ = 17;
      xi_mu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(tsize, xi_mu_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata,
          xi_nu_2dim__, DUMMY_VAR__);
      current_statement__ = 18;
      xi_nu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(num_strata,
                xi_nu_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_cycle =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_cycle_1dim__,
          xi_cycle_2dim__, DUMMY_VAR__);
      current_statement__ = 19;
      xi_cycle = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_cycle_1dim__,
                   xi_cycle_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_ctilde =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_ctilde_1dim__,
          xi_ctilde_2dim__, DUMMY_VAR__);
      current_statement__ = 20;
      xi_ctilde = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_ctilde_1dim__,
                    xi_ctilde_2dim__);
      local_scalar_t__ sd_mu = DUMMY_VAR__;
      current_statement__ = 21;
      sd_mu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sd_nu = DUMMY_VAR__;
      current_statement__ = 22;
      sd_nu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_cycle =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_cycle_1dim__,
          DUMMY_VAR__);
      current_statement__ = 23;
      sd_cycle = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   sd_cycle_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_ctilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_ctilde_1dim__,
          DUMMY_VAR__);
      current_statement__ = 24;
      sd_ctilde = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, sd_ctilde_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_m_1dim__,
          DUMMY_VAR__);
      current_statement__ = 25;
      sd_m = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               sd_m_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_dow_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_dow_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 26;
      sd_dow_epi = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, sd_dow_epi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_wkend_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_wkend_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 27;
      sd_wkend_epi = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, sd_wkend_epi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_dom_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_dom_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 28;
      sd_dom_epi = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, sd_dom_epi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_month_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_month_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 29;
      sd_month_epi = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, sd_month_epi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_week_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_week_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 30;
      sd_week_epi = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, sd_week_epi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_holidays_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_holidays_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 31;
      sd_holidays_epi = in__.template read_constrain_lb<
                          Eigen::Matrix<local_scalar_t__,-1,1>,
                          jacobian__>(0, lp__, sd_holidays_epi_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 32;
      stan::model::assign(mu_intercept,
        stan::math::add(mu_intercept_param_1,
          stan::math::multiply(mu_intercept_param_2, mu_intercept_centered)),
        "assigning variable mu_intercept");
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 33;
      stan::model::assign(nu_intercept,
        stan::math::add(nu_intercept_param_1,
          stan::math::multiply(nu_intercept_centered, nu_intercept_param_2)),
        "assigning variable nu_intercept");
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 34;
      stan::model::assign(mu_init,
        stan::math::add(mu_0_param_1,
          stan::math::multiply(mu_0_param_2, mu_init_centered)),
        "assigning variable mu_init");
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 35;
      stan::model::assign(nu_init,
        stan::math::add(nu_0_param_1,
          stan::math::multiply(nu_0_param_2, nu_init_centered)),
        "assigning variable nu_init");
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dow_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dow_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 36;
      stan::model::assign(beta_dow_epi,
        stan::math::rep_vector(0.0, (has_day_of_week_epi ? 7 : 0)),
        "assigning variable beta_dow_epi");
      current_statement__ = 49;
      if (has_day_of_week_epi) {
        current_statement__ = 48;
        stan::model::assign(beta_dow_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_dow_epi, "sd_dow_epi",
              stan::model::index_uni(1)), beta_dow_epi_param),
          "assigning variable beta_dow_epi", stan::model::index_min_max(1, 6));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta_wkend_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_wkend_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 51;
      if (has_weekend_epi) {
        current_statement__ = 50;
        stan::model::assign(beta_wkend_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_wkend_epi, "sd_wkend_epi",
              stan::model::index_uni(1)), beta_wkend_epi_param),
          "assigning variable beta_wkend_epi");
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dom_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dom_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 38;
      stan::model::assign(beta_dom_epi,
        stan::math::rep_vector(0.0, (has_day_of_month_epi ? 31 : 0)),
        "assigning variable beta_dom_epi");
      current_statement__ = 53;
      if (has_day_of_month_epi) {
        current_statement__ = 52;
        stan::model::assign(beta_dom_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_dom_epi, "sd_dom_epi",
              stan::model::index_uni(1)), beta_dom_epi_param),
          "assigning variable beta_dom_epi",
          stan::model::index_min_max(1, 30));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta_month_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_month_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 39;
      stan::model::assign(beta_month_epi,
        stan::math::rep_vector(0.0, (has_month_of_year_epi ? 12 : 0)),
        "assigning variable beta_month_epi");
      current_statement__ = 55;
      if (has_month_of_year_epi) {
        current_statement__ = 54;
        stan::model::assign(beta_month_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_month_epi, "sd_month_epi",
              stan::model::index_uni(1)), beta_month_epi_param),
          "assigning variable beta_month_epi",
          stan::model::index_min_max(1, 11));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta_week_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_week_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 40;
      stan::model::assign(beta_week_epi,
        stan::math::rep_vector(0.0, (has_month_of_year_epi ? 53 : 0)),
        "assigning variable beta_week_epi");
      current_statement__ = 60;
      if (has_week_of_year_epi) {
        current_statement__ = 57;
        for (int k = 2; k <= 52; ++k) {
          current_statement__ = 56;
          stan::model::assign(beta_week_epi,
            (stan::model::rvalue(beta_week_epi, "beta_week_epi",
               stan::model::index_uni((k - 1))) +
            (stan::model::rvalue(sd_week_epi, "sd_week_epi",
               stan::model::index_uni(1)) *
            stan::model::rvalue(beta_week_epi_param, "beta_week_epi_param",
              stan::model::index_uni((k - 1))))),
            "assigning variable beta_week_epi", stan::model::index_uni(k));
        }
        current_statement__ = 58;
        stan::model::assign(beta_week_epi,
          ((stan::model::rvalue(beta_week_epi_param, "beta_week_epi_param",
              stan::model::index_uni(52)) +
          stan::model::rvalue(beta_week_epi_param, "beta_week_epi_param",
            stan::model::index_uni(1))) / 2.0),
          "assigning variable beta_week_epi", stan::model::index_uni(53));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta_holidays_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_holidays_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 65;
      if (has_holidays_epi) {
        current_statement__ = 61;
        stan::model::assign(beta_holidays_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_holidays_epi, "sd_holidays_epi",
              stan::model::index_uni(1)), beta_holidays_epi_param),
          "assigning variable beta_holidays_epi");
        current_statement__ = 63;
        if (has_weekend_epi) {
          current_statement__ = 62;
          stan::model::assign(beta_holidays_epi,
            stan::math::add(stan::model::deep_copy(beta_holidays_epi),
              beta_wkend_epi), "assigning variable beta_holidays_epi");
        }
      }
      Eigen::Matrix<local_scalar_t__,-1,1> c_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_init_1dim__,
          DUMMY_VAR__);
      current_statement__ = 42;
      stan::model::assign(c_init,
        stan::math::add(c_0_param_1,
          stan::math::multiply(c_0_param_2, c_init_centered)),
        "assigning variable c_init");
      Eigen::Matrix<local_scalar_t__,-1,1> ctilde_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ctilde_init_1dim__,
          DUMMY_VAR__);
      current_statement__ = 43;
      stan::model::assign(ctilde_init,
        stan::math::add(ctilde_0_param_1,
          stan::math::multiply(ctilde_0_param_2, ctilde_init_centered)),
        "assigning variable ctilde_init");
      Eigen::Matrix<local_scalar_t__,-1,-1> m =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
          DUMMY_VAR__);
      current_statement__ = 44;
      stan::model::assign(m,
        state_space_model(num_steps, num_delays, num_strata, tsize, phi_mu,
          theta_mu, phi_nu, mu_intercept, nu_intercept, lambda_cycle,
          has_day_of_week_epi, has_weekend_epi, has_day_of_month_epi,
          has_month_of_year_epi, has_week_of_year_epi, has_holidays_epi,
          beta_dow_epi, beta_wkend_epi, beta_dom_epi, beta_month_epi,
          beta_week_epi, beta_holidays_epi, day_of_week_epi, weekend_epi,
          day_of_month_epi, month_of_year_epi, week_of_year_epi,
          holidays_epi, mu_p, mu_q, nu_p, has_cycle, mu_init, nu_init,
          c_init, ctilde_init, sd_mu, sd_nu, sd_cycle, sd_ctilde, xi_mu,
          xi_nu, xi_cycle, xi_ctilde, pstream__), "assigning variable m");
      Eigen::Matrix<local_scalar_t__,-1,-1> m_trans =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
          DUMMY_VAR__);
      current_statement__ = 45;
      stan::model::assign(m_trans,
        transform_state_space_model(m, identity_link_x, log_link_x,
          softplus_link_x, dist_hyper_link_x, control_k_transform,
          control_c_transform, pstream__), "assigning variable m_trans");
      std::vector<local_scalar_t__> dist_val =
        std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
      current_statement__ = 46;
      stan::model::assign(dist_val,
        get_val_for_model(n_rows, num_delays, m_trans, case_idx, s_col,
          d_col, t_col, pstream__), "assigning variable dist_val");
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 47;
      lprior = 0;
      current_statement__ = 66;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(mu_intercept_centered));
      current_statement__ = 67;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(mu_init_centered));
      current_statement__ = 68;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(nu_intercept_centered));
      current_statement__ = 69;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(nu_init_centered));
      current_statement__ = 70;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(c_init_centered));
      current_statement__ = 71;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(ctilde_init_centered));
      current_statement__ = 72;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_dow_epi_param));
      current_statement__ = 73;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_wkend_epi_param));
      current_statement__ = 74;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_dom_epi_param));
      current_statement__ = 75;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_month_epi_param));
      current_statement__ = 76;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_week_epi_param));
      current_statement__ = 77;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_holidays_epi_param));
      current_statement__ = 78;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_mu)));
      current_statement__ = 79;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_nu)));
      current_statement__ = 80;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_cycle)));
      current_statement__ = 81;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_ctilde)));
      current_statement__ = 82;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_mu, sd_mu_param_1, sd_mu_param_2)
        - stan::math::normal_lccdf(0, sd_mu_param_1, sd_mu_param_2)));
      current_statement__ = 83;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_nu, sd_nu_param_1, sd_nu_param_2)
        - stan::math::normal_lccdf(0, sd_nu_param_1, sd_nu_param_2)));
      current_statement__ = 85;
      if (stan::math::logical_negation(is_poisson)) {
        current_statement__ = 84;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_m, sd_m_param_1, sd_m_param_2) -
          stan::math::normal_lccdf(0, sd_m_param_1, sd_m_param_2)));
      }
      current_statement__ = 89;
      if (has_cycle) {
        current_statement__ = 86;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_cycle, sd_c_param_1,
             sd_c_param_2)
          - stan::math::normal_lccdf(0, sd_c_param_1, sd_c_param_2)));
        current_statement__ = 87;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_ctilde, sd_ctilde_param_1,
             sd_ctilde_param_2)
          -
          stan::math::normal_lccdf(0, sd_ctilde_param_1, sd_ctilde_param_2)));
      }
      current_statement__ = 91;
      if (has_day_of_week_epi) {
        current_statement__ = 90;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_dow_epi, sd_dow_epi_param_1,
             sd_dow_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_dow_epi_param_1, sd_dow_epi_param_2)));
      }
      current_statement__ = 93;
      if (has_weekend_epi) {
        current_statement__ = 92;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_wkend_epi, sd_wkend_epi_param_1,
             sd_wkend_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_wkend_epi_param_1,
            sd_wkend_epi_param_2)));
      }
      current_statement__ = 95;
      if (has_day_of_month_epi) {
        current_statement__ = 94;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_dom_epi, sd_dom_epi_param_1,
             sd_dom_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_dom_epi_param_1, sd_dom_epi_param_2)));
      }
      current_statement__ = 97;
      if (has_month_of_year_epi) {
        current_statement__ = 96;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_month_epi, sd_month_epi_param_1,
             sd_month_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_month_epi_param_1,
            sd_month_epi_param_2)));
      }
      current_statement__ = 99;
      if (has_week_of_year_epi) {
        current_statement__ = 98;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_week_epi, sd_week_epi_param_1,
             sd_week_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_week_epi_param_1,
            sd_week_epi_param_2)));
      }
      current_statement__ = 101;
      if (has_holidays_epi) {
        current_statement__ = 100;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_holidays_epi,
             sd_holidays_epi_param_1, sd_holidays_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_holidays_epi_param_1,
            sd_holidays_epi_param_2)));
      }
      {
        current_statement__ = 117;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 115;
          if (is_normal) {
            current_statement__ = 113;
            lp_accum__.add(stan::math::normal_lpdf<false>(cases_real_trans,
                             dist_val,
                             stan::math::rep_vector(
                               stan::model::rvalue(sd_m, "sd_m",
                                 stan::model::index_uni(1)), n_rows)));
          } else {
            current_statement__ = 112;
            if (is_student) {
              current_statement__ = 110;
              lp_accum__.add(stan::math::student_t_lpdf<false>(
                               cases_real_trans,
                               stan::math::rep_vector(dof, n_rows), dist_val,
                               stan::math::rep_vector((1.0 /
                                 stan::model::rvalue(sd_m, "sd_m",
                                   stan::model::index_uni(1))), n_rows)));
            } else {
              current_statement__ = 109;
              if (is_poisson) {
                current_statement__ = 107;
                lp_accum__.add(stan::math::poisson_lpmf<false>(cases_int,
                                 dist_val));
              } else {
                current_statement__ = 106;
                if (is_negbin) {
                  current_statement__ = 104;
                  lp_accum__.add(stan::math::neg_binomial_2_lpmf<false>(
                                   cases_int, dist_val,
                                   stan::math::rep_vector((1.0 /
                                     stan::model::rvalue(sd_m, "sd_m",
                                       stan::model::index_uni(1))), n_rows)));
                } else {
                  current_statement__ = 102;
                  std::stringstream errmsg_stream__;
                  stan::math::stan_print(&errmsg_stream__,
                    "Unknown distribution type @model. This is an internal error of the `diseasenowcasting` package. Please report to `https://github.com/RodrigoZepeda/diseasenowcasting/issues`");
                  throw std::domain_error(errmsg_stream__.str());
                }
              }
            }
          }
        }
        current_statement__ = 118;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_nowcasting_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu_intercept_centered =
        Eigen::Matrix<double,-1,1>::Constant(tsize,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_intercept_centered = in__.template read<
                                Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<double,-1,1> phi_mu =
        Eigen::Matrix<double,-1,1>::Constant(mu_p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      phi_mu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, mu_p);
      Eigen::Matrix<double,-1,1> theta_mu =
        Eigen::Matrix<double,-1,1>::Constant(mu_q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      theta_mu = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                   lp__, mu_q);
      Eigen::Matrix<double,-1,1> nu_intercept_centered =
        Eigen::Matrix<double,-1,1>::Constant(num_strata,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      nu_intercept_centered = in__.template read<
                                Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<double,-1,1> phi_nu =
        Eigen::Matrix<double,-1,1>::Constant(nu_p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      phi_nu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, nu_p);
      Eigen::Matrix<double,-1,1> lambda_cycle =
        Eigen::Matrix<double,-1,1>::Constant(lambda_cycle_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      lambda_cycle = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_cycle_1dim__);
      Eigen::Matrix<double,-1,1> beta_dow_epi_param =
        Eigen::Matrix<double,-1,1>::Constant(beta_dow_epi_param_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      beta_dow_epi_param = in__.template read<
                             Eigen::Matrix<local_scalar_t__,-1,1>>(beta_dow_epi_param_1dim__);
      Eigen::Matrix<double,-1,1> beta_wkend_epi_param =
        Eigen::Matrix<double,-1,1>::Constant(beta_wkend_epi_param_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      beta_wkend_epi_param = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_wkend_epi_param_1dim__);
      Eigen::Matrix<double,-1,1> beta_dom_epi_param =
        Eigen::Matrix<double,-1,1>::Constant(beta_dom_epi_param_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      beta_dom_epi_param = in__.template read<
                             Eigen::Matrix<local_scalar_t__,-1,1>>(beta_dom_epi_param_1dim__);
      Eigen::Matrix<double,-1,1> beta_month_epi_param =
        Eigen::Matrix<double,-1,1>::Constant(beta_month_epi_param_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      beta_month_epi_param = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(beta_month_epi_param_1dim__);
      Eigen::Matrix<double,-1,1> beta_week_epi_param =
        Eigen::Matrix<double,-1,1>::Constant(beta_week_epi_param_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      beta_week_epi_param = in__.template read<
                              Eigen::Matrix<local_scalar_t__,-1,1>>(beta_week_epi_param_1dim__);
      Eigen::Matrix<double,-1,1> beta_holidays_epi_param =
        Eigen::Matrix<double,-1,1>::Constant(beta_holidays_epi_param_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      beta_holidays_epi_param = in__.template read<
                                  Eigen::Matrix<local_scalar_t__,-1,1>>(beta_holidays_epi_param_1dim__);
      Eigen::Matrix<double,-1,1> mu_init_centered =
        Eigen::Matrix<double,-1,1>::Constant(tsize,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      mu_init_centered = in__.template read<
                           Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<double,-1,1> nu_init_centered =
        Eigen::Matrix<double,-1,1>::Constant(num_strata,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      nu_init_centered = in__.template read<
                           Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<double,-1,1> c_init_centered =
        Eigen::Matrix<double,-1,1>::Constant(c_init_centered_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      c_init_centered = in__.template read<
                          Eigen::Matrix<local_scalar_t__,-1,1>>(c_init_centered_1dim__);
      Eigen::Matrix<double,-1,1> ctilde_init_centered =
        Eigen::Matrix<double,-1,1>::Constant(ctilde_init_centered_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      ctilde_init_centered = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(ctilde_init_centered_1dim__);
      Eigen::Matrix<double,-1,-1> xi_mu =
        Eigen::Matrix<double,-1,-1>::Constant(tsize, xi_mu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      xi_mu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(tsize, xi_mu_2dim__);
      Eigen::Matrix<double,-1,-1> xi_nu =
        Eigen::Matrix<double,-1,-1>::Constant(num_strata, xi_nu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      xi_nu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(num_strata,
                xi_nu_2dim__);
      Eigen::Matrix<double,-1,-1> xi_cycle =
        Eigen::Matrix<double,-1,-1>::Constant(xi_cycle_1dim__,
          xi_cycle_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      xi_cycle = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_cycle_1dim__,
                   xi_cycle_2dim__);
      Eigen::Matrix<double,-1,-1> xi_ctilde =
        Eigen::Matrix<double,-1,-1>::Constant(xi_ctilde_1dim__,
          xi_ctilde_2dim__, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      xi_ctilde = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_ctilde_1dim__,
                    xi_ctilde_2dim__);
      double sd_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 21;
      sd_mu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double sd_nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 22;
      sd_nu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> sd_cycle =
        Eigen::Matrix<double,-1,1>::Constant(sd_cycle_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 23;
      sd_cycle = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   sd_cycle_1dim__);
      Eigen::Matrix<double,-1,1> sd_ctilde =
        Eigen::Matrix<double,-1,1>::Constant(sd_ctilde_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 24;
      sd_ctilde = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, sd_ctilde_1dim__);
      Eigen::Matrix<double,-1,1> sd_m =
        Eigen::Matrix<double,-1,1>::Constant(sd_m_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 25;
      sd_m = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               sd_m_1dim__);
      Eigen::Matrix<double,-1,1> sd_dow_epi =
        Eigen::Matrix<double,-1,1>::Constant(sd_dow_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 26;
      sd_dow_epi = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, sd_dow_epi_1dim__);
      Eigen::Matrix<double,-1,1> sd_wkend_epi =
        Eigen::Matrix<double,-1,1>::Constant(sd_wkend_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 27;
      sd_wkend_epi = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, sd_wkend_epi_1dim__);
      Eigen::Matrix<double,-1,1> sd_dom_epi =
        Eigen::Matrix<double,-1,1>::Constant(sd_dom_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      sd_dom_epi = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, sd_dom_epi_1dim__);
      Eigen::Matrix<double,-1,1> sd_month_epi =
        Eigen::Matrix<double,-1,1>::Constant(sd_month_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 29;
      sd_month_epi = in__.template read_constrain_lb<
                       Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                       lp__, sd_month_epi_1dim__);
      Eigen::Matrix<double,-1,1> sd_week_epi =
        Eigen::Matrix<double,-1,1>::Constant(sd_week_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 30;
      sd_week_epi = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, sd_week_epi_1dim__);
      Eigen::Matrix<double,-1,1> sd_holidays_epi =
        Eigen::Matrix<double,-1,1>::Constant(sd_holidays_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 31;
      sd_holidays_epi = in__.template read_constrain_lb<
                          Eigen::Matrix<local_scalar_t__,-1,1>,
                          jacobian__>(0, lp__, sd_holidays_epi_1dim__);
      Eigen::Matrix<double,-1,1> mu_intercept =
        Eigen::Matrix<double,-1,1>::Constant(tsize,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> nu_intercept =
        Eigen::Matrix<double,-1,1>::Constant(num_strata,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_init =
        Eigen::Matrix<double,-1,1>::Constant(tsize,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> nu_init =
        Eigen::Matrix<double,-1,1>::Constant(num_strata,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_dow_epi =
        Eigen::Matrix<double,-1,1>::Constant(beta_dow_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_wkend_epi =
        Eigen::Matrix<double,-1,1>::Constant(beta_wkend_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_dom_epi =
        Eigen::Matrix<double,-1,1>::Constant(beta_dom_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_month_epi =
        Eigen::Matrix<double,-1,1>::Constant(beta_month_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_week_epi =
        Eigen::Matrix<double,-1,1>::Constant(beta_week_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta_holidays_epi =
        Eigen::Matrix<double,-1,1>::Constant(beta_holidays_epi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> c_init =
        Eigen::Matrix<double,-1,1>::Constant(c_init_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ctilde_init =
        Eigen::Matrix<double,-1,1>::Constant(ctilde_init_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> m =
        Eigen::Matrix<double,-1,-1>::Constant(tsize, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> m_trans =
        Eigen::Matrix<double,-1,-1>::Constant(tsize, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> dist_val =
        std::vector<double>(n_rows, std::numeric_limits<double>::quiet_NaN());
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_intercept_centered);
      out__.write(phi_mu);
      out__.write(theta_mu);
      out__.write(nu_intercept_centered);
      out__.write(phi_nu);
      out__.write(lambda_cycle);
      out__.write(beta_dow_epi_param);
      out__.write(beta_wkend_epi_param);
      out__.write(beta_dom_epi_param);
      out__.write(beta_month_epi_param);
      out__.write(beta_week_epi_param);
      out__.write(beta_holidays_epi_param);
      out__.write(mu_init_centered);
      out__.write(nu_init_centered);
      out__.write(c_init_centered);
      out__.write(ctilde_init_centered);
      out__.write(xi_mu);
      out__.write(xi_nu);
      out__.write(xi_cycle);
      out__.write(xi_ctilde);
      out__.write(sd_mu);
      out__.write(sd_nu);
      out__.write(sd_cycle);
      out__.write(sd_ctilde);
      out__.write(sd_m);
      out__.write(sd_dow_epi);
      out__.write(sd_wkend_epi);
      out__.write(sd_dom_epi);
      out__.write(sd_month_epi);
      out__.write(sd_week_epi);
      out__.write(sd_holidays_epi);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 32;
      stan::model::assign(mu_intercept,
        stan::math::add(mu_intercept_param_1,
          stan::math::multiply(mu_intercept_param_2, mu_intercept_centered)),
        "assigning variable mu_intercept");
      current_statement__ = 33;
      stan::model::assign(nu_intercept,
        stan::math::add(nu_intercept_param_1,
          stan::math::multiply(nu_intercept_centered, nu_intercept_param_2)),
        "assigning variable nu_intercept");
      current_statement__ = 34;
      stan::model::assign(mu_init,
        stan::math::add(mu_0_param_1,
          stan::math::multiply(mu_0_param_2, mu_init_centered)),
        "assigning variable mu_init");
      current_statement__ = 35;
      stan::model::assign(nu_init,
        stan::math::add(nu_0_param_1,
          stan::math::multiply(nu_0_param_2, nu_init_centered)),
        "assigning variable nu_init");
      current_statement__ = 36;
      stan::model::assign(beta_dow_epi,
        stan::math::rep_vector(0.0, (has_day_of_week_epi ? 7 : 0)),
        "assigning variable beta_dow_epi");
      current_statement__ = 49;
      if (has_day_of_week_epi) {
        current_statement__ = 48;
        stan::model::assign(beta_dow_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_dow_epi, "sd_dow_epi",
              stan::model::index_uni(1)), beta_dow_epi_param),
          "assigning variable beta_dow_epi", stan::model::index_min_max(1, 6));
      }
      current_statement__ = 51;
      if (has_weekend_epi) {
        current_statement__ = 50;
        stan::model::assign(beta_wkend_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_wkend_epi, "sd_wkend_epi",
              stan::model::index_uni(1)), beta_wkend_epi_param),
          "assigning variable beta_wkend_epi");
      }
      current_statement__ = 38;
      stan::model::assign(beta_dom_epi,
        stan::math::rep_vector(0.0, (has_day_of_month_epi ? 31 : 0)),
        "assigning variable beta_dom_epi");
      current_statement__ = 53;
      if (has_day_of_month_epi) {
        current_statement__ = 52;
        stan::model::assign(beta_dom_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_dom_epi, "sd_dom_epi",
              stan::model::index_uni(1)), beta_dom_epi_param),
          "assigning variable beta_dom_epi",
          stan::model::index_min_max(1, 30));
      }
      current_statement__ = 39;
      stan::model::assign(beta_month_epi,
        stan::math::rep_vector(0.0, (has_month_of_year_epi ? 12 : 0)),
        "assigning variable beta_month_epi");
      current_statement__ = 55;
      if (has_month_of_year_epi) {
        current_statement__ = 54;
        stan::model::assign(beta_month_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_month_epi, "sd_month_epi",
              stan::model::index_uni(1)), beta_month_epi_param),
          "assigning variable beta_month_epi",
          stan::model::index_min_max(1, 11));
      }
      current_statement__ = 40;
      stan::model::assign(beta_week_epi,
        stan::math::rep_vector(0.0, (has_month_of_year_epi ? 53 : 0)),
        "assigning variable beta_week_epi");
      current_statement__ = 60;
      if (has_week_of_year_epi) {
        current_statement__ = 57;
        for (int k = 2; k <= 52; ++k) {
          current_statement__ = 56;
          stan::model::assign(beta_week_epi,
            (stan::model::rvalue(beta_week_epi, "beta_week_epi",
               stan::model::index_uni((k - 1))) +
            (stan::model::rvalue(sd_week_epi, "sd_week_epi",
               stan::model::index_uni(1)) *
            stan::model::rvalue(beta_week_epi_param, "beta_week_epi_param",
              stan::model::index_uni((k - 1))))),
            "assigning variable beta_week_epi", stan::model::index_uni(k));
        }
        current_statement__ = 58;
        stan::model::assign(beta_week_epi,
          ((stan::model::rvalue(beta_week_epi_param, "beta_week_epi_param",
              stan::model::index_uni(52)) +
          stan::model::rvalue(beta_week_epi_param, "beta_week_epi_param",
            stan::model::index_uni(1))) / 2.0),
          "assigning variable beta_week_epi", stan::model::index_uni(53));
      }
      current_statement__ = 65;
      if (has_holidays_epi) {
        current_statement__ = 61;
        stan::model::assign(beta_holidays_epi,
          stan::math::multiply(
            stan::model::rvalue(sd_holidays_epi, "sd_holidays_epi",
              stan::model::index_uni(1)), beta_holidays_epi_param),
          "assigning variable beta_holidays_epi");
        current_statement__ = 63;
        if (has_weekend_epi) {
          current_statement__ = 62;
          stan::model::assign(beta_holidays_epi,
            stan::math::add(stan::model::deep_copy(beta_holidays_epi),
              beta_wkend_epi), "assigning variable beta_holidays_epi");
        }
      }
      current_statement__ = 42;
      stan::model::assign(c_init,
        stan::math::add(c_0_param_1,
          stan::math::multiply(c_0_param_2, c_init_centered)),
        "assigning variable c_init");
      current_statement__ = 43;
      stan::model::assign(ctilde_init,
        stan::math::add(ctilde_0_param_1,
          stan::math::multiply(ctilde_0_param_2, ctilde_init_centered)),
        "assigning variable ctilde_init");
      current_statement__ = 44;
      stan::model::assign(m,
        state_space_model(num_steps, num_delays, num_strata, tsize, phi_mu,
          theta_mu, phi_nu, mu_intercept, nu_intercept, lambda_cycle,
          has_day_of_week_epi, has_weekend_epi, has_day_of_month_epi,
          has_month_of_year_epi, has_week_of_year_epi, has_holidays_epi,
          beta_dow_epi, beta_wkend_epi, beta_dom_epi, beta_month_epi,
          beta_week_epi, beta_holidays_epi, day_of_week_epi, weekend_epi,
          day_of_month_epi, month_of_year_epi, week_of_year_epi,
          holidays_epi, mu_p, mu_q, nu_p, has_cycle, mu_init, nu_init,
          c_init, ctilde_init, sd_mu, sd_nu, sd_cycle, sd_ctilde, xi_mu,
          xi_nu, xi_cycle, xi_ctilde, pstream__), "assigning variable m");
      current_statement__ = 45;
      stan::model::assign(m_trans,
        transform_state_space_model(m, identity_link_x, log_link_x,
          softplus_link_x, dist_hyper_link_x, control_k_transform,
          control_c_transform, pstream__), "assigning variable m_trans");
      current_statement__ = 46;
      stan::model::assign(dist_val,
        get_val_for_model(n_rows, num_delays, m_trans, case_idx, s_col,
          d_col, t_col, pstream__), "assigning variable dist_val");
      current_statement__ = 47;
      lprior = 0;
      current_statement__ = 66;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(mu_intercept_centered));
      current_statement__ = 67;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(mu_init_centered));
      current_statement__ = 68;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(nu_intercept_centered));
      current_statement__ = 69;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(nu_init_centered));
      current_statement__ = 70;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(c_init_centered));
      current_statement__ = 71;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(ctilde_init_centered));
      current_statement__ = 72;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_dow_epi_param));
      current_statement__ = 73;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_wkend_epi_param));
      current_statement__ = 74;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_dom_epi_param));
      current_statement__ = 75;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_month_epi_param));
      current_statement__ = 76;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_week_epi_param));
      current_statement__ = 77;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(beta_holidays_epi_param));
      current_statement__ = 78;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_mu)));
      current_statement__ = 79;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_nu)));
      current_statement__ = 80;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_cycle)));
      current_statement__ = 81;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_ctilde)));
      current_statement__ = 82;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_mu, sd_mu_param_1, sd_mu_param_2)
        - stan::math::normal_lccdf(0, sd_mu_param_1, sd_mu_param_2)));
      current_statement__ = 83;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_nu, sd_nu_param_1, sd_nu_param_2)
        - stan::math::normal_lccdf(0, sd_nu_param_1, sd_nu_param_2)));
      current_statement__ = 85;
      if (stan::math::logical_negation(is_poisson)) {
        current_statement__ = 84;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_m, sd_m_param_1, sd_m_param_2) -
          stan::math::normal_lccdf(0, sd_m_param_1, sd_m_param_2)));
      }
      current_statement__ = 89;
      if (has_cycle) {
        current_statement__ = 86;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_cycle, sd_c_param_1,
             sd_c_param_2)
          - stan::math::normal_lccdf(0, sd_c_param_1, sd_c_param_2)));
        current_statement__ = 87;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_ctilde, sd_ctilde_param_1,
             sd_ctilde_param_2)
          -
          stan::math::normal_lccdf(0, sd_ctilde_param_1, sd_ctilde_param_2)));
      }
      current_statement__ = 91;
      if (has_day_of_week_epi) {
        current_statement__ = 90;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_dow_epi, sd_dow_epi_param_1,
             sd_dow_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_dow_epi_param_1, sd_dow_epi_param_2)));
      }
      current_statement__ = 93;
      if (has_weekend_epi) {
        current_statement__ = 92;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_wkend_epi, sd_wkend_epi_param_1,
             sd_wkend_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_wkend_epi_param_1,
            sd_wkend_epi_param_2)));
      }
      current_statement__ = 95;
      if (has_day_of_month_epi) {
        current_statement__ = 94;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_dom_epi, sd_dom_epi_param_1,
             sd_dom_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_dom_epi_param_1, sd_dom_epi_param_2)));
      }
      current_statement__ = 97;
      if (has_month_of_year_epi) {
        current_statement__ = 96;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_month_epi, sd_month_epi_param_1,
             sd_month_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_month_epi_param_1,
            sd_month_epi_param_2)));
      }
      current_statement__ = 99;
      if (has_week_of_year_epi) {
        current_statement__ = 98;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_week_epi, sd_week_epi_param_1,
             sd_week_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_week_epi_param_1,
            sd_week_epi_param_2)));
      }
      current_statement__ = 101;
      if (has_holidays_epi) {
        current_statement__ = 100;
        lprior = (lprior +
          (stan::math::normal_lpdf<false>(sd_holidays_epi,
             sd_holidays_epi_param_1, sd_holidays_epi_param_2)
          -
          stan::math::normal_lccdf(0, sd_holidays_epi_param_1,
            sd_holidays_epi_param_2)));
      }
      if (emit_transformed_parameters__) {
        out__.write(mu_intercept);
        out__.write(nu_intercept);
        out__.write(mu_init);
        out__.write(nu_init);
        out__.write(beta_dow_epi);
        out__.write(beta_wkend_epi);
        out__.write(beta_dom_epi);
        out__.write(beta_month_epi);
        out__.write(beta_week_epi);
        out__.write(beta_holidays_epi);
        out__.write(c_init);
        out__.write(ctilde_init);
        out__.write(m);
        out__.write(m_trans);
        out__.write(dist_val);
        out__.write(lprior);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu_intercept_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tsize),
        "assigning variable mu_intercept_centered");
      out__.write(mu_intercept_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_p, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(phi_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(mu_p),
        "assigning variable phi_mu");
      out__.write_free_lub(-1, 1, phi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_q, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(theta_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(mu_q),
        "assigning variable theta_mu");
      out__.write_free_lub(-1, 1, theta_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(nu_intercept_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata),
        "assigning variable nu_intercept_centered");
      out__.write(nu_intercept_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nu_p, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(phi_nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nu_p),
        "assigning variable phi_nu");
      out__.write_free_lub(-1, 1, phi_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_cycle =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_cycle_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(lambda_cycle,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_cycle_1dim__),
        "assigning variable lambda_cycle");
      out__.write(lambda_cycle);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dow_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dow_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(beta_dow_epi_param,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(beta_dow_epi_param_1dim__),
        "assigning variable beta_dow_epi_param");
      out__.write(beta_dow_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_wkend_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_wkend_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(beta_wkend_epi_param,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(beta_wkend_epi_param_1dim__),
        "assigning variable beta_wkend_epi_param");
      out__.write(beta_wkend_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dom_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dom_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(beta_dom_epi_param,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(beta_dom_epi_param_1dim__),
        "assigning variable beta_dom_epi_param");
      out__.write(beta_dom_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_month_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_month_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(beta_month_epi_param,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(beta_month_epi_param_1dim__),
        "assigning variable beta_month_epi_param");
      out__.write(beta_month_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_week_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_week_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(beta_week_epi_param,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(beta_week_epi_param_1dim__),
        "assigning variable beta_week_epi_param");
      out__.write(beta_week_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_holidays_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_holidays_epi_param_1dim__,
          DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(beta_holidays_epi_param,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(beta_holidays_epi_param_1dim__),
        "assigning variable beta_holidays_epi_param");
      out__.write(beta_holidays_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(mu_init_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tsize),
        "assigning variable mu_init_centered");
      out__.write(mu_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(nu_init_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata),
        "assigning variable nu_init_centered");
      out__.write(nu_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> c_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_init_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(c_init_centered,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(c_init_centered_1dim__),
        "assigning variable c_init_centered");
      out__.write(c_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> ctilde_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ctilde_init_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(ctilde_init_centered,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(ctilde_init_centered_1dim__),
        "assigning variable ctilde_init_centered");
      out__.write(ctilde_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, xi_mu_2dim__,
          DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(xi_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(tsize, xi_mu_2dim__),
        "assigning variable xi_mu");
      out__.write(xi_mu);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata,
          xi_nu_2dim__, DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(xi_nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_strata,
          xi_nu_2dim__), "assigning variable xi_nu");
      out__.write(xi_nu);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_cycle =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_cycle_1dim__,
          xi_cycle_2dim__, DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(xi_cycle,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_cycle_1dim__,
          xi_cycle_2dim__), "assigning variable xi_cycle");
      out__.write(xi_cycle);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_ctilde =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_ctilde_1dim__,
          xi_ctilde_2dim__, DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(xi_ctilde,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_ctilde_1dim__,
          xi_ctilde_2dim__), "assigning variable xi_ctilde");
      out__.write(xi_ctilde);
      local_scalar_t__ sd_mu = DUMMY_VAR__;
      current_statement__ = 21;
      sd_mu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_mu);
      local_scalar_t__ sd_nu = DUMMY_VAR__;
      current_statement__ = 22;
      sd_nu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_cycle =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_cycle_1dim__,
          DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(sd_cycle,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_cycle_1dim__),
        "assigning variable sd_cycle");
      out__.write_free_lb(0, sd_cycle);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_ctilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_ctilde_1dim__,
          DUMMY_VAR__);
      current_statement__ = 24;
      stan::model::assign(sd_ctilde,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_ctilde_1dim__),
        "assigning variable sd_ctilde");
      out__.write_free_lb(0, sd_ctilde);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_m_1dim__,
          DUMMY_VAR__);
      current_statement__ = 25;
      stan::model::assign(sd_m,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_m_1dim__),
        "assigning variable sd_m");
      out__.write_free_lb(0, sd_m);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_dow_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_dow_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 26;
      stan::model::assign(sd_dow_epi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_dow_epi_1dim__),
        "assigning variable sd_dow_epi");
      out__.write_free_lb(0, sd_dow_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_wkend_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_wkend_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 27;
      stan::model::assign(sd_wkend_epi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_wkend_epi_1dim__),
        "assigning variable sd_wkend_epi");
      out__.write_free_lb(0, sd_wkend_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_dom_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_dom_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 28;
      stan::model::assign(sd_dom_epi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_dom_epi_1dim__),
        "assigning variable sd_dom_epi");
      out__.write_free_lb(0, sd_dom_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_month_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_month_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 29;
      stan::model::assign(sd_month_epi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_month_epi_1dim__),
        "assigning variable sd_month_epi");
      out__.write_free_lb(0, sd_month_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_week_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_week_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 30;
      stan::model::assign(sd_week_epi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sd_week_epi_1dim__),
        "assigning variable sd_week_epi");
      out__.write_free_lb(0, sd_week_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_holidays_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_holidays_epi_1dim__,
          DUMMY_VAR__);
      current_statement__ = 31;
      stan::model::assign(sd_holidays_epi,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(sd_holidays_epi_1dim__),
        "assigning variable sd_holidays_epi");
      out__.write_free_lb(0, sd_holidays_epi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization",
        "mu_intercept_centered", "double",
        std::vector<size_t>{static_cast<size_t>(tsize)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(mu_p)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "theta_mu",
        "double", std::vector<size_t>{static_cast<size_t>(mu_q)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "nu_intercept_centered", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "phi_nu", "double",
        std::vector<size_t>{static_cast<size_t>(nu_p)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "lambda_cycle",
        "double",
        std::vector<size_t>{static_cast<size_t>(lambda_cycle_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "beta_dow_epi_param", "double",
        std::vector<size_t>{static_cast<size_t>(beta_dow_epi_param_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization",
        "beta_wkend_epi_param", "double",
        std::vector<size_t>{static_cast<size_t>(beta_wkend_epi_param_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "beta_dom_epi_param", "double",
        std::vector<size_t>{static_cast<size_t>(beta_dom_epi_param_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "beta_month_epi_param", "double",
        std::vector<size_t>{static_cast<size_t>(beta_month_epi_param_1dim__)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "beta_week_epi_param", "double",
        std::vector<size_t>{static_cast<size_t>(beta_week_epi_param_1dim__)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "beta_holidays_epi_param", "double",
        std::vector<size_t>{static_cast<size_t>(
                              beta_holidays_epi_param_1dim__)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "mu_init_centered",
        "double", std::vector<size_t>{static_cast<size_t>(tsize)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "nu_init_centered",
        "double", std::vector<size_t>{static_cast<size_t>(num_strata)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "c_init_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(c_init_centered_1dim__)});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization",
        "ctilde_init_centered", "double",
        std::vector<size_t>{static_cast<size_t>(ctilde_init_centered_1dim__)});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization", "xi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(tsize),
          static_cast<size_t>(xi_mu_2dim__)});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization", "xi_nu", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata),
          static_cast<size_t>(xi_nu_2dim__)});
      current_statement__ = 19;
      context__.validate_dims("parameter initialization", "xi_cycle",
        "double",
        std::vector<size_t>{static_cast<size_t>(xi_cycle_1dim__),
          static_cast<size_t>(xi_cycle_2dim__)});
      current_statement__ = 20;
      context__.validate_dims("parameter initialization", "xi_ctilde",
        "double",
        std::vector<size_t>{static_cast<size_t>(xi_ctilde_1dim__),
          static_cast<size_t>(xi_ctilde_2dim__)});
      current_statement__ = 21;
      context__.validate_dims("parameter initialization", "sd_mu", "double",
        std::vector<size_t>{});
      current_statement__ = 22;
      context__.validate_dims("parameter initialization", "sd_nu", "double",
        std::vector<size_t>{});
      current_statement__ = 23;
      context__.validate_dims("parameter initialization", "sd_cycle",
        "double", std::vector<size_t>{static_cast<size_t>(sd_cycle_1dim__)});
      current_statement__ = 24;
      context__.validate_dims("parameter initialization", "sd_ctilde",
        "double", std::vector<size_t>{static_cast<size_t>(sd_ctilde_1dim__)});
      current_statement__ = 25;
      context__.validate_dims("parameter initialization", "sd_m", "double",
        std::vector<size_t>{static_cast<size_t>(sd_m_1dim__)});
      current_statement__ = 26;
      context__.validate_dims("parameter initialization", "sd_dow_epi",
        "double",
        std::vector<size_t>{static_cast<size_t>(sd_dow_epi_1dim__)});
      current_statement__ = 27;
      context__.validate_dims("parameter initialization", "sd_wkend_epi",
        "double",
        std::vector<size_t>{static_cast<size_t>(sd_wkend_epi_1dim__)});
      current_statement__ = 28;
      context__.validate_dims("parameter initialization", "sd_dom_epi",
        "double",
        std::vector<size_t>{static_cast<size_t>(sd_dom_epi_1dim__)});
      current_statement__ = 29;
      context__.validate_dims("parameter initialization", "sd_month_epi",
        "double",
        std::vector<size_t>{static_cast<size_t>(sd_month_epi_1dim__)});
      current_statement__ = 30;
      context__.validate_dims("parameter initialization", "sd_week_epi",
        "double",
        std::vector<size_t>{static_cast<size_t>(sd_week_epi_1dim__)});
      current_statement__ = 31;
      context__.validate_dims("parameter initialization", "sd_holidays_epi",
        "double",
        std::vector<size_t>{static_cast<size_t>(sd_holidays_epi_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_intercept_centered_flat__;
        current_statement__ = 1;
        mu_intercept_centered_flat__ = context__.vals_r("mu_intercept_centered");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(mu_intercept_centered,
            mu_intercept_centered_flat__[(pos__ - 1)],
            "assigning variable mu_intercept_centered",
            stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_intercept_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_mu_flat__;
        current_statement__ = 2;
        phi_mu_flat__ = context__.vals_r("phi_mu");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= mu_p; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(phi_mu, phi_mu_flat__[(pos__ - 1)],
            "assigning variable phi_mu", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, phi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_mu_flat__;
        current_statement__ = 3;
        theta_mu_flat__ = context__.vals_r("theta_mu");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= mu_q; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(theta_mu, theta_mu_flat__[(pos__ - 1)],
            "assigning variable theta_mu", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, theta_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_intercept_centered_flat__;
        current_statement__ = 4;
        nu_intercept_centered_flat__ = context__.vals_r("nu_intercept_centered");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(nu_intercept_centered,
            nu_intercept_centered_flat__[(pos__ - 1)],
            "assigning variable nu_intercept_centered",
            stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(nu_intercept_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nu_p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_nu_flat__;
        current_statement__ = 5;
        phi_nu_flat__ = context__.vals_r("phi_nu");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nu_p; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(phi_nu, phi_nu_flat__[(pos__ - 1)],
            "assigning variable phi_nu", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, phi_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_cycle =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_cycle_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_cycle_flat__;
        current_statement__ = 6;
        lambda_cycle_flat__ = context__.vals_r("lambda_cycle");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= lambda_cycle_1dim__; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(lambda_cycle, lambda_cycle_flat__[(pos__ - 1)],
            "assigning variable lambda_cycle", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(lambda_cycle);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dow_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dow_epi_param_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_dow_epi_param_flat__;
        current_statement__ = 7;
        beta_dow_epi_param_flat__ = context__.vals_r("beta_dow_epi_param");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= beta_dow_epi_param_1dim__; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(beta_dow_epi_param,
            beta_dow_epi_param_flat__[(pos__ - 1)],
            "assigning variable beta_dow_epi_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_dow_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_wkend_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_wkend_epi_param_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_wkend_epi_param_flat__;
        current_statement__ = 8;
        beta_wkend_epi_param_flat__ = context__.vals_r("beta_wkend_epi_param");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= beta_wkend_epi_param_1dim__; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(beta_wkend_epi_param,
            beta_wkend_epi_param_flat__[(pos__ - 1)],
            "assigning variable beta_wkend_epi_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_wkend_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_dom_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_dom_epi_param_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_dom_epi_param_flat__;
        current_statement__ = 9;
        beta_dom_epi_param_flat__ = context__.vals_r("beta_dom_epi_param");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= beta_dom_epi_param_1dim__; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(beta_dom_epi_param,
            beta_dom_epi_param_flat__[(pos__ - 1)],
            "assigning variable beta_dom_epi_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_dom_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_month_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_month_epi_param_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_month_epi_param_flat__;
        current_statement__ = 10;
        beta_month_epi_param_flat__ = context__.vals_r("beta_month_epi_param");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= beta_month_epi_param_1dim__; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(beta_month_epi_param,
            beta_month_epi_param_flat__[(pos__ - 1)],
            "assigning variable beta_month_epi_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_month_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_week_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_week_epi_param_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_week_epi_param_flat__;
        current_statement__ = 11;
        beta_week_epi_param_flat__ = context__.vals_r("beta_week_epi_param");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= beta_week_epi_param_1dim__; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(beta_week_epi_param,
            beta_week_epi_param_flat__[(pos__ - 1)],
            "assigning variable beta_week_epi_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_week_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_holidays_epi_param =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_holidays_epi_param_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_holidays_epi_param_flat__;
        current_statement__ = 12;
        beta_holidays_epi_param_flat__ = context__.vals_r("beta_holidays_epi_param");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <=
             beta_holidays_epi_param_1dim__; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(beta_holidays_epi_param,
            beta_holidays_epi_param_flat__[(pos__ - 1)],
            "assigning variable beta_holidays_epi_param",
            stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_holidays_epi_param);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_init_centered_flat__;
        current_statement__ = 13;
        mu_init_centered_flat__ = context__.vals_r("mu_init_centered");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(mu_init_centered,
            mu_init_centered_flat__[(pos__ - 1)],
            "assigning variable mu_init_centered",
            stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_init_centered_flat__;
        current_statement__ = 14;
        nu_init_centered_flat__ = context__.vals_r("nu_init_centered");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(nu_init_centered,
            nu_init_centered_flat__[(pos__ - 1)],
            "assigning variable nu_init_centered",
            stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(nu_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> c_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c_init_centered_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> c_init_centered_flat__;
        current_statement__ = 15;
        c_init_centered_flat__ = context__.vals_r("c_init_centered");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= c_init_centered_1dim__; ++sym1__) {
          current_statement__ = 15;
          stan::model::assign(c_init_centered, c_init_centered_flat__[(pos__
            - 1)], "assigning variable c_init_centered",
            stan::model::index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(c_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> ctilde_init_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ctilde_init_centered_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ctilde_init_centered_flat__;
        current_statement__ = 16;
        ctilde_init_centered_flat__ = context__.vals_r("ctilde_init_centered");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= ctilde_init_centered_1dim__; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(ctilde_init_centered,
            ctilde_init_centered_flat__[(pos__ - 1)],
            "assigning variable ctilde_init_centered",
            stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(ctilde_init_centered);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, xi_mu_2dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_mu_flat__;
        current_statement__ = 17;
        xi_mu_flat__ = context__.vals_r("xi_mu");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= xi_mu_2dim__; ++sym1__) {
          current_statement__ = 17;
          for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
            current_statement__ = 17;
            stan::model::assign(xi_mu, xi_mu_flat__[(pos__ - 1)],
              "assigning variable xi_mu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 17;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_mu);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata,
          xi_nu_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_nu_flat__;
        current_statement__ = 18;
        xi_nu_flat__ = context__.vals_r("xi_nu");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= xi_nu_2dim__; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 18;
            stan::model::assign(xi_nu, xi_nu_flat__[(pos__ - 1)],
              "assigning variable xi_nu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_nu);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_cycle =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_cycle_1dim__,
          xi_cycle_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_cycle_flat__;
        current_statement__ = 19;
        xi_cycle_flat__ = context__.vals_r("xi_cycle");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= xi_cycle_2dim__; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= xi_cycle_1dim__; ++sym2__) {
            current_statement__ = 19;
            stan::model::assign(xi_cycle, xi_cycle_flat__[(pos__ - 1)],
              "assigning variable xi_cycle", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 19;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_cycle);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_ctilde =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_ctilde_1dim__,
          xi_ctilde_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_ctilde_flat__;
        current_statement__ = 20;
        xi_ctilde_flat__ = context__.vals_r("xi_ctilde");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= xi_ctilde_2dim__; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= xi_ctilde_1dim__; ++sym2__) {
            current_statement__ = 20;
            stan::model::assign(xi_ctilde, xi_ctilde_flat__[(pos__ - 1)],
              "assigning variable xi_ctilde", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_ctilde);
      local_scalar_t__ sd_mu = DUMMY_VAR__;
      current_statement__ = 21;
      sd_mu = context__.vals_r("sd_mu")[(1 - 1)];
      out__.write_free_lb(0, sd_mu);
      local_scalar_t__ sd_nu = DUMMY_VAR__;
      current_statement__ = 22;
      sd_nu = context__.vals_r("sd_nu")[(1 - 1)];
      out__.write_free_lb(0, sd_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_cycle =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_cycle_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_cycle_flat__;
        current_statement__ = 23;
        sd_cycle_flat__ = context__.vals_r("sd_cycle");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= sd_cycle_1dim__; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(sd_cycle, sd_cycle_flat__[(pos__ - 1)],
            "assigning variable sd_cycle", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_cycle);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_ctilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_ctilde_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_ctilde_flat__;
        current_statement__ = 24;
        sd_ctilde_flat__ = context__.vals_r("sd_ctilde");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= sd_ctilde_1dim__; ++sym1__) {
          current_statement__ = 24;
          stan::model::assign(sd_ctilde, sd_ctilde_flat__[(pos__ - 1)],
            "assigning variable sd_ctilde", stan::model::index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_ctilde);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_m =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_m_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_m_flat__;
        current_statement__ = 25;
        sd_m_flat__ = context__.vals_r("sd_m");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= sd_m_1dim__; ++sym1__) {
          current_statement__ = 25;
          stan::model::assign(sd_m, sd_m_flat__[(pos__ - 1)],
            "assigning variable sd_m", stan::model::index_uni(sym1__));
          current_statement__ = 25;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_m);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_dow_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_dow_epi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_dow_epi_flat__;
        current_statement__ = 26;
        sd_dow_epi_flat__ = context__.vals_r("sd_dow_epi");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= sd_dow_epi_1dim__; ++sym1__) {
          current_statement__ = 26;
          stan::model::assign(sd_dow_epi, sd_dow_epi_flat__[(pos__ - 1)],
            "assigning variable sd_dow_epi", stan::model::index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_dow_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_wkend_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_wkend_epi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_wkend_epi_flat__;
        current_statement__ = 27;
        sd_wkend_epi_flat__ = context__.vals_r("sd_wkend_epi");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= sd_wkend_epi_1dim__; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(sd_wkend_epi, sd_wkend_epi_flat__[(pos__ - 1)],
            "assigning variable sd_wkend_epi", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_wkend_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_dom_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_dom_epi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_dom_epi_flat__;
        current_statement__ = 28;
        sd_dom_epi_flat__ = context__.vals_r("sd_dom_epi");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= sd_dom_epi_1dim__; ++sym1__) {
          current_statement__ = 28;
          stan::model::assign(sd_dom_epi, sd_dom_epi_flat__[(pos__ - 1)],
            "assigning variable sd_dom_epi", stan::model::index_uni(sym1__));
          current_statement__ = 28;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_dom_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_month_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_month_epi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_month_epi_flat__;
        current_statement__ = 29;
        sd_month_epi_flat__ = context__.vals_r("sd_month_epi");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= sd_month_epi_1dim__; ++sym1__) {
          current_statement__ = 29;
          stan::model::assign(sd_month_epi, sd_month_epi_flat__[(pos__ - 1)],
            "assigning variable sd_month_epi", stan::model::index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_month_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_week_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_week_epi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_week_epi_flat__;
        current_statement__ = 30;
        sd_week_epi_flat__ = context__.vals_r("sd_week_epi");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= sd_week_epi_1dim__; ++sym1__) {
          current_statement__ = 30;
          stan::model::assign(sd_week_epi, sd_week_epi_flat__[(pos__ - 1)],
            "assigning variable sd_week_epi", stan::model::index_uni(sym1__));
          current_statement__ = 30;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_week_epi);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_holidays_epi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sd_holidays_epi_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sd_holidays_epi_flat__;
        current_statement__ = 31;
        sd_holidays_epi_flat__ = context__.vals_r("sd_holidays_epi");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= sd_holidays_epi_1dim__; ++sym1__) {
          current_statement__ = 31;
          stan::model::assign(sd_holidays_epi, sd_holidays_epi_flat__[(pos__
            - 1)], "assigning variable sd_holidays_epi",
            stan::model::index_uni(sym1__));
          current_statement__ = 31;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sd_holidays_epi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_intercept_centered", "phi_mu",
                "theta_mu", "nu_intercept_centered", "phi_nu",
                "lambda_cycle", "beta_dow_epi_param", "beta_wkend_epi_param",
                "beta_dom_epi_param", "beta_month_epi_param",
                "beta_week_epi_param", "beta_holidays_epi_param",
                "mu_init_centered", "nu_init_centered", "c_init_centered",
                "ctilde_init_centered", "xi_mu", "xi_nu", "xi_cycle",
                "xi_ctilde", "sd_mu", "sd_nu", "sd_cycle", "sd_ctilde",
                "sd_m", "sd_dow_epi", "sd_wkend_epi", "sd_dom_epi",
                "sd_month_epi", "sd_week_epi", "sd_holidays_epi"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"mu_intercept", "nu_intercept", "mu_init", "nu_init",
             "beta_dow_epi", "beta_wkend_epi", "beta_dom_epi",
             "beta_month_epi", "beta_week_epi", "beta_holidays_epi",
             "c_init", "ctilde_init", "m", "m_trans", "dist_val", "lprior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    tsize)},
                std::vector<size_t>{static_cast<size_t>(mu_p)},
                std::vector<size_t>{static_cast<size_t>(mu_q)},
                std::vector<size_t>{static_cast<size_t>(num_strata)},
                std::vector<size_t>{static_cast<size_t>(nu_p)},
                std::vector<size_t>{static_cast<size_t>(lambda_cycle_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      beta_dow_epi_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      beta_wkend_epi_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      beta_dom_epi_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      beta_month_epi_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      beta_week_epi_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      beta_holidays_epi_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(tsize)},
                std::vector<size_t>{static_cast<size_t>(num_strata)},
                std::vector<size_t>{static_cast<size_t>(
                                      c_init_centered_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      ctilde_init_centered_1dim__)},
                std::vector<size_t>{static_cast<size_t>(tsize),
                  static_cast<size_t>(xi_mu_2dim__)},
                std::vector<size_t>{static_cast<size_t>(num_strata),
                  static_cast<size_t>(xi_nu_2dim__)},
                std::vector<size_t>{static_cast<size_t>(xi_cycle_1dim__),
                  static_cast<size_t>(xi_cycle_2dim__)},
                std::vector<size_t>{static_cast<size_t>(xi_ctilde_1dim__),
                  static_cast<size_t>(xi_ctilde_2dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(sd_cycle_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_ctilde_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_m_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_dow_epi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_wkend_epi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_dom_epi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_month_epi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sd_week_epi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(
                                      sd_holidays_epi_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(tsize)},
             std::vector<size_t>{static_cast<size_t>(num_strata)},
             std::vector<size_t>{static_cast<size_t>(tsize)},
             std::vector<size_t>{static_cast<size_t>(num_strata)},
             std::vector<size_t>{static_cast<size_t>(beta_dow_epi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(beta_wkend_epi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(beta_dom_epi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(beta_month_epi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(beta_week_epi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(beta_holidays_epi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(c_init_1dim__)},
             std::vector<size_t>{static_cast<size_t>(ctilde_init_1dim__)},
             std::vector<size_t>{static_cast<size_t>(tsize),
               static_cast<size_t>(num_steps)},
             std::vector<size_t>{static_cast<size_t>(tsize),
               static_cast<size_t>(num_steps)},
             std::vector<size_t>{static_cast<size_t>(n_rows)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_intercept_centered" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_q; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_intercept_centered" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nu_p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_cycle_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_cycle" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_dow_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_dow_epi_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_wkend_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_wkend_epi_param" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_dom_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_dom_epi_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_month_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_month_epi_param" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_week_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_week_epi_param" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_holidays_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_holidays_epi_param" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_init_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_init_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= c_init_centered_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "c_init_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ctilde_init_centered_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "ctilde_init_centered" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_mu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_nu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_cycle_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_cycle_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_cycle" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_ctilde_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_ctilde_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_ctilde" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sd_mu");
    param_names__.emplace_back(std::string() + "sd_nu");
    for (int sym1__ = 1; sym1__ <= sd_cycle_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_cycle" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_ctilde_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_ctilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_m_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_m" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_dow_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_dow_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_wkend_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_wkend_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_dom_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_dom_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_month_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_month_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_week_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_week_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_holidays_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_holidays_epi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_intercept" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        param_names__.emplace_back(std::string() + "nu_intercept" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        param_names__.emplace_back(std::string() + "nu_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_dow_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_dow_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_wkend_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_wkend_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_dom_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_dom_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_month_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_month_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_week_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_week_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_holidays_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_holidays_epi" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= c_init_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "c_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ctilde_init_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "ctilde_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
          param_names__.emplace_back(std::string() + "m" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_trans" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "dist_val" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_intercept_centered" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_q; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_intercept_centered" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nu_p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_cycle_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_cycle" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_dow_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_dow_epi_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_wkend_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_wkend_epi_param" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_dom_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_dom_epi_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_month_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_month_epi_param" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_week_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_week_epi_param" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_holidays_epi_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_holidays_epi_param" +
        '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_init_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_init_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= c_init_centered_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "c_init_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ctilde_init_centered_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "ctilde_init_centered" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_mu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_nu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_cycle_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_cycle_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_cycle" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_ctilde_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_ctilde_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_ctilde" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sd_mu");
    param_names__.emplace_back(std::string() + "sd_nu");
    for (int sym1__ = 1; sym1__ <= sd_cycle_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_cycle" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_ctilde_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_ctilde" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_m_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_m" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_dow_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_dow_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_wkend_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_wkend_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_dom_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_dom_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_month_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_month_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_week_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_week_epi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sd_holidays_epi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sd_holidays_epi" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_intercept" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        param_names__.emplace_back(std::string() + "nu_intercept" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
        param_names__.emplace_back(std::string() + "nu_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_dow_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_dow_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_wkend_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_wkend_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_dom_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_dom_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_month_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_month_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_week_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_week_epi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_holidays_epi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta_holidays_epi" + '.'
          + std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= c_init_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "c_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ctilde_init_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "ctilde_init" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
          param_names__.emplace_back(std::string() + "m" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_trans" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "dist_val" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_intercept_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"phi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_p) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_q) + "},\"block\":\"parameters\"},{\"name\":\"nu_intercept_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"phi_nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nu_p) + "},\"block\":\"parameters\"},{\"name\":\"lambda_cycle\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_cycle_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_dow_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dow_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_wkend_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_wkend_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_dom_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dom_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_month_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_month_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_week_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_week_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_holidays_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_holidays_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"nu_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"c_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c_init_centered_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"ctilde_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ctilde_init_centered_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(xi_mu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_strata) + ",\"cols\":" + std::to_string(xi_nu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_cycle\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_cycle_1dim__) + ",\"cols\":" + std::to_string(xi_cycle_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_ctilde\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_ctilde_1dim__) + ",\"cols\":" + std::to_string(xi_ctilde_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_cycle\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_cycle_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_ctilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_ctilde_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_m_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_dow_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_dow_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_wkend_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_wkend_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_dom_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_dom_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_month_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_month_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_week_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_week_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_holidays_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_holidays_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_dow_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dow_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_wkend_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_wkend_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_dom_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dom_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_month_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_month_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_week_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_week_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_holidays_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_holidays_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c_init_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ctilde_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ctilde_init_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m_trans\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dist_val\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_rows) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_intercept_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"phi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_p) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_q) + "},\"block\":\"parameters\"},{\"name\":\"nu_intercept_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"phi_nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nu_p) + "},\"block\":\"parameters\"},{\"name\":\"lambda_cycle\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_cycle_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_dow_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dow_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_wkend_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_wkend_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_dom_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dom_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_month_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_month_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_week_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_week_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta_holidays_epi_param\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_holidays_epi_param_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"nu_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"c_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c_init_centered_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"ctilde_init_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ctilde_init_centered_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(xi_mu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_strata) + ",\"cols\":" + std::to_string(xi_nu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_cycle\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_cycle_1dim__) + ",\"cols\":" + std::to_string(xi_cycle_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_ctilde\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_ctilde_1dim__) + ",\"cols\":" + std::to_string(xi_ctilde_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_cycle\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_cycle_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_ctilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_ctilde_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_m\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_m_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_dow_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_dow_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_wkend_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_wkend_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_dom_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_dom_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_month_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_month_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_week_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_week_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_holidays_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_holidays_epi_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_dow_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dow_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_wkend_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_wkend_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_dom_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_dom_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_month_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_month_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_week_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_week_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_holidays_epi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_holidays_epi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c_init_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ctilde_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ctilde_init_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"m_trans\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dist_val\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_rows) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((((((((((((((tsize + mu_p) +
      mu_q) + num_strata) + nu_p) + lambda_cycle_1dim__) +
      beta_dow_epi_param_1dim__) + beta_wkend_epi_param_1dim__) +
      beta_dom_epi_param_1dim__) + beta_month_epi_param_1dim__) +
      beta_week_epi_param_1dim__) + beta_holidays_epi_param_1dim__) + tsize)
      + num_strata) + c_init_centered_1dim__) + ctilde_init_centered_1dim__)
      + (tsize * xi_mu_2dim__)) + (num_strata * xi_nu_2dim__)) +
      (xi_cycle_1dim__ * xi_cycle_2dim__)) + (xi_ctilde_1dim__ *
      xi_ctilde_2dim__)) + 1) + 1) + sd_cycle_1dim__) + sd_ctilde_1dim__) +
      sd_m_1dim__) + sd_dow_epi_1dim__) + sd_wkend_epi_1dim__) +
      sd_dom_epi_1dim__) + sd_month_epi_1dim__) + sd_week_epi_1dim__) +
      sd_holidays_epi_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((tsize + num_strata) + tsize) + num_strata) +
      beta_dow_epi_1dim__) + beta_wkend_epi_1dim__) + beta_dom_epi_1dim__) +
      beta_month_epi_1dim__) + beta_week_epi_1dim__) +
      beta_holidays_epi_1dim__) + c_init_1dim__) + ctilde_init_1dim__) +
      (tsize * num_steps)) + (tsize * num_steps)) + n_rows) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((((((((((((((tsize + mu_p) +
      mu_q) + num_strata) + nu_p) + lambda_cycle_1dim__) +
      beta_dow_epi_param_1dim__) + beta_wkend_epi_param_1dim__) +
      beta_dom_epi_param_1dim__) + beta_month_epi_param_1dim__) +
      beta_week_epi_param_1dim__) + beta_holidays_epi_param_1dim__) + tsize)
      + num_strata) + c_init_centered_1dim__) + ctilde_init_centered_1dim__)
      + (tsize * xi_mu_2dim__)) + (num_strata * xi_nu_2dim__)) +
      (xi_cycle_1dim__ * xi_cycle_2dim__)) + (xi_ctilde_1dim__ *
      xi_ctilde_2dim__)) + 1) + 1) + sd_cycle_1dim__) + sd_ctilde_1dim__) +
      sd_m_1dim__) + sd_dow_epi_1dim__) + sd_wkend_epi_1dim__) +
      sd_dom_epi_1dim__) + sd_month_epi_1dim__) + sd_week_epi_1dim__) +
      sd_holidays_epi_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((tsize + num_strata) + tsize) + num_strata) +
      beta_dow_epi_1dim__) + beta_wkend_epi_1dim__) + beta_dom_epi_1dim__) +
      beta_month_epi_1dim__) + beta_week_epi_1dim__) +
      beta_holidays_epi_1dim__) + c_init_1dim__) + ctilde_init_1dim__) +
      (tsize * num_steps)) + (tsize * num_steps)) + n_rows) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nowcasting_namespace::model_nowcasting;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nowcasting_namespace::profiles__;
}
#endif
#endif
