// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "diseasenowcasting_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_block_diagonal
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>,                 stan::base_type_t<double>>,-1,-1> create_block_diagonal(const Eigen::Matrix<double,-1,-1>& A, const Eigen::Matrix<double,-1,-1>& B, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_block_diagonal(SEXP ASEXP, SEXP BSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double,-1,-1>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Matrix<double,-1,-1>& >::type B(BSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_block_diagonal(A, B, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// rep_diagonal_mat
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,-1> rep_diagonal_mat(const Eigen::Matrix<double,-1,-1>& A, const int& k, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_rep_diagonal_mat(SEXP ASEXP, SEXP kSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double,-1,-1>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(rep_diagonal_mat(A, k, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// rep_vec
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> rep_vec(const Eigen::Matrix<double,-1,1>& A, const int& k, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_rep_vec(SEXP ASEXP, SEXP kSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double,-1,1>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(rep_vec(A, k, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_matrix_block_A
Eigen::Matrix<double,-1,-1> create_trend_matrix_block_A(const int& k, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_matrix_block_A(SEXP kSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_matrix_block_A(k, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_vector_block_L
Eigen::Matrix<double,-1,1> create_trend_vector_block_L(const int& k, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_vector_block_L(SEXP kSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_vector_block_L(k, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_matrix_block_R
Eigen::Matrix<double,-1,-1> create_trend_matrix_block_R(const int& k, const int& is_constant, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_matrix_block_R(SEXP kSEXP, SEXP is_constantSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type is_constant(is_constantSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_matrix_block_R(k, is_constant, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_initial_trend_vector_block_alpha
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> create_initial_trend_vector_block_alpha(const Eigen::Matrix<double,-1,1>& alpha, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_initial_trend_vector_block_alpha(SEXP alphaSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double,-1,1>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_initial_trend_vector_block_alpha(alpha, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_matrix_A
Eigen::Matrix<double,-1,-1> create_trend_matrix_A(const int& k, const int& d, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_matrix_A(SEXP kSEXP, SEXP dSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_matrix_A(k, d, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_matrix_R
Eigen::Matrix<double,-1,-1> create_trend_matrix_R(const int& k, const int& is_constant, const int& d, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_matrix_R(SEXP kSEXP, SEXP is_constantSEXP, SEXP dSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type is_constant(is_constantSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_matrix_R(k, is_constant, d, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_vector_L
Eigen::Matrix<double,-1,1> create_trend_vector_L(const int& k, const int& d, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_vector_L(SEXP kSEXP, SEXP dSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_vector_L(k, d, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// create_trend_vector_alpha
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> create_trend_vector_alpha(const Eigen::Matrix<double,-1,1>& alpha, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_create_trend_vector_alpha(SEXP alphaSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Matrix<double,-1,1>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(create_trend_vector_alpha(alpha, pstream__));
    return rcpp_result_gen;
END_RCPP
}
// get_num_elements_alpha_trend
int get_num_elements_alpha_trend(const int& k, const int& d, std::ostream* pstream__);
RcppExport SEXP _diseasenowcasting_get_num_elements_alpha_trend(SEXP kSEXP, SEXP dSEXP, SEXP pstream__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::ostream* >::type pstream__(pstream__SEXP);
    rcpp_result_gen = Rcpp::wrap(get_num_elements_alpha_trend(k, d, pstream__));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4nowcast_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_diseasenowcasting_create_block_diagonal", (DL_FUNC) &_diseasenowcasting_create_block_diagonal, 3},
    {"_diseasenowcasting_rep_diagonal_mat", (DL_FUNC) &_diseasenowcasting_rep_diagonal_mat, 3},
    {"_diseasenowcasting_rep_vec", (DL_FUNC) &_diseasenowcasting_rep_vec, 3},
    {"_diseasenowcasting_create_trend_matrix_block_A", (DL_FUNC) &_diseasenowcasting_create_trend_matrix_block_A, 2},
    {"_diseasenowcasting_create_trend_vector_block_L", (DL_FUNC) &_diseasenowcasting_create_trend_vector_block_L, 2},
    {"_diseasenowcasting_create_trend_matrix_block_R", (DL_FUNC) &_diseasenowcasting_create_trend_matrix_block_R, 3},
    {"_diseasenowcasting_create_initial_trend_vector_block_alpha", (DL_FUNC) &_diseasenowcasting_create_initial_trend_vector_block_alpha, 2},
    {"_diseasenowcasting_create_trend_matrix_A", (DL_FUNC) &_diseasenowcasting_create_trend_matrix_A, 3},
    {"_diseasenowcasting_create_trend_matrix_R", (DL_FUNC) &_diseasenowcasting_create_trend_matrix_R, 4},
    {"_diseasenowcasting_create_trend_vector_L", (DL_FUNC) &_diseasenowcasting_create_trend_vector_L, 3},
    {"_diseasenowcasting_create_trend_vector_alpha", (DL_FUNC) &_diseasenowcasting_create_trend_vector_alpha, 2},
    {"_diseasenowcasting_get_num_elements_alpha_trend", (DL_FUNC) &_diseasenowcasting_get_num_elements_alpha_trend, 3},
    {"_rcpp_module_boot_stan_fit4nowcast_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4nowcast_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_diseasenowcasting(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
