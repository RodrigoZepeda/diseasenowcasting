// Generated by rstantools.  Do not edit by hand.

#ifndef LICENSE_INCLUDED
#define LICENSE_INCLUDED
/*
    diseasenowcasting is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    diseasenowcasting is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with diseasenowcasting.  If not, see <http://www.gnu.org/licenses/>.
*/
#endif //LICENSE_INCLUDED
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_nowcasting_v2_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 211> locations_array__ =
  {" (found before start of program)",
  " (in 'nowcasting_v2', line 443, column 0 to column 27)",
  " (in 'nowcasting_v2', line 444, column 0 to column 38)",
  " (in 'nowcasting_v2', line 445, column 0 to column 40)",
  " (in 'nowcasting_v2', line 447, column 0 to column 32)",
  " (in 'nowcasting_v2', line 448, column 0 to column 42)",
  " (in 'nowcasting_v2', line 450, column 0 to column 22)",
  " (in 'nowcasting_v2', line 451, column 0 to column 27)",
  " (in 'nowcasting_v2', line 453, column 0 to column 35)",
  " (in 'nowcasting_v2', line 454, column 0 to column 41)",
  " (in 'nowcasting_v2', line 456, column 0 to column 20)",
  " (in 'nowcasting_v2', line 457, column 0 to column 20)",
  " (in 'nowcasting_v2', line 458, column 0 to column 19)",
  " (in 'nowcasting_v2', line 462, column 2 to line 464, column 32)",
  " (in 'nowcasting_v2', line 465, column 2 to column 28)",
  " (in 'nowcasting_v2', line 471, column 0 to column 16)",
  " (in 'nowcasting_v2', line 467, column 4 to column 111)",
  " (in 'nowcasting_v2', line 466, column 2 to line 467, column 111)",
  " (in 'nowcasting_v2', line 474, column 0 to column 81)",
  " (in 'nowcasting_v2', line 475, column 0 to column 61)",
  " (in 'nowcasting_v2', line 476, column 0 to column 63)",
  " (in 'nowcasting_v2', line 477, column 0 to column 60)",
  " (in 'nowcasting_v2', line 479, column 0 to column 81)",
  " (in 'nowcasting_v2', line 480, column 0 to column 61)",
  " (in 'nowcasting_v2', line 481, column 0 to column 60)",
  " (in 'nowcasting_v2', line 483, column 0 to column 44)",
  " (in 'nowcasting_v2', line 484, column 0 to column 44)",
  " (in 'nowcasting_v2', line 486, column 0 to column 109)",
  " (in 'nowcasting_v2', line 487, column 0 to column 109)",
  " (in 'nowcasting_v2', line 488, column 0 to column 104)",
  " (in 'nowcasting_v2', line 494, column 6 to column 40)",
  " (in 'nowcasting_v2', line 493, column 4 to line 494, column 40)",
  " (in 'nowcasting_v2', line 496, column 4 to column 21)",
  " (in 'nowcasting_v2', line 359, column 2 to column 25)",
  " (in 'nowcasting_v2', line 360, column 2 to column 26)",
  " (in 'nowcasting_v2', line 361, column 2 to column 26)",
  " (in 'nowcasting_v2', line 362, column 2 to column 22)",
  " (in 'nowcasting_v2', line 364, column 8 to column 14)",
  " (in 'nowcasting_v2', line 364, column 2 to column 32)",
  " (in 'nowcasting_v2', line 365, column 8 to column 14)",
  " (in 'nowcasting_v2', line 365, column 2 to column 27)",
  " (in 'nowcasting_v2', line 393, column 2 to column 20)",
  " (in 'nowcasting_v2', line 394, column 2 to column 20)",
  " (in 'nowcasting_v2', line 395, column 2 to column 20)",
  " (in 'nowcasting_v2', line 398, column 2 to column 21)",
  " (in 'nowcasting_v2', line 399, column 2 to column 30)",
  " (in 'nowcasting_v2', line 400, column 2 to column 21)",
  " (in 'nowcasting_v2', line 401, column 2 to column 30)",
  " (in 'nowcasting_v2', line 402, column 2 to column 28)",
  " (in 'nowcasting_v2', line 403, column 2 to column 37)",
  " (in 'nowcasting_v2', line 404, column 2 to column 20)",
  " (in 'nowcasting_v2', line 405, column 2 to column 29)",
  " (in 'nowcasting_v2', line 407, column 2 to column 21)",
  " (in 'nowcasting_v2', line 408, column 2 to column 30)",
  " (in 'nowcasting_v2', line 409, column 2 to column 28)",
  " (in 'nowcasting_v2', line 410, column 2 to column 37)",
  " (in 'nowcasting_v2', line 411, column 2 to column 20)",
  " (in 'nowcasting_v2', line 412, column 2 to column 29)",
  " (in 'nowcasting_v2', line 414, column 2 to column 21)",
  " (in 'nowcasting_v2', line 415, column 2 to column 30)",
  " (in 'nowcasting_v2', line 416, column 2 to column 21)",
  " (in 'nowcasting_v2', line 417, column 2 to column 30)",
  " (in 'nowcasting_v2', line 418, column 2 to column 20)",
  " (in 'nowcasting_v2', line 419, column 2 to column 29)",
  " (in 'nowcasting_v2', line 423, column 2 to column 34)",
  " (in 'nowcasting_v2', line 425, column 9 to column 19)",
  " (in 'nowcasting_v2', line 425, column 21 to column 31)",
  " (in 'nowcasting_v2', line 425, column 2 to column 42)",
  " (in 'nowcasting_v2', line 426, column 9 to column 19)",
  " (in 'nowcasting_v2', line 426, column 21 to column 31)",
  " (in 'nowcasting_v2', line 426, column 2 to column 42)",
  " (in 'nowcasting_v2', line 430, column 0 to column 41)",
  " (in 'nowcasting_v2', line 432, column 0 to column 34)",
  " (in 'nowcasting_v2', line 434, column 0 to column 21)",
  " (in 'nowcasting_v2', line 436, column 0 to column 14)",
  " (in 'nowcasting_v2', line 437, column 0 to column 14)",
  " (in 'nowcasting_v2', line 438, column 0 to column 14)",
  " (in 'nowcasting_v2', line 443, column 7 to column 12)",
  " (in 'nowcasting_v2', line 444, column 25 to column 29)",
  " (in 'nowcasting_v2', line 445, column 25 to column 29)",
  " (in 'nowcasting_v2', line 447, column 7 to column 17)",
  " (in 'nowcasting_v2', line 448, column 25 to column 33)",
  " (in 'nowcasting_v2', line 450, column 7 to column 12)",
  " (in 'nowcasting_v2', line 451, column 7 to column 17)",
  " (in 'nowcasting_v2', line 453, column 7 to column 12)",
  " (in 'nowcasting_v2', line 453, column 14 to column 27)",
  " (in 'nowcasting_v2', line 454, column 7 to column 17)",
  " (in 'nowcasting_v2', line 454, column 19 to column 33)",
  " (in 'nowcasting_v2', line 462, column 9 to column 14)",
  " (in 'nowcasting_v2', line 462, column 16 to column 25)",
  " (in 'nowcasting_v2', line 465, column 8 to column 14)",
  " (in 'nowcasting_v2', line 31, column 4 to column 13)",
  " (in 'nowcasting_v2', line 30, column 9 to line 32, column 3)",
  " (in 'nowcasting_v2', line 29, column 4 to column 13)",
  " (in 'nowcasting_v2', line 28, column 12 to line 30, column 3)",
  " (in 'nowcasting_v2', line 28, column 2 to line 32, column 3)",
  " (in 'nowcasting_v2', line 33, column 2 to column 41)",
  " (in 'nowcasting_v2', line 34, column 2 to column 11)",
  " (in 'nowcasting_v2', line 17, column 25 to line 35, column 1)",
  " (in 'nowcasting_v2', line 50, column 4 to column 13)",
  " (in 'nowcasting_v2', line 49, column 9 to line 51, column 3)",
  " (in 'nowcasting_v2', line 48, column 4 to column 13)",
  " (in 'nowcasting_v2', line 47, column 12 to line 49, column 3)",
  " (in 'nowcasting_v2', line 47, column 2 to line 51, column 3)",
  " (in 'nowcasting_v2', line 52, column 2 to column 41)",
  " (in 'nowcasting_v2', line 53, column 2 to column 11)",
  " (in 'nowcasting_v2', line 36, column 25 to line 54, column 1)",
  " (in 'nowcasting_v2', line 81, column 2 to column 84)",
  " (in 'nowcasting_v2', line 55, column 45 to line 82, column 1)",
  " (in 'nowcasting_v2', line 114, column 2 to column 29)",
  " (in 'nowcasting_v2', line 83, column 48 to line 115, column 1)",
  " (in 'nowcasting_v2', line 131, column 2 to column 36)",
  " (in 'nowcasting_v2', line 116, column 32 to line 132, column 1)",
  " (in 'nowcasting_v2', line 147, column 2 to column 38)",
  " (in 'nowcasting_v2', line 133, column 36 to line 148, column 1)",
  " (in 'nowcasting_v2', line 158, column 9 to column 26)",
  " (in 'nowcasting_v2', line 158, column 28 to column 45)",
  " (in 'nowcasting_v2', line 158, column 2 to column 103)",
  " (in 'nowcasting_v2', line 160, column 2 to column 29)",
  " (in 'nowcasting_v2', line 162, column 2 to column 77)",
  " (in 'nowcasting_v2', line 163, column 2 to column 11)",
  " (in 'nowcasting_v2', line 149, column 48 to line 164, column 1)",
  " (in 'nowcasting_v2', line 174, column 9 to column 18)",
  " (in 'nowcasting_v2', line 174, column 20 to column 29)",
  " (in 'nowcasting_v2', line 174, column 2 to column 71)",
  " (in 'nowcasting_v2', line 177, column 4 to column 76)",
  " (in 'nowcasting_v2', line 176, column 16 to line 178, column 3)",
  " (in 'nowcasting_v2', line 176, column 2 to line 178, column 3)",
  " (in 'nowcasting_v2', line 179, column 2 to column 11)",
  " (in 'nowcasting_v2', line 165, column 40 to line 180, column 1)",
  " (in 'nowcasting_v2', line 190, column 9 to column 26)",
  " (in 'nowcasting_v2', line 190, column 2 to column 30)",
  " (in 'nowcasting_v2', line 193, column 4 to column 59)",
  " (in 'nowcasting_v2', line 192, column 16 to line 194, column 3)",
  " (in 'nowcasting_v2', line 192, column 2 to line 194, column 3)",
  " (in 'nowcasting_v2', line 195, column 2 to column 11)",
  " (in 'nowcasting_v2', line 181, column 31 to line 196, column 1)",
  " (in 'nowcasting_v2', line 214, column 2 to column 26)",
  " (in 'nowcasting_v2', line 215, column 9 to column 12)",
  " (in 'nowcasting_v2', line 215, column 2 to column 16)",
  " (in 'nowcasting_v2', line 218, column 4 to column 51)",
  " (in 'nowcasting_v2', line 217, column 16 to line 219, column 3)",
  " (in 'nowcasting_v2', line 217, column 2 to line 219, column 3)",
  " (in 'nowcasting_v2', line 220, column 2 to column 11)",
  " (in 'nowcasting_v2', line 197, column 41 to line 221, column 1)",
  " (in 'nowcasting_v2', line 234, column 10 to column 29)",
  " (in 'nowcasting_v2', line 234, column 2 to column 33)",
  " (in 'nowcasting_v2', line 237, column 4 to column 29)",
  " (in 'nowcasting_v2', line 236, column 2 to line 237, column 29)",
  " (in 'nowcasting_v2', line 239, column 2 to column 27)",
  " (in 'nowcasting_v2', line 240, column 2 to column 11)",
  " (in 'nowcasting_v2', line 222, column 43 to line 241, column 1)",
  " (in 'nowcasting_v2', line 254, column 10 to column 29)",
  " (in 'nowcasting_v2', line 254, column 2 to column 33)",
  " (in 'nowcasting_v2', line 257, column 4 to column 29)",
  " (in 'nowcasting_v2', line 256, column 2 to line 257, column 29)",
  " (in 'nowcasting_v2', line 259, column 2 to column 13)",
  " (in 'nowcasting_v2', line 260, column 2 to column 11)",
  " (in 'nowcasting_v2', line 242, column 43 to line 261, column 1)",
  " (in 'nowcasting_v2', line 273, column 9 to column 24)",
  " (in 'nowcasting_v2', line 273, column 2 to column 28)",
  " (in 'nowcasting_v2', line 275, column 4 to column 51)",
  " (in 'nowcasting_v2', line 274, column 2 to line 275, column 51)",
  " (in 'nowcasting_v2', line 276, column 2 to column 11)",
  " (in 'nowcasting_v2', line 262, column 34 to line 277, column 1)",
  " (in 'nowcasting_v2', line 289, column 2 to column 31)",
  " (in 'nowcasting_v2', line 278, column 34 to line 290, column 1)",
  " (in 'nowcasting_v2', line 315, column 2 to column 36)",
  " (in 'nowcasting_v2', line 317, column 9 to column 14)",
  " (in 'nowcasting_v2', line 317, column 16 to column 29)",
  " (in 'nowcasting_v2', line 317, column 2 to column 54)",
  " (in 'nowcasting_v2', line 318, column 9 to column 19)",
  " (in 'nowcasting_v2', line 318, column 21 to column 35)",
  " (in 'nowcasting_v2', line 318, column 2 to column 60)",
  " (in 'nowcasting_v2', line 319, column 9 to column 17)",
  " (in 'nowcasting_v2', line 319, column 2 to column 55)",
  " (in 'nowcasting_v2', line 320, column 9 to column 17)",
  " (in 'nowcasting_v2', line 320, column 2 to column 61)",
  " (in 'nowcasting_v2', line 321, column 9 to column 17)",
  " (in 'nowcasting_v2', line 321, column 2 to column 55)",
  " (in 'nowcasting_v2', line 323, column 9 to column 14)",
  " (in 'nowcasting_v2', line 323, column 16 to column 25)",
  " (in 'nowcasting_v2', line 323, column 2 to column 65)",
  " (in 'nowcasting_v2', line 324, column 9 to column 14)",
  " (in 'nowcasting_v2', line 324, column 16 to column 25)",
  " (in 'nowcasting_v2', line 324, column 2 to column 66)",
  " (in 'nowcasting_v2', line 325, column 9 to column 19)",
  " (in 'nowcasting_v2', line 325, column 21 to column 31)",
  " (in 'nowcasting_v2', line 325, column 2 to column 78)",
  " (in 'nowcasting_v2', line 327, column 2 to column 19)",
  " (in 'nowcasting_v2', line 328, column 2 to column 19)",
  " (in 'nowcasting_v2', line 333, column 6 to column 82)",
  " (in 'nowcasting_v2', line 331, column 33 to line 334, column 5)",
  " (in 'nowcasting_v2', line 331, column 4 to line 334, column 5)",
  " (in 'nowcasting_v2', line 330, column 21 to line 335, column 3)",
  " (in 'nowcasting_v2', line 330, column 2 to line 335, column 3)",
  " (in 'nowcasting_v2', line 340, column 6 to column 45)",
  " (in 'nowcasting_v2', line 342, column 6 to column 121)",
  " (in 'nowcasting_v2', line 338, column 32 to line 343, column 5)",
  " (in 'nowcasting_v2', line 338, column 4 to line 343, column 5)",
  " (in 'nowcasting_v2', line 337, column 20 to line 344, column 3)",
  " (in 'nowcasting_v2', line 337, column 2 to line 344, column 3)",
  " (in 'nowcasting_v2', line 346, column 2 to column 57)",
  " (in 'nowcasting_v2', line 347, column 2 to column 11)",
  " (in 'nowcasting_v2', line 304, column 3 to line 348, column 1)",
  " (in 'nowcasting_v2', line 351, column 10 to column 16)",
  " (in 'nowcasting_v2', line 351, column 4 to column 29)",
  " (in 'nowcasting_v2', line 353, column 6 to column 94)",
  " (in 'nowcasting_v2', line 352, column 4 to line 353, column 94)",
  " (in 'nowcasting_v2', line 354, column 4 to column 17)",
  " (in 'nowcasting_v2', line 350, column 23 to line 355, column 1)"};
int max_int(const int& a, const int& b, std::ostream* pstream__);
int min_int(const int& a, const int& b, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
AR(const T0__& y_arg__, const T1__& phi_arg__, const int& t, const int& p,
   std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
MA(const T0__& xi_arg__, const T1__& theta_arg__, const int& t, const int& q,
   std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_phi_AR(const T0__& phi_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_theta_MA(const T0__& theta_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_val_2_vec(const T0__& A_arg__, const T1__& val, std::ostream*
                 pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
append_vec_2_val(const T0__& val, const T1__& A_arg__, std::ostream*
                 pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rowwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
colwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__);
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_col_vector<T12__>,
                              stan::is_vt_not_complex<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_eigen_matrix_dynamic<T15__>,
                              stan::is_vt_not_complex<T15__>,
                              stan::is_eigen_matrix_dynamic<T16__>,
                              stan::is_vt_not_complex<T16__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                stan::promote_args_t<stan::base_type_t<T11__>,
                  stan::base_type_t<T12__>, T13__, T14__,
                  stan::base_type_t<T15__>,
                  stan::promote_args_t<stan::base_type_t<T16__>>>>,-1,-1>
state_space_model(const int& num_steps, const int& num_delays, const int&
                  num_strata, const T3__& phi_mu_arg__, const T4__&
                  theta_mu_arg__, const T5__& phi_nu_arg__, const T6__&
                  mu_intercept_arg__, const T7__& nu_intercept_arg__,
                  const int& mu_p, const int& mu_q, const int& nu_p,
                  const T11__& mu_init_arg__, const T12__& nu_init_arg__,
                  const T13__& sd_mu, const T14__& sd_nu, const T15__&
                  xi_mu_arg__, const T16__& xi_nu_arg__, std::ostream*
                  pstream__);
template <typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
std::vector<stan::promote_args_t<stan::base_type_t<T2__>>>
observed_mean(const int& n_rows, const int& num_delays, const T2__& m_arg__,
              const std::vector<std::vector<int>>& case_idx, const int&
              s_col, const int& d_col, const int& t_col, std::ostream*
              pstream__);
int max_int(const int& a, const int& b, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 95;
    if (stan::math::logical_gt(a, b)) {
      current_statement__ = 93;
      return a;
    } else {
      current_statement__ = 91;
      return b;
    }
    current_statement__ = 96;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__, "Error in `max_int` function.");
    throw std::domain_error(errmsg_stream__.str());
    current_statement__ = 97;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int min_int(const int& a, const int& b, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 103;
    if (stan::math::logical_gt(a, b)) {
      current_statement__ = 101;
      return b;
    } else {
      current_statement__ = 99;
      return a;
    }
    current_statement__ = 104;
    std::stringstream errmsg_stream__;
    stan::math::stan_print(&errmsg_stream__, "Error in `min_int` function.");
    throw std::domain_error(errmsg_stream__.str());
    current_statement__ = 105;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
AR(const T0__& y_arg__, const T1__& phi_arg__, const int& t, const int& p,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& phi = stan::math::to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 107;
    return stan::math::multiply(
             stan::model::rvalue(y, "y", stan::model::index_omni(),
               stan::model::index_min_max(((t + 1) -
                 min_int(t, (p + 1), pstream__)), t)),
             stan::model::rvalue(phi, "phi",
               stan::model::index_min_max(((p + 2) -
                 min_int(t, (p + 1), pstream__)), (p + 1))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
MA(const T0__& xi_arg__, const T1__& theta_arg__, const int& t, const int& q,
   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xi = stan::math::to_ref(xi_arg__);
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 109;
    return AR(xi, theta, t, q, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_phi_AR(const T0__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& phi = stan::math::to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 111;
    return append_val_2_vec(phi, 0.0, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_theta_MA(const T0__& theta_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 113;
    return append_val_2_vec(theta, 1.0, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  const auto& B = stan::math::to_ref(B_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 115;
    stan::math::validate_non_negative_index("C", "rows(A) + rows(B)",
      (stan::math::rows(A) + stan::math::rows(B)));
    current_statement__ = 116;
    stan::math::validate_non_negative_index("C", "cols(A) + cols(B)",
      (stan::math::cols(A) + stan::math::cols(B)));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) +
        stan::math::rows(B)), (stan::math::cols(A) + stan::math::cols(B)),
        DUMMY_VAR__);
    current_statement__ = 117;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) + stan::math::rows(B)),
        (stan::math::cols(A) + stan::math::cols(B))), "assigning variable C");
    current_statement__ = 118;
    stan::model::assign(C, A, "assigning variable C",
      stan::model::index_min_max(1, stan::math::rows(A)),
      stan::model::index_min_max(1, stan::math::cols(A)));
    current_statement__ = 119;
    stan::model::assign(C, B, "assigning variable C",
      stan::model::index_min_max((stan::math::rows(A) + 1),
        (stan::math::rows(A) + stan::math::rows(B))),
      stan::model::index_min_max((stan::math::cols(A) + 1),
        (stan::math::cols(A) + stan::math::cols(B))));
    current_statement__ = 120;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 122;
    stan::math::validate_non_negative_index("C", "rows(A) * k",
      (stan::math::rows(A) * k));
    current_statement__ = 123;
    stan::math::validate_non_negative_index("C", "cols(A) * k",
      (stan::math::cols(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) *
        k), (stan::math::cols(A) * k), DUMMY_VAR__);
    current_statement__ = 124;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) * k),
        (stan::math::cols(A) * k)), "assigning variable C");
    current_statement__ = 127;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 125;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::rows(A)) + 1), (l
          * stan::math::rows(A))),
        stan::model::index_min_max((((l - 1) * stan::math::cols(A)) + 1), (l
          * stan::math::cols(A))));
    }
    current_statement__ = 128;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 130;
    stan::math::validate_non_negative_index("C", "num_elements(A) * k",
      (stan::math::num_elements(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) * k), DUMMY_VAR__);
    current_statement__ = 134;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 132;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::num_elements(A)) +
          1), (l * stan::math::num_elements(A))));
    }
    current_statement__ = 135;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 137;
    n = stan::math::num_elements(A);
    current_statement__ = 138;
    stan::math::validate_non_negative_index("C", "n * k", (n * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n * k), DUMMY_VAR__);
    current_statement__ = 142;
    for (int j = 1; j <= n; ++j) {
      current_statement__ = 140;
      stan::model::assign(C,
        stan::math::rep_vector(
          stan::model::rvalue(A, "A", stan::model::index_uni(j)), k),
        "assigning variable C",
        stan::model::index_min_max((((j - 1) * k) + 1), (k * j)));
    }
    current_statement__ = 143;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_val_2_vec(const T0__& A_arg__, const T1__& val, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 145;
    stan::math::validate_non_negative_index("B", "num_elements(A) + 1",
      (stan::math::num_elements(A) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) + 1), DUMMY_VAR__);
    current_statement__ = 148;
    if (stan::math::logical_gt(stan::math::num_elements(A), 0)) {
      current_statement__ = 147;
      stan::model::assign(B, A, "assigning variable B",
        stan::model::index_min_max(1, stan::math::num_elements(A)));
    }
    current_statement__ = 149;
    stan::model::assign(B, val, "assigning variable B",
      stan::model::index_uni(stan::math::num_elements(B)));
    current_statement__ = 150;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
append_vec_2_val(const T0__& val, const T1__& A_arg__, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 152;
    stan::math::validate_non_negative_index("B", "num_elements(A) + 1",
      (stan::math::num_elements(A) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) + 1), DUMMY_VAR__);
    current_statement__ = 155;
    if (stan::math::logical_gt(stan::math::num_elements(A), 0)) {
      current_statement__ = 154;
      stan::model::assign(B, A, "assigning variable B",
        stan::model::index_min_max(2, stan::math::num_elements(B)));
    }
    current_statement__ = 156;
    stan::model::assign(B, val, "assigning variable B",
      stan::model::index_uni(1));
    current_statement__ = 157;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rowwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 159;
    stan::math::validate_non_negative_index("B", "num_elements(A)",
      stan::math::num_elements(A));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                       A), DUMMY_VAR__);
    current_statement__ = 162;
    for (int d = 1; d <= stan::math::rows(A); ++d) {
      current_statement__ = 161;
      stan::model::assign(B,
        stan::math::transpose(
          stan::model::rvalue(A, "A", stan::model::index_uni(d),
            stan::model::index_omni())), "assigning variable B",
        stan::model::index_min_max(((stan::math::cols(A) * (d - 1)) + 1),
          (stan::math::cols(A) * d)));
    }
    current_statement__ = 163;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
colwise_mat_2_vec(const T0__& A_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 165;
    return rowwise_mat_2_vec(stan::math::transpose(A), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_col_vector<T12__>,
                              stan::is_vt_not_complex<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_eigen_matrix_dynamic<T15__>,
                              stan::is_vt_not_complex<T15__>,
                              stan::is_eigen_matrix_dynamic<T16__>,
                              stan::is_vt_not_complex<T16__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                stan::promote_args_t<stan::base_type_t<T11__>,
                  stan::base_type_t<T12__>, T13__, T14__,
                  stan::base_type_t<T15__>,
                  stan::promote_args_t<stan::base_type_t<T16__>>>>,-1,-1>
state_space_model(const int& num_steps, const int& num_delays, const int&
                  num_strata, const T3__& phi_mu_arg__, const T4__&
                  theta_mu_arg__, const T5__& phi_nu_arg__, const T6__&
                  mu_intercept_arg__, const T7__& nu_intercept_arg__,
                  const int& mu_p, const int& mu_q, const int& nu_p,
                  const T11__& mu_init_arg__, const T12__& nu_init_arg__,
                  const T13__& sd_mu, const T14__& sd_nu, const T15__&
                  xi_mu_arg__, const T16__& xi_nu_arg__, std::ostream*
                  pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::base_type_t<T7__>,
                             stan::promote_args_t<stan::base_type_t<T11__>,
                               stan::base_type_t<T12__>, T13__, T14__,
                               stan::base_type_t<T15__>,
                               stan::promote_args_t<stan::base_type_t<T16__>>>>;
  int current_statement__ = 0;
  const auto& phi_mu = stan::math::to_ref(phi_mu_arg__);
  const auto& theta_mu = stan::math::to_ref(theta_mu_arg__);
  const auto& phi_nu = stan::math::to_ref(phi_nu_arg__);
  const auto& mu_intercept = stan::math::to_ref(mu_intercept_arg__);
  const auto& nu_intercept = stan::math::to_ref(nu_intercept_arg__);
  const auto& mu_init = stan::math::to_ref(mu_init_arg__);
  const auto& nu_init = stan::math::to_ref(nu_init_arg__);
  const auto& xi_mu = stan::math::to_ref(xi_mu_arg__);
  const auto& xi_nu = stan::math::to_ref(xi_nu_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int tsize = std::numeric_limits<int>::min();
    current_statement__ = 167;
    tsize = (num_strata * num_delays);
    current_statement__ = 168;
    stan::math::validate_non_negative_index("error_mu", "tsize", tsize);
    current_statement__ = 169;
    stan::math::validate_non_negative_index("error_mu", "num_steps - 1",
      (num_steps - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> error_mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, (num_steps - 1),
        DUMMY_VAR__);
    current_statement__ = 170;
    stan::model::assign(error_mu, stan::math::multiply(sd_mu, xi_mu),
      "assigning variable error_mu");
    current_statement__ = 171;
    stan::math::validate_non_negative_index("error_nu", "num_strata",
      num_strata);
    current_statement__ = 172;
    stan::math::validate_non_negative_index("error_nu", "num_delays - 1",
      (num_delays - 1));
    Eigen::Matrix<local_scalar_t__,-1,-1> error_nu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, (num_delays
        - 1), DUMMY_VAR__);
    current_statement__ = 173;
    stan::model::assign(error_nu, stan::math::multiply(sd_nu, xi_nu),
      "assigning variable error_nu");
    current_statement__ = 174;
    stan::math::validate_non_negative_index("phi_mu_star", "mu_p + 1", (mu_p
      + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> phi_mu_star =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((mu_p + 1), DUMMY_VAR__);
    current_statement__ = 175;
    stan::model::assign(phi_mu_star, create_phi_AR(phi_mu, pstream__),
      "assigning variable phi_mu_star");
    current_statement__ = 176;
    stan::math::validate_non_negative_index("theta_mu_star", "mu_q + 1",
      (mu_q + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> theta_mu_star =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((mu_q + 1), DUMMY_VAR__);
    current_statement__ = 177;
    stan::model::assign(theta_mu_star, create_theta_MA(theta_mu, pstream__),
      "assigning variable theta_mu_star");
    current_statement__ = 178;
    stan::math::validate_non_negative_index("phi_nu_star", "nu_p + 1", (nu_p
      + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> phi_nu_star =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((nu_p + 1), DUMMY_VAR__);
    current_statement__ = 179;
    stan::model::assign(phi_nu_star, create_phi_AR(phi_nu, pstream__),
      "assigning variable phi_nu_star");
    current_statement__ = 180;
    stan::math::validate_non_negative_index("m", "tsize", tsize);
    current_statement__ = 181;
    stan::math::validate_non_negative_index("m", "num_steps", num_steps);
    Eigen::Matrix<local_scalar_t__,-1,-1> m =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
        DUMMY_VAR__);
    current_statement__ = 182;
    stan::model::assign(m, stan::math::rep_matrix(0.0, tsize, num_steps),
      "assigning variable m");
    current_statement__ = 183;
    stan::math::validate_non_negative_index("mu", "tsize", tsize);
    current_statement__ = 184;
    stan::math::validate_non_negative_index("mu", "num_steps", num_steps);
    Eigen::Matrix<local_scalar_t__,-1,-1> mu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
        DUMMY_VAR__);
    current_statement__ = 185;
    stan::model::assign(mu, stan::math::rep_matrix(0.0, tsize, num_steps),
      "assigning variable mu");
    current_statement__ = 186;
    stan::math::validate_non_negative_index("nu", "num_strata", num_strata);
    current_statement__ = 187;
    stan::math::validate_non_negative_index("nu", "num_delays", num_delays);
    Eigen::Matrix<local_scalar_t__,-1,-1> nu =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata, num_delays,
        DUMMY_VAR__);
    current_statement__ = 188;
    stan::model::assign(nu,
      stan::math::rep_matrix(0.0, num_strata, num_delays),
      "assigning variable nu");
    current_statement__ = 189;
    stan::model::assign(mu, mu_init, "assigning variable mu",
      stan::model::index_omni(), stan::model::index_uni(1));
    current_statement__ = 190;
    stan::model::assign(nu, nu_init, "assigning variable nu",
      stan::model::index_omni(), stan::model::index_uni(1));
    current_statement__ = 195;
    if (stan::math::logical_gt(num_delays, 1)) {
      current_statement__ = 193;
      for (int d = 1; d <= (num_delays - 1); ++d) {
        current_statement__ = 191;
        stan::model::assign(nu,
          stan::math::add(
            stan::math::add(nu_intercept,
              AR(stan::model::deep_copy(nu), phi_nu_star, (d + 1), nu_p,
                pstream__)),
            stan::model::rvalue(error_nu, "error_nu",
              stan::model::index_omni(), stan::model::index_uni(d))),
          "assigning variable nu", stan::model::index_omni(),
          stan::model::index_uni((d + 1)));
      }
    }
    current_statement__ = 201;
    if (stan::math::logical_gt(num_steps, 1)) {
      current_statement__ = 199;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 196;
        stan::model::assign(m,
          stan::math::add(
            stan::model::rvalue(mu, "mu", stan::model::index_omni(),
              stan::model::index_uni(t)), colwise_mat_2_vec(nu, pstream__)),
          "assigning variable m", stan::model::index_omni(),
          stan::model::index_uni(t));
        current_statement__ = 197;
        stan::model::assign(mu,
          stan::math::add(
            stan::math::add(
              stan::math::add(mu_intercept,
                AR(stan::model::deep_copy(mu), phi_mu_star, (t + 1), mu_p,
                  pstream__)),
              MA(error_mu, theta_mu_star, t, mu_q, pstream__)),
            stan::model::rvalue(error_mu, "error_mu",
              stan::model::index_omni(), stan::model::index_uni(t))),
          "assigning variable mu", stan::model::index_omni(),
          stan::model::index_uni((t + 1)));
      }
    }
    current_statement__ = 202;
    stan::model::assign(m,
      stan::math::add(
        stan::model::rvalue(mu, "mu", stan::model::index_omni(),
          stan::model::index_uni(num_steps)),
        colwise_mat_2_vec(nu, pstream__)), "assigning variable m",
      stan::model::index_omni(), stan::model::index_uni(num_steps));
    current_statement__ = 203;
    return m;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
std::vector<stan::promote_args_t<stan::base_type_t<T2__>>>
observed_mean(const int& n_rows, const int& num_delays, const T2__& m_arg__,
              const std::vector<std::vector<int>>& case_idx, const int&
              s_col, const int& d_col, const int& t_col, std::ostream*
              pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& m = stan::math::to_ref(m_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 205;
    stan::math::validate_non_negative_index("m_obs", "n_rows", n_rows);
    std::vector<local_scalar_t__> m_obs =
      std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
    current_statement__ = 208;
    for (int n = 1; n <= n_rows; ++n) {
      current_statement__ = 207;
      stan::model::assign(m_obs,
        stan::model::rvalue(m, "m",
          stan::model::index_uni(((num_delays *
            (stan::model::rvalue(case_idx, "case_idx",
               stan::model::index_uni(n), stan::model::index_uni(s_col)) -
            1)) +
            stan::model::rvalue(case_idx, "case_idx",
              stan::model::index_uni(n), stan::model::index_uni(d_col)))),
          stan::model::index_uni(
            stan::model::rvalue(case_idx, "case_idx",
              stan::model::index_uni(n), stan::model::index_uni(t_col)))),
        "assigning variable m_obs", stan::model::index_uni(n));
    }
    current_statement__ = 209;
    return m_obs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_nowcasting_v2 final : public model_base_crtp<model_nowcasting_v2> {
private:
  int num_steps;
  int num_delays;
  int num_strata;
  int n_rows;
  std::vector<std::vector<int>> case_idx;
  std::vector<double> cases;
  int mu_p;
  int mu_q;
  int nu_p;
  double AR_mu_param_1;
  double AR_mu_param_2;
  double MA_mu_param_1;
  double MA_mu_param_2;
  double mu_intercept_param_1;
  double mu_intercept_param_2;
  double mu_0_param_1;
  double mu_0_param_2;
  double AR_nu_param_1;
  double AR_nu_param_2;
  double nu_intercept_param_1;
  double nu_intercept_param_2;
  double nu_0_param_1;
  double nu_0_param_2;
  double sd_mu_param_1;
  double sd_mu_param_2;
  double sd_nu_param_1;
  double sd_nu_param_2;
  double sd_m_param_1;
  double sd_m_param_2;
  int prior_only;
  Eigen::Matrix<double,-1,-1> sd_cases_data__;
  Eigen::Matrix<double,-1,-1> mu_cases_data__;
  int max_q_nu;
  int tsize;
  int has_theta_mu;
  int t_col;
  int d_col;
  int s_col;
  int xi_mu_2dim__;
  int xi_nu_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sd_cases{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mu_cases{nullptr, 0, 0};
public:
  ~model_nowcasting_v2() {}
  model_nowcasting_v2(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nowcasting_v2_namespace::model_nowcasting_v2";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization", "num_steps", "int",
        std::vector<size_t>{});
      num_steps = std::numeric_limits<int>::min();
      current_statement__ = 33;
      num_steps = context__.vals_i("num_steps")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "num_steps", num_steps,
        1);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "num_delays", "int",
        std::vector<size_t>{});
      num_delays = std::numeric_limits<int>::min();
      current_statement__ = 34;
      num_delays = context__.vals_i("num_delays")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "num_delays",
        num_delays, 0);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "num_strata", "int",
        std::vector<size_t>{});
      num_strata = std::numeric_limits<int>::min();
      current_statement__ = 35;
      num_strata = context__.vals_i("num_strata")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "num_strata",
        num_strata, 1);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "n_rows", "int",
        std::vector<size_t>{});
      n_rows = std::numeric_limits<int>::min();
      current_statement__ = 36;
      n_rows = context__.vals_i("n_rows")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "n_rows", n_rows, 1);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("case_idx", "n_rows", n_rows);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "case_idx", "int",
        std::vector<size_t>{static_cast<size_t>(n_rows),
          static_cast<size_t>(3)});
      case_idx = std::vector<std::vector<int>>(n_rows,
                   std::vector<int>(3, std::numeric_limits<int>::min()));
      {
        std::vector<int> case_idx_flat__;
        current_statement__ = 38;
        case_idx_flat__ = context__.vals_i("case_idx");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= n_rows; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(case_idx, case_idx_flat__[(pos__ - 1)],
              "assigning variable case_idx", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("cases", "n_rows", n_rows);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "cases", "double",
        std::vector<size_t>{static_cast<size_t>(n_rows)});
      cases = std::vector<double>(n_rows,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 40;
      cases = context__.vals_r("cases");
      current_statement__ = 41;
      context__.validate_dims("data initialization", "mu_p", "int",
        std::vector<size_t>{});
      mu_p = std::numeric_limits<int>::min();
      current_statement__ = 41;
      mu_p = context__.vals_i("mu_p")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "mu_p", mu_p, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "mu_q", "int",
        std::vector<size_t>{});
      mu_q = std::numeric_limits<int>::min();
      current_statement__ = 42;
      mu_q = context__.vals_i("mu_q")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "mu_q", mu_q, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "nu_p", "int",
        std::vector<size_t>{});
      nu_p = std::numeric_limits<int>::min();
      current_statement__ = 43;
      nu_p = context__.vals_i("nu_p")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "nu_p", nu_p, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "AR_mu_param_1",
        "double", std::vector<size_t>{});
      AR_mu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      AR_mu_param_1 = context__.vals_r("AR_mu_param_1")[(1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization", "AR_mu_param_2",
        "double", std::vector<size_t>{});
      AR_mu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      AR_mu_param_2 = context__.vals_r("AR_mu_param_2")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "AR_mu_param_2",
        AR_mu_param_2, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "MA_mu_param_1",
        "double", std::vector<size_t>{});
      MA_mu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 46;
      MA_mu_param_1 = context__.vals_r("MA_mu_param_1")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization", "MA_mu_param_2",
        "double", std::vector<size_t>{});
      MA_mu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 47;
      MA_mu_param_2 = context__.vals_r("MA_mu_param_2")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "MA_mu_param_2",
        MA_mu_param_2, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "mu_intercept_param_1",
        "double", std::vector<size_t>{});
      mu_intercept_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      mu_intercept_param_1 = context__.vals_r("mu_intercept_param_1")[(1 -
        1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization", "mu_intercept_param_2",
        "double", std::vector<size_t>{});
      mu_intercept_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 49;
      mu_intercept_param_2 = context__.vals_r("mu_intercept_param_2")[(1 -
        1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "mu_intercept_param_2",
        mu_intercept_param_2, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "mu_0_param_1",
        "double", std::vector<size_t>{});
      mu_0_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 50;
      mu_0_param_1 = context__.vals_r("mu_0_param_1")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization", "mu_0_param_2",
        "double", std::vector<size_t>{});
      mu_0_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 51;
      mu_0_param_2 = context__.vals_r("mu_0_param_2")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "mu_0_param_2",
        mu_0_param_2, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "AR_nu_param_1",
        "double", std::vector<size_t>{});
      AR_nu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 52;
      AR_nu_param_1 = context__.vals_r("AR_nu_param_1")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization", "AR_nu_param_2",
        "double", std::vector<size_t>{});
      AR_nu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 53;
      AR_nu_param_2 = context__.vals_r("AR_nu_param_2")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "AR_nu_param_2",
        AR_nu_param_2, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "nu_intercept_param_1",
        "double", std::vector<size_t>{});
      nu_intercept_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      nu_intercept_param_1 = context__.vals_r("nu_intercept_param_1")[(1 -
        1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization", "nu_intercept_param_2",
        "double", std::vector<size_t>{});
      nu_intercept_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 55;
      nu_intercept_param_2 = context__.vals_r("nu_intercept_param_2")[(1 -
        1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "nu_intercept_param_2",
        nu_intercept_param_2, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "nu_0_param_1",
        "double", std::vector<size_t>{});
      nu_0_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 56;
      nu_0_param_1 = context__.vals_r("nu_0_param_1")[(1 - 1)];
      current_statement__ = 57;
      context__.validate_dims("data initialization", "nu_0_param_2",
        "double", std::vector<size_t>{});
      nu_0_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 57;
      nu_0_param_2 = context__.vals_r("nu_0_param_2")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "nu_0_param_2",
        nu_0_param_2, 0);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "sd_mu_param_1",
        "double", std::vector<size_t>{});
      sd_mu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 58;
      sd_mu_param_1 = context__.vals_r("sd_mu_param_1")[(1 - 1)];
      current_statement__ = 59;
      context__.validate_dims("data initialization", "sd_mu_param_2",
        "double", std::vector<size_t>{});
      sd_mu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 59;
      sd_mu_param_2 = context__.vals_r("sd_mu_param_2")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "sd_mu_param_2",
        sd_mu_param_2, 0);
      current_statement__ = 60;
      context__.validate_dims("data initialization", "sd_nu_param_1",
        "double", std::vector<size_t>{});
      sd_nu_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 60;
      sd_nu_param_1 = context__.vals_r("sd_nu_param_1")[(1 - 1)];
      current_statement__ = 61;
      context__.validate_dims("data initialization", "sd_nu_param_2",
        "double", std::vector<size_t>{});
      sd_nu_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 61;
      sd_nu_param_2 = context__.vals_r("sd_nu_param_2")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "sd_nu_param_2",
        sd_nu_param_2, 0);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "sd_m_param_1",
        "double", std::vector<size_t>{});
      sd_m_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 62;
      sd_m_param_1 = context__.vals_r("sd_m_param_1")[(1 - 1)];
      current_statement__ = 63;
      context__.validate_dims("data initialization", "sd_m_param_2",
        "double", std::vector<size_t>{});
      sd_m_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 63;
      sd_m_param_2 = context__.vals_r("sd_m_param_2")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "sd_m_param_2",
        sd_m_param_2, 0);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 64;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "prior_only",
        prior_only, 0);
      current_statement__ = 64;
      stan::math::check_less_or_equal(function__, "prior_only", prior_only, 1);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("sd_cases", "num_strata",
        num_strata);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("sd_cases", "num_delays",
        num_delays);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "sd_cases", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata),
          static_cast<size_t>(num_delays)});
      sd_cases_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_strata,
                          num_delays,
                          std::numeric_limits<double>::quiet_NaN());
      new (&sd_cases)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sd_cases_data__.data(),
        num_strata, num_delays);
      {
        std::vector<local_scalar_t__> sd_cases_flat__;
        current_statement__ = 67;
        sd_cases_flat__ = context__.vals_r("sd_cases");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= num_delays; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 67;
            stan::model::assign(sd_cases, sd_cases_flat__[(pos__ - 1)],
              "assigning variable sd_cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 67;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("mu_cases", "num_strata",
        num_strata);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("mu_cases", "num_delays",
        num_delays);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "mu_cases", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata),
          static_cast<size_t>(num_delays)});
      mu_cases_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_strata,
                          num_delays,
                          std::numeric_limits<double>::quiet_NaN());
      new (&mu_cases)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mu_cases_data__.data(),
        num_strata, num_delays);
      {
        std::vector<local_scalar_t__> mu_cases_flat__;
        current_statement__ = 70;
        mu_cases_flat__ = context__.vals_r("mu_cases");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= num_delays; ++sym1__) {
          current_statement__ = 70;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 70;
            stan::model::assign(mu_cases, mu_cases_flat__[(pos__ - 1)],
              "assigning variable mu_cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 70;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      max_q_nu = std::numeric_limits<int>::min();
      current_statement__ = 71;
      max_q_nu = min_int(nu_p, num_delays, pstream__);
      current_statement__ = 72;
      tsize = std::numeric_limits<int>::min();
      current_statement__ = 72;
      tsize = (num_delays * num_strata);
      current_statement__ = 73;
      has_theta_mu = std::numeric_limits<int>::min();
      current_statement__ = 73;
      has_theta_mu = 0;
      current_statement__ = 74;
      t_col = std::numeric_limits<int>::min();
      current_statement__ = 74;
      t_col = 1;
      current_statement__ = 75;
      d_col = std::numeric_limits<int>::min();
      current_statement__ = 75;
      d_col = 2;
      current_statement__ = 76;
      s_col = std::numeric_limits<int>::min();
      current_statement__ = 76;
      s_col = 3;
      current_statement__ = 77;
      stan::math::validate_non_negative_index("mu_intercept", "tsize", tsize);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("phi_mu", "mu_p", mu_p);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("theta_mu", "mu_q", mu_q);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("nu_intercept", "num_strata",
        num_strata);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("phi_nu", "max_q_nu", max_q_nu);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("mu_init", "tsize", tsize);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("nu_init", "num_strata",
        num_strata);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("xi_mu", "tsize", tsize);
      current_statement__ = 85;
      xi_mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 85;
      xi_mu_2dim__ = (num_steps - 1);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("xi_mu", "num_steps - 1",
        xi_mu_2dim__);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("xi_nu", "num_strata",
        num_strata);
      current_statement__ = 87;
      xi_nu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 87;
      xi_nu_2dim__ = (num_delays - 1);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("xi_nu", "num_delays - 1",
        xi_nu_2dim__);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("m", "tsize", tsize);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("m", "num_steps", num_steps);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("merror", "n_rows", n_rows);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = tsize + mu_p + mu_q + num_strata + max_q_nu + tsize +
      num_strata + (tsize * xi_mu_2dim__) + (num_strata * xi_nu_2dim__) + 1 +
      1 + 1;
  }
  inline std::string model_name() const final {
    return "model_nowcasting_v2";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcasting_v2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 1;
      mu_intercept = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_p, DUMMY_VAR__);
      current_statement__ = 2;
      phi_mu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, mu_p);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_q, DUMMY_VAR__);
      current_statement__ = 3;
      theta_mu = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                   lp__, mu_q);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 4;
      nu_intercept = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_q_nu, DUMMY_VAR__);
      current_statement__ = 5;
      phi_nu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, max_q_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 6;
      mu_init = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 7;
      nu_init = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, xi_mu_2dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      xi_mu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(tsize, xi_mu_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata,
          xi_nu_2dim__, DUMMY_VAR__);
      current_statement__ = 9;
      xi_nu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(num_strata,
                xi_nu_2dim__);
      local_scalar_t__ sd_mu = DUMMY_VAR__;
      current_statement__ = 10;
      sd_mu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sd_nu = DUMMY_VAR__;
      current_statement__ = 11;
      sd_nu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ sd_m = DUMMY_VAR__;
      current_statement__ = 12;
      sd_m = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> m =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, num_steps,
          DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(m,
        state_space_model(num_steps, num_delays, num_strata, phi_mu,
          theta_mu, phi_nu, mu_intercept, nu_intercept, mu_p, mu_q, nu_p,
          mu_init, nu_init, sd_mu, sd_nu, xi_mu, xi_nu, pstream__),
        "assigning variable m");
      std::vector<local_scalar_t__> merror =
        std::vector<local_scalar_t__>(n_rows, DUMMY_VAR__);
      current_statement__ = 17;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 16;
        stan::model::assign(merror,
          ((stan::model::rvalue(cases, "cases", stan::model::index_uni(n)) -
          stan::model::rvalue(m, "m",
            stan::model::index_uni(((num_delays *
              (stan::model::rvalue(case_idx, "case_idx",
                 stan::model::index_uni(n), stan::model::index_uni(s_col)) -
              1)) +
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(d_col)))),
            stan::model::index_uni(
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))))
          / sd_m), "assigning variable merror", stan::model::index_uni(n));
      }
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 15;
      lprior = 0;
      current_statement__ = 18;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(mu_intercept, mu_intercept_param_1,
          mu_intercept_param_2));
      current_statement__ = 19;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(phi_mu, AR_mu_param_1, AR_mu_param_2));
      current_statement__ = 20;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(theta_mu, MA_mu_param_1, MA_mu_param_2));
      current_statement__ = 21;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(mu_init, mu_0_param_1, mu_0_param_2));
      current_statement__ = 22;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(nu_intercept, nu_intercept_param_1,
          nu_intercept_param_2));
      current_statement__ = 23;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(phi_nu, AR_nu_param_1, AR_nu_param_2));
      current_statement__ = 24;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(nu_init, nu_0_param_1, nu_0_param_2));
      current_statement__ = 25;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_mu)));
      current_statement__ = 26;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_nu)));
      current_statement__ = 27;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_mu, sd_mu_param_1, sd_mu_param_2)
        - stan::math::normal_lccdf(0, sd_mu_param_1, sd_mu_param_2)));
      current_statement__ = 28;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_nu, sd_nu_param_1, sd_nu_param_2)
        - stan::math::normal_lccdf(0, sd_nu_param_1, sd_nu_param_2)));
      current_statement__ = 29;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_m, sd_m_param_1, sd_m_param_2) -
        stan::math::normal_lccdf(0, sd_m_param_1, sd_m_param_2)));
      {
        current_statement__ = 31;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 30;
          lp_accum__.add(stan::math::std_normal_lpdf<false>(merror));
        }
        current_statement__ = 32;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_nowcasting_v2_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu_intercept =
        Eigen::Matrix<double,-1,1>::Constant(tsize,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_intercept = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<double,-1,1> phi_mu =
        Eigen::Matrix<double,-1,1>::Constant(mu_p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      phi_mu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, mu_p);
      Eigen::Matrix<double,-1,1> theta_mu =
        Eigen::Matrix<double,-1,1>::Constant(mu_q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      theta_mu = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                   lp__, mu_q);
      Eigen::Matrix<double,-1,1> nu_intercept =
        Eigen::Matrix<double,-1,1>::Constant(num_strata,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      nu_intercept = in__.template read<
                       Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<double,-1,1> phi_nu =
        Eigen::Matrix<double,-1,1>::Constant(max_q_nu,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      phi_nu = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, max_q_nu);
      Eigen::Matrix<double,-1,1> mu_init =
        Eigen::Matrix<double,-1,1>::Constant(tsize,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      mu_init = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(tsize);
      Eigen::Matrix<double,-1,1> nu_init =
        Eigen::Matrix<double,-1,1>::Constant(num_strata,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      nu_init = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata);
      Eigen::Matrix<double,-1,-1> xi_mu =
        Eigen::Matrix<double,-1,-1>::Constant(tsize, xi_mu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      xi_mu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(tsize, xi_mu_2dim__);
      Eigen::Matrix<double,-1,-1> xi_nu =
        Eigen::Matrix<double,-1,-1>::Constant(num_strata, xi_nu_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      xi_nu = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(num_strata,
                xi_nu_2dim__);
      double sd_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sd_mu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double sd_nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      sd_nu = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double sd_m = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      sd_m = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      Eigen::Matrix<double,-1,-1> m =
        Eigen::Matrix<double,-1,-1>::Constant(tsize, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> merror =
        std::vector<double>(n_rows, std::numeric_limits<double>::quiet_NaN());
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_intercept);
      out__.write(phi_mu);
      out__.write(theta_mu);
      out__.write(nu_intercept);
      out__.write(phi_nu);
      out__.write(mu_init);
      out__.write(nu_init);
      out__.write(xi_mu);
      out__.write(xi_nu);
      out__.write(sd_mu);
      out__.write(sd_nu);
      out__.write(sd_m);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 13;
      stan::model::assign(m,
        state_space_model(num_steps, num_delays, num_strata, phi_mu,
          theta_mu, phi_nu, mu_intercept, nu_intercept, mu_p, mu_q, nu_p,
          mu_init, nu_init, sd_mu, sd_nu, xi_mu, xi_nu, pstream__),
        "assigning variable m");
      current_statement__ = 17;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 16;
        stan::model::assign(merror,
          ((stan::model::rvalue(cases, "cases", stan::model::index_uni(n)) -
          stan::model::rvalue(m, "m",
            stan::model::index_uni(((num_delays *
              (stan::model::rvalue(case_idx, "case_idx",
                 stan::model::index_uni(n), stan::model::index_uni(s_col)) -
              1)) +
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(d_col)))),
            stan::model::index_uni(
              stan::model::rvalue(case_idx, "case_idx",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))))
          / sd_m), "assigning variable merror", stan::model::index_uni(n));
      }
      current_statement__ = 15;
      lprior = 0;
      current_statement__ = 18;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(mu_intercept, mu_intercept_param_1,
          mu_intercept_param_2));
      current_statement__ = 19;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(phi_mu, AR_mu_param_1, AR_mu_param_2));
      current_statement__ = 20;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(theta_mu, MA_mu_param_1, MA_mu_param_2));
      current_statement__ = 21;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(mu_init, mu_0_param_1, mu_0_param_2));
      current_statement__ = 22;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(nu_intercept, nu_intercept_param_1,
          nu_intercept_param_2));
      current_statement__ = 23;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(phi_nu, AR_nu_param_1, AR_nu_param_2));
      current_statement__ = 24;
      lprior = (lprior +
        stan::math::normal_lpdf<false>(nu_init, nu_0_param_1, nu_0_param_2));
      current_statement__ = 25;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_mu)));
      current_statement__ = 26;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_nu)));
      current_statement__ = 27;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_mu, sd_mu_param_1, sd_mu_param_2)
        - stan::math::normal_lccdf(0, sd_mu_param_1, sd_mu_param_2)));
      current_statement__ = 28;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_nu, sd_nu_param_1, sd_nu_param_2)
        - stan::math::normal_lccdf(0, sd_nu_param_1, sd_nu_param_2)));
      current_statement__ = 29;
      lprior = (lprior +
        (stan::math::normal_lpdf<false>(sd_m, sd_m_param_1, sd_m_param_2) -
        stan::math::normal_lccdf(0, sd_m_param_1, sd_m_param_2)));
      if (emit_transformed_parameters__) {
        out__.write(m);
        out__.write(merror);
        out__.write(lprior);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu_intercept,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tsize),
        "assigning variable mu_intercept");
      out__.write(mu_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_p, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(phi_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(mu_p),
        "assigning variable phi_mu");
      out__.write_free_lub(-1, 1, phi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_q, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(theta_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(mu_q),
        "assigning variable theta_mu");
      out__.write_free_lub(-1, 1, theta_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(nu_intercept,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata),
        "assigning variable nu_intercept");
      out__.write(nu_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_q_nu, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(phi_nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(max_q_nu),
        "assigning variable phi_nu");
      out__.write_free_lub(-1, 1, phi_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(mu_init,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(tsize),
        "assigning variable mu_init");
      out__.write(mu_init);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(nu_init,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(num_strata),
        "assigning variable nu_init");
      out__.write(nu_init);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, xi_mu_2dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(xi_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(tsize, xi_mu_2dim__),
        "assigning variable xi_mu");
      out__.write(xi_mu);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata,
          xi_nu_2dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(xi_nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_strata,
          xi_nu_2dim__), "assigning variable xi_nu");
      out__.write(xi_nu);
      local_scalar_t__ sd_mu = DUMMY_VAR__;
      current_statement__ = 10;
      sd_mu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_mu);
      local_scalar_t__ sd_nu = DUMMY_VAR__;
      current_statement__ = 11;
      sd_nu = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_nu);
      local_scalar_t__ sd_m = DUMMY_VAR__;
      current_statement__ = 12;
      sd_m = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_intercept",
        "double", std::vector<size_t>{static_cast<size_t>(tsize)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "phi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(mu_p)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "theta_mu",
        "double", std::vector<size_t>{static_cast<size_t>(mu_q)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "nu_intercept",
        "double", std::vector<size_t>{static_cast<size_t>(num_strata)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "phi_nu", "double",
        std::vector<size_t>{static_cast<size_t>(max_q_nu)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "mu_init",
        "double", std::vector<size_t>{static_cast<size_t>(tsize)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "nu_init",
        "double", std::vector<size_t>{static_cast<size_t>(num_strata)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "xi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(tsize),
          static_cast<size_t>(xi_mu_2dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "xi_nu", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata),
          static_cast<size_t>(xi_nu_2dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sd_mu", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "sd_nu", "double",
        std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "sd_m", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_intercept_flat__;
        current_statement__ = 1;
        mu_intercept_flat__ = context__.vals_r("mu_intercept");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(mu_intercept, mu_intercept_flat__[(pos__ - 1)],
            "assigning variable mu_intercept", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_mu_flat__;
        current_statement__ = 2;
        phi_mu_flat__ = context__.vals_r("phi_mu");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= mu_p; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(phi_mu, phi_mu_flat__[(pos__ - 1)],
            "assigning variable phi_mu", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, phi_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_mu_flat__;
        current_statement__ = 3;
        theta_mu_flat__ = context__.vals_r("theta_mu");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= mu_q; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(theta_mu, theta_mu_flat__[(pos__ - 1)],
            "assigning variable theta_mu", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, theta_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_intercept =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_intercept_flat__;
        current_statement__ = 4;
        nu_intercept_flat__ = context__.vals_r("nu_intercept");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(nu_intercept, nu_intercept_flat__[(pos__ - 1)],
            "assigning variable nu_intercept", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(nu_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_q_nu, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_nu_flat__;
        current_statement__ = 5;
        phi_nu_flat__ = context__.vals_r("phi_nu");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= max_q_nu; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(phi_nu, phi_nu_flat__[(pos__ - 1)],
            "assigning variable phi_nu", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, phi_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tsize, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_init_flat__;
        current_statement__ = 6;
        mu_init_flat__ = context__.vals_r("mu_init");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(mu_init, mu_init_flat__[(pos__ - 1)],
            "assigning variable mu_init", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_init);
      Eigen::Matrix<local_scalar_t__,-1,1> nu_init =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(num_strata,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_init_flat__;
        current_statement__ = 7;
        nu_init_flat__ = context__.vals_r("nu_init");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(nu_init, nu_init_flat__[(pos__ - 1)],
            "assigning variable nu_init", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(nu_init);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tsize, xi_mu_2dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_mu_flat__;
        current_statement__ = 8;
        xi_mu_flat__ = context__.vals_r("xi_mu");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= xi_mu_2dim__; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
            current_statement__ = 8;
            stan::model::assign(xi_mu, xi_mu_flat__[(pos__ - 1)],
              "assigning variable xi_mu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_mu);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_nu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(num_strata,
          xi_nu_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_nu_flat__;
        current_statement__ = 9;
        xi_nu_flat__ = context__.vals_r("xi_nu");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= xi_nu_2dim__; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 9;
            stan::model::assign(xi_nu, xi_nu_flat__[(pos__ - 1)],
              "assigning variable xi_nu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_nu);
      local_scalar_t__ sd_mu = DUMMY_VAR__;
      current_statement__ = 10;
      sd_mu = context__.vals_r("sd_mu")[(1 - 1)];
      out__.write_free_lb(0, sd_mu);
      local_scalar_t__ sd_nu = DUMMY_VAR__;
      current_statement__ = 11;
      sd_nu = context__.vals_r("sd_nu")[(1 - 1)];
      out__.write_free_lb(0, sd_nu);
      local_scalar_t__ sd_m = DUMMY_VAR__;
      current_statement__ = 12;
      sd_m = context__.vals_r("sd_m")[(1 - 1)];
      out__.write_free_lb(0, sd_m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_intercept", "phi_mu", "theta_mu",
                "nu_intercept", "phi_nu", "mu_init", "nu_init", "xi_mu",
                "xi_nu", "sd_mu", "sd_nu", "sd_m"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"m", "merror", "lprior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    tsize)},
                std::vector<size_t>{static_cast<size_t>(mu_p)},
                std::vector<size_t>{static_cast<size_t>(mu_q)},
                std::vector<size_t>{static_cast<size_t>(num_strata)},
                std::vector<size_t>{static_cast<size_t>(max_q_nu)},
                std::vector<size_t>{static_cast<size_t>(tsize)},
                std::vector<size_t>{static_cast<size_t>(num_strata)},
                std::vector<size_t>{static_cast<size_t>(tsize),
                  static_cast<size_t>(xi_mu_2dim__)},
                std::vector<size_t>{static_cast<size_t>(num_strata),
                  static_cast<size_t>(xi_nu_2dim__)}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(tsize),
               static_cast<size_t>(num_steps)},
             std::vector<size_t>{static_cast<size_t>(n_rows)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_intercept" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_q; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_intercept" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= max_q_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_init" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_init" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_mu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_nu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sd_mu");
    param_names__.emplace_back(std::string() + "sd_nu");
    param_names__.emplace_back(std::string() + "sd_m");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
          param_names__.emplace_back(std::string() + "m" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "merror" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_intercept" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= mu_q; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_intercept" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= max_q_nu; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= tsize; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_init" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= num_strata; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu_init" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_mu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_nu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "sd_mu");
    param_names__.emplace_back(std::string() + "sd_nu");
    param_names__.emplace_back(std::string() + "sd_m");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tsize; ++sym2__) {
          param_names__.emplace_back(std::string() + "m" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "merror" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"phi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_p) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_q) + "},\"block\":\"parameters\"},{\"name\":\"nu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"phi_nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_q_nu) + "},\"block\":\"parameters\"},{\"name\":\"mu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"nu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(xi_mu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_strata) + ",\"cols\":" + std::to_string(xi_nu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"merror\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_rows) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"phi_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_p) + "},\"block\":\"parameters\"},{\"name\":\"theta_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_q) + "},\"block\":\"parameters\"},{\"name\":\"nu_intercept\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"phi_nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_q_nu) + "},\"block\":\"parameters\"},{\"name\":\"mu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tsize) + "},\"block\":\"parameters\"},{\"name\":\"nu_init\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(num_strata) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(xi_mu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"xi_nu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(num_strata) + ",\"cols\":" + std::to_string(xi_nu_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_nu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_m\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(tsize) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"merror\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_rows) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((tsize + mu_p) + mu_q) +
      num_strata) + max_q_nu) + tsize) + num_strata) + (tsize *
      xi_mu_2dim__)) + (num_strata * xi_nu_2dim__)) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((tsize *
      num_steps) + n_rows) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((tsize + mu_p) + mu_q) +
      num_strata) + max_q_nu) + tsize) + num_strata) + (tsize *
      xi_mu_2dim__)) + (num_strata * xi_nu_2dim__)) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((tsize *
      num_steps) + n_rows) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nowcasting_v2_namespace::model_nowcasting_v2;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nowcasting_v2_namespace::profiles__;
}
#endif
#endif
