// Generated by rstantools.  Do not edit by hand.

/*
    diseasenowcasting is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    diseasenowcasting is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with diseasenowcasting.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.35.0
#include <stan/model/model_header.hpp>
namespace model_nowcast_v2_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 274> locations_array__ =
  {" (found before start of program)",
  " (in 'nowcast_v2', line 542, column 2 to column 57)",
  " (in 'nowcast_v2', line 543, column 2 to column 57)",
  " (in 'nowcast_v2', line 545, column 2 to column 71)",
  " (in 'nowcast_v2', line 546, column 2 to column 71)",
  " (in 'nowcast_v2', line 548, column 2 to column 50)",
  " (in 'nowcast_v2', line 549, column 2 to column 30)",
  " (in 'nowcast_v2', line 550, column 2 to column 30)",
  " (in 'nowcast_v2', line 554, column 2 to column 145)",
  " (in 'nowcast_v2', line 555, column 2 to column 145)",
  " (in 'nowcast_v2', line 557, column 2 to line 559, column 60)",
  " (in 'nowcast_v2', line 575, column 2 to column 29)",
  " (in 'nowcast_v2', line 580, column 2 to column 18)",
  " (in 'nowcast_v2', line 577, column 4 to column 100)",
  " (in 'nowcast_v2', line 576, column 2 to line 577, column 100)",
  " (in 'nowcast_v2', line 581, column 2 to column 54)",
  " (in 'nowcast_v2', line 582, column 2 to column 54)",
  " (in 'nowcast_v2', line 584, column 4 to column 51)",
  " (in 'nowcast_v2', line 585, column 4 to column 51)",
  " (in 'nowcast_v2', line 583, column 30 to line 586, column 3)",
  " (in 'nowcast_v2', line 583, column 2 to line 586, column 3)",
  " (in 'nowcast_v2', line 588, column 2 to column 73)",
  " (in 'nowcast_v2', line 589, column 2 to column 73)",
  " (in 'nowcast_v2', line 592, column 4 to column 83)",
  " (in 'nowcast_v2', line 591, column 2 to line 592, column 83)",
  " (in 'nowcast_v2', line 601, column 6 to column 64)",
  " (in 'nowcast_v2', line 600, column 11 to line 602, column 5)",
  " (in 'nowcast_v2', line 599, column 6 to column 116)",
  " (in 'nowcast_v2', line 598, column 29 to line 600, column 5)",
  " (in 'nowcast_v2', line 598, column 4 to line 602, column 5)",
  " (in 'nowcast_v2', line 596, column 18 to line 603, column 3)",
  " (in 'nowcast_v2', line 596, column 2 to line 603, column 3)",
  " (in 'nowcast_v2', line 605, column 2 to column 19)",
  " (in 'nowcast_v2', line 473, column 4 to column 27)",
  " (in 'nowcast_v2', line 474, column 4 to column 28)",
  " (in 'nowcast_v2', line 475, column 4 to column 28)",
  " (in 'nowcast_v2', line 476, column 4 to column 24)",
  " (in 'nowcast_v2', line 478, column 10 to column 16)",
  " (in 'nowcast_v2', line 478, column 4 to column 33)",
  " (in 'nowcast_v2', line 480, column 4 to column 27)",
  " (in 'nowcast_v2', line 481, column 4 to column 40)",
  " (in 'nowcast_v2', line 482, column 4 to column 27)",
  " (in 'nowcast_v2', line 483, column 4 to column 40)",
  " (in 'nowcast_v2', line 485, column 4 to column 47)",
  " (in 'nowcast_v2', line 486, column 4 to column 37)",
  " (in 'nowcast_v2', line 488, column 4 to column 41)",
  " (in 'nowcast_v2', line 489, column 4 to column 40)",
  " (in 'nowcast_v2', line 490, column 4 to column 33)",
  " (in 'nowcast_v2', line 491, column 4 to column 32)",
  " (in 'nowcast_v2', line 492, column 4 to column 33)",
  " (in 'nowcast_v2', line 493, column 4 to column 32)",
  " (in 'nowcast_v2', line 494, column 4 to column 35)",
  " (in 'nowcast_v2', line 495, column 4 to column 35)",
  " (in 'nowcast_v2', line 496, column 4 to column 34)",
  " (in 'nowcast_v2', line 498, column 4 to column 25)",
  " (in 'nowcast_v2', line 499, column 4 to column 25)",
  " (in 'nowcast_v2', line 500, column 4 to column 35)",
  " (in 'nowcast_v2', line 501, column 4 to column 35)",
  " (in 'nowcast_v2', line 505, column 2 to column 39)",
  " (in 'nowcast_v2', line 506, column 2 to column 44)",
  " (in 'nowcast_v2', line 510, column 2 to column 57)",
  " (in 'nowcast_v2', line 511, column 2 to column 57)",
  " (in 'nowcast_v2', line 512, column 9 to column 25)",
  " (in 'nowcast_v2', line 512, column 27 to column 43)",
  " (in 'nowcast_v2', line 512, column 2 to column 91)",
  " (in 'nowcast_v2', line 513, column 2 to column 57)",
  " (in 'nowcast_v2', line 514, column 2 to column 57)",
  " (in 'nowcast_v2', line 515, column 9 to column 25)",
  " (in 'nowcast_v2', line 515, column 27 to column 43)",
  " (in 'nowcast_v2', line 515, column 2 to column 91)",
  " (in 'nowcast_v2', line 517, column 2 to column 57)",
  " (in 'nowcast_v2', line 518, column 2 to column 57)",
  " (in 'nowcast_v2', line 519, column 9 to column 25)",
  " (in 'nowcast_v2', line 519, column 27 to column 43)",
  " (in 'nowcast_v2', line 519, column 2 to column 107)",
  " (in 'nowcast_v2', line 520, column 2 to column 57)",
  " (in 'nowcast_v2', line 521, column 2 to column 57)",
  " (in 'nowcast_v2', line 522, column 9 to column 25)",
  " (in 'nowcast_v2', line 522, column 27 to column 43)",
  " (in 'nowcast_v2', line 522, column 2 to column 107)",
  " (in 'nowcast_v2', line 524, column 2 to column 62)",
  " (in 'nowcast_v2', line 525, column 9 to column 26)",
  " (in 'nowcast_v2', line 525, column 2 to column 74)",
  " (in 'nowcast_v2', line 526, column 2 to column 62)",
  " (in 'nowcast_v2', line 527, column 9 to column 26)",
  " (in 'nowcast_v2', line 527, column 2 to column 74)",
  " (in 'nowcast_v2', line 529, column 2 to column 36)",
  " (in 'nowcast_v2', line 530, column 2 to column 36)",
  " (in 'nowcast_v2', line 532, column 2 to column 36)",
  " (in 'nowcast_v2', line 533, column 2 to column 36)",
  " (in 'nowcast_v2', line 535, column 2 to column 16)",
  " (in 'nowcast_v2', line 536, column 2 to column 16)",
  " (in 'nowcast_v2', line 537, column 2 to column 16)",
  " (in 'nowcast_v2', line 538, column 2 to column 16)",
  " (in 'nowcast_v2', line 542, column 9 to column 30)",
  " (in 'nowcast_v2', line 542, column 32 to column 41)",
  " (in 'nowcast_v2', line 543, column 9 to column 30)",
  " (in 'nowcast_v2', line 543, column 32 to column 41)",
  " (in 'nowcast_v2', line 545, column 8 to column 21)",
  " (in 'nowcast_v2', line 545, column 30 to column 51)",
  " (in 'nowcast_v2', line 545, column 53 to column 63)",
  " (in 'nowcast_v2', line 546, column 8 to column 21)",
  " (in 'nowcast_v2', line 546, column 30 to column 51)",
  " (in 'nowcast_v2', line 546, column 53 to column 63)",
  " (in 'nowcast_v2', line 548, column 18 to column 46)",
  " (in 'nowcast_v2', line 549, column 18 to column 19)",
  " (in 'nowcast_v2', line 550, column 18 to column 19)",
  " (in 'nowcast_v2', line 554, column 9 to column 30)",
  " (in 'nowcast_v2', line 554, column 32 to column 41)",
  " (in 'nowcast_v2', line 555, column 9 to column 30)",
  " (in 'nowcast_v2', line 555, column 32 to column 41)",
  " (in 'nowcast_v2', line 557, column 9 to column 30)",
  " (in 'nowcast_v2', line 557, column 32 to column 41)",
  " (in 'nowcast_v2', line 575, column 9 to column 15)",
  " (in 'nowcast_v2', line 98, column 9 to column 26)",
  " (in 'nowcast_v2', line 98, column 28 to column 45)",
  " (in 'nowcast_v2', line 98, column 2 to column 103)",
  " (in 'nowcast_v2', line 101, column 2 to column 29)",
  " (in 'nowcast_v2', line 104, column 2 to column 77)",
  " (in 'nowcast_v2', line 106, column 2 to column 11)",
  " (in 'nowcast_v2', line 93, column 48 to line 108, column 1)",
  " (in 'nowcast_v2', line 115, column 9 to column 18)",
  " (in 'nowcast_v2', line 115, column 20 to column 29)",
  " (in 'nowcast_v2', line 115, column 2 to column 71)",
  " (in 'nowcast_v2', line 119, column 4 to column 76)",
  " (in 'nowcast_v2', line 118, column 16 to line 120, column 3)",
  " (in 'nowcast_v2', line 118, column 2 to line 120, column 3)",
  " (in 'nowcast_v2', line 122, column 2 to column 11)",
  " (in 'nowcast_v2', line 110, column 40 to line 123, column 1)",
  " (in 'nowcast_v2', line 130, column 9 to column 26)",
  " (in 'nowcast_v2', line 130, column 2 to column 30)",
  " (in 'nowcast_v2', line 134, column 4 to column 59)",
  " (in 'nowcast_v2', line 133, column 16 to line 135, column 3)",
  " (in 'nowcast_v2', line 133, column 2 to line 135, column 3)",
  " (in 'nowcast_v2', line 137, column 2 to column 11)",
  " (in 'nowcast_v2', line 125, column 31 to line 138, column 1)",
  " (in 'nowcast_v2', line 148, column 2 to column 26)",
  " (in 'nowcast_v2', line 149, column 9 to column 12)",
  " (in 'nowcast_v2', line 149, column 2 to column 16)",
  " (in 'nowcast_v2', line 153, column 4 to column 51)",
  " (in 'nowcast_v2', line 152, column 16 to line 154, column 3)",
  " (in 'nowcast_v2', line 152, column 2 to line 154, column 3)",
  " (in 'nowcast_v2', line 156, column 2 to column 11)",
  " (in 'nowcast_v2', line 140, column 41 to line 157, column 1)",
  " (in 'nowcast_v2', line 188, column 2 to column 43)",
  " (in 'nowcast_v2', line 189, column 2 to column 43)",
  " (in 'nowcast_v2', line 191, column 9 to column 14)",
  " (in 'nowcast_v2', line 191, column 16 to column 21)",
  " (in 'nowcast_v2', line 191, column 2 to column 55)",
  " (in 'nowcast_v2', line 195, column 4 to column 45)",
  " (in 'nowcast_v2', line 194, column 21 to line 196, column 3)",
  " (in 'nowcast_v2', line 194, column 2 to line 196, column 3)",
  " (in 'nowcast_v2', line 200, column 4 to column 20)",
  " (in 'nowcast_v2', line 199, column 21 to line 201, column 3)",
  " (in 'nowcast_v2', line 199, column 2 to line 201, column 3)",
  " (in 'nowcast_v2', line 203, column 2 to column 12)",
  " (in 'nowcast_v2', line 179, column 47 to line 204, column 1)",
  " (in 'nowcast_v2', line 211, column 2 to column 47)",
  " (in 'nowcast_v2', line 213, column 9 to column 14)",
  " (in 'nowcast_v2', line 213, column 2 to column 43)",
  " (in 'nowcast_v2', line 214, column 2 to column 13)",
  " (in 'nowcast_v2', line 216, column 2 to column 11)",
  " (in 'nowcast_v2', line 206, column 46 to line 217, column 1)",
  " (in 'nowcast_v2', line 226, column 2 to column 43)",
  " (in 'nowcast_v2', line 227, column 2 to column 43)",
  " (in 'nowcast_v2', line 229, column 9 to column 14)",
  " (in 'nowcast_v2', line 229, column 15 to column 20)",
  " (in 'nowcast_v2', line 229, column 2 to column 56)",
  " (in 'nowcast_v2', line 230, column 2 to column 29)",
  " (in 'nowcast_v2', line 232, column 2 to column 12)",
  " (in 'nowcast_v2', line 219, column 63 to line 233, column 1)",
  " (in 'nowcast_v2', line 262, column 2 to column 16)",
  " (in 'nowcast_v2', line 261, column 44 to line 263, column 1)",
  " (in 'nowcast_v2', line 266, column 2 to column 16)",
  " (in 'nowcast_v2', line 265, column 36 to line 267, column 1)",
  " (in 'nowcast_v2', line 270, column 2 to column 16)",
  " (in 'nowcast_v2', line 269, column 36 to line 271, column 1)",
  " (in 'nowcast_v2', line 274, column 2 to column 16)",
  " (in 'nowcast_v2', line 273, column 40 to line 275, column 1)",
  " (in 'nowcast_v2', line 278, column 2 to column 16)",
  " (in 'nowcast_v2', line 277, column 36 to line 279, column 1)",
  " (in 'nowcast_v2', line 282, column 2 to column 16)",
  " (in 'nowcast_v2', line 281, column 36 to line 283, column 1)",
  " (in 'nowcast_v2', line 306, column 2 to column 42)",
  " (in 'nowcast_v2', line 307, column 9 to column 10)",
  " (in 'nowcast_v2', line 307, column 12 to column 13)",
  " (in 'nowcast_v2', line 307, column 2 to column 41)",
  " (in 'nowcast_v2', line 312, column 6 to column 20)",
  " (in 'nowcast_v2', line 311, column 33 to line 313, column 5)",
  " (in 'nowcast_v2', line 311, column 4 to line 313, column 5)",
  " (in 'nowcast_v2', line 310, column 40 to line 314, column 3)",
  " (in 'nowcast_v2', line 310, column 2 to line 314, column 3)",
  " (in 'nowcast_v2', line 317, column 2 to column 15)",
  " (in 'nowcast_v2', line 321, column 4 to column 20)",
  " (in 'nowcast_v2', line 320, column 21 to line 322, column 3)",
  " (in 'nowcast_v2', line 320, column 2 to line 322, column 3)",
  " (in 'nowcast_v2', line 325, column 2 to column 15)",
  " (in 'nowcast_v2', line 327, column 2 to column 11)",
  " (in 'nowcast_v2', line 304, column 85 to line 328, column 1)",
  " (in 'nowcast_v2', line 332, column 2 to column 42)",
  " (in 'nowcast_v2', line 335, column 9 to column 10)",
  " (in 'nowcast_v2', line 335, column 2 to column 35)",
  " (in 'nowcast_v2', line 336, column 2 to column 13)",
  " (in 'nowcast_v2', line 338, column 2 to column 11)",
  " (in 'nowcast_v2', line 330, column 84 to line 340, column 1)",
  " (in 'nowcast_v2', line 349, column 2 to column 42)",
  " (in 'nowcast_v2', line 351, column 9 to column 10)",
  " (in 'nowcast_v2', line 351, column 11 to column 12)",
  " (in 'nowcast_v2', line 351, column 2 to column 40)",
  " (in 'nowcast_v2', line 352, column 2 to column 79)",
  " (in 'nowcast_v2', line 354, column 2 to column 26)",
  " (in 'nowcast_v2', line 356, column 2 to column 11)",
  " (in 'nowcast_v2', line 342, column 95 to line 357, column 1)",
  " (in 'nowcast_v2', line 361, column 2 to column 58)",
  " (in 'nowcast_v2', line 364, column 9 to column 10)",
  " (in 'nowcast_v2', line 364, column 2 to column 18)",
  " (in 'nowcast_v2', line 365, column 2 to column 69)",
  " (in 'nowcast_v2', line 368, column 2 to column 24)",
  " (in 'nowcast_v2', line 370, column 2 to column 15)",
  " (in 'nowcast_v2', line 359, column 118 to line 372, column 1)",
  " (in 'nowcast_v2', line 415, column 11 to column 32)",
  " (in 'nowcast_v2', line 415, column 34 to column 43)",
  " (in 'nowcast_v2', line 415, column 4 to column 47)",
  " (in 'nowcast_v2', line 417, column 10 to column 19)",
  " (in 'nowcast_v2', line 417, column 28 to column 49)",
  " (in 'nowcast_v2', line 417, column 51 to column 69)",
  " (in 'nowcast_v2', line 417, column 4 to column 74)",
  " (in 'nowcast_v2', line 418, column 4 to column 17)",
  " (in 'nowcast_v2', line 420, column 10 to column 19)",
  " (in 'nowcast_v2', line 420, column 28 to column 49)",
  " (in 'nowcast_v2', line 420, column 51 to column 69)",
  " (in 'nowcast_v2', line 420, column 4 to column 74)",
  " (in 'nowcast_v2', line 421, column 4 to column 17)",
  " (in 'nowcast_v2', line 429, column 6 to column 40)",
  " (in 'nowcast_v2', line 430, column 6 to column 43)",
  " (in 'nowcast_v2', line 431, column 6 to column 43)",
  " (in 'nowcast_v2', line 427, column 32 to line 432, column 5)",
  " (in 'nowcast_v2', line 427, column 4 to line 432, column 5)",
  " (in 'nowcast_v2', line 436, column 4 to column 60)",
  " (in 'nowcast_v2', line 438, column 4 to column 13)",
  " (in 'nowcast_v2', line 412, column 4 to line 440, column 1)",
  " (in 'nowcast_v2', line 467, column 9 to column 32)",
  " (in 'nowcast_v2', line 466, column 31 to column 72)",
  " (in 'nowcast_v2', line 466, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 465, column 31 to column 77)",
  " (in 'nowcast_v2', line 465, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 464, column 31 to column 65)",
  " (in 'nowcast_v2', line 464, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 463, column 31 to column 74)",
  " (in 'nowcast_v2', line 463, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 462, column 31 to column 84)",
  " (in 'nowcast_v2', line 462, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 461, column 30 to column 72)",
  " (in 'nowcast_v2', line 461, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 460, column 30 to column 72)",
  " (in 'nowcast_v2', line 460, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 459, column 30 to column 74)",
  " (in 'nowcast_v2', line 459, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 458, column 30 to column 74)",
  " (in 'nowcast_v2', line 458, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 457, column 30 to column 70)",
  " (in 'nowcast_v2', line 457, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 456, column 30 to column 67)",
  " (in 'nowcast_v2', line 456, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 455, column 30 to column 71)",
  " (in 'nowcast_v2', line 455, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 454, column 30 to column 79)",
  " (in 'nowcast_v2', line 454, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 453, column 30 to column 71)",
  " (in 'nowcast_v2', line 453, column 9 to line 467, column 32)",
  " (in 'nowcast_v2', line 452, column 25 to column 51)",
  " (in 'nowcast_v2', line 452, column 4 to line 467, column 32)",
  " (in 'nowcast_v2', line 468, column 4 to column 15)",
  " (in 'nowcast_v2', line 451, column 71 to line 469, column 3)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const T1__& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const T1__& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const T1__& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_A(const T0__& degree, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
Eigen::Matrix<double,-1,1>
create_trend_vector_block_L(const T0__& degree, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_R(const T0__& degree, const T1__& is_constant,
                            std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
int get_num_elements_alpha_trend(const T0__& degree, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
int get_num_cols_A_trend(const T0__& degree, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
int get_num_rows_A_trend(const T0__& degree, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
int get_num_elements_L_trend(const T0__& degree, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
int get_num_cols_R_trend(const T0__& degree, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<std::is_integral<T0__>>* = nullptr>
int get_num_rows_R_trend(const T0__& degree, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_block_A(const T0__& num_seasons, const T1__&
                                        season_duration, std::ostream*
                                        pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>* = nullptr>
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_block_L(const T0__& num_seasons, const T1__&
                                        season_duration, std::ostream*
                                        pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_block_R(const T0__& num_seasons, const T1__&
                                        season_duration, const T2__& time,
                                        std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__>,-1,1>
create_initial_seasonal_discrete_vector_block_alpha(const T0__&
                                                    season_params_arg__,
                                                    const T1__&
                                                    season_duration,
                                                    const T2__& error_term,
                                                    std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__, typename T14__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_eigen_matrix_dynamic<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_std_vector<T10__>,
                              stan::is_eigen_matrix_dynamic<stan::value_type_t<T10__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T10__>>,
                              stan::is_eigen_matrix_dynamic<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_std_vector<T12__>,
                              stan::is_eigen_matrix_dynamic<stan::value_type_t<T12__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T12__>>,
                              stan::is_col_vector<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_eigen_matrix_dynamic<T14__>,
                              stan::is_vt_not_complex<T14__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                stan::promote_args_t<stan::base_type_t<T8__>,
                  stan::base_type_t<T9__>, stan::base_type_t<T10__>,
                  stan::base_type_t<T11__>, stan::base_type_t<T12__>,
                  stan::promote_args_t<stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>>>>,-1,-1>
state_space_process_v3(const T0__& num_steps, const T1__& num_delays,
                       const T2__& num_strata, const T3__& A_mu_arg__,
                       const T4__& A_nu_arg__, const T5__& R_mu_arg__,
                       const T6__& R_nu_arg__, const T7__& L_mu_arg__,
                       const T8__& L_nu_arg__, const T9__& mu_0_arg__,
                       const T10__& xi_mu, const T11__& nu_0_arg__,
                       const T12__& xi_nu, const T13__& B_cnt_arg__,
                       const T14__& X_cnt_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              std::is_integral<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>
dist_lpdf(const T0__& x_arg__, const T1__& param_1, const T2__& param_2,
          const T3__& prior_spec, std::ostream* pstream__);
// matrix create_block_diagonal(matrix, matrix)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& A = stan::math::to_ref(A_arg__);
  const auto& B = stan::math::to_ref(B_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 114;
    stan::math::validate_non_negative_index("C", "rows(A) + rows(B)",
      (stan::math::rows(A) + stan::math::rows(B)));
    current_statement__ = 115;
    stan::math::validate_non_negative_index("C", "cols(A) + cols(B)",
      (stan::math::cols(A) + stan::math::cols(B)));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) +
        stan::math::rows(B)), (stan::math::cols(A) + stan::math::cols(B)),
        DUMMY_VAR__);
    current_statement__ = 116;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) + stan::math::rows(B)),
        (stan::math::cols(A) + stan::math::cols(B))), "assigning variable C");
    current_statement__ = 117;
    stan::model::assign(C, A, "assigning variable C",
      stan::model::index_min_max(1, stan::math::rows(A)),
      stan::model::index_min_max(1, stan::math::cols(A)));
    current_statement__ = 118;
    stan::model::assign(C, B, "assigning variable C",
      stan::model::index_min_max((stan::math::rows(A) + 1),
        (stan::math::rows(A) + stan::math::rows(B))),
      stan::model::index_min_max((stan::math::cols(A) + 1),
        (stan::math::cols(A) + stan::math::cols(B))));
    current_statement__ = 119;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix rep_diagonal_mat(matrix, int)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const T1__& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 121;
    stan::math::validate_non_negative_index("C", "rows(A) * k",
      (stan::math::rows(A) * k));
    current_statement__ = 122;
    stan::math::validate_non_negative_index("C", "cols(A) * k",
      (stan::math::cols(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) *
        k), (stan::math::cols(A) * k), DUMMY_VAR__);
    current_statement__ = 123;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) * k),
        (stan::math::cols(A) * k)), "assigning variable C");
    current_statement__ = 126;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 124;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::rows(A)) + 1), (l
          * stan::math::rows(A))),
        stan::model::index_min_max((((l - 1) * stan::math::cols(A)) + 1), (l
          * stan::math::cols(A))));
    }
    current_statement__ = 127;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector rep_vec(vector, int)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const T1__& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 129;
    stan::math::validate_non_negative_index("C", "num_elements(A) * k",
      (stan::math::num_elements(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) * k), DUMMY_VAR__);
    current_statement__ = 133;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 131;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::num_elements(A)) +
          1), (l * stan::math::num_elements(A))));
    }
    current_statement__ = 134;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector rep_vec_piecewise(vector, int)
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const T1__& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 136;
    n = stan::math::num_elements(A);
    current_statement__ = 137;
    stan::math::validate_non_negative_index("C", "n * k", (n * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n * k), DUMMY_VAR__);
    current_statement__ = 141;
    for (int j = 1; j <= n; ++j) {
      current_statement__ = 139;
      stan::model::assign(C,
        stan::math::rep_vector(
          stan::model::rvalue(A, "A", stan::model::index_uni(j)), k),
        "assigning variable C",
        stan::model::index_min_max((((j - 1) * k) + 1), (k * j)));
    }
    current_statement__ = 142;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix create_trend_matrix_block_A(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*>
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_A(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ncols = std::numeric_limits<int>::min();
    current_statement__ = 144;
    ncols = get_num_cols_A_trend(degree, pstream__);
    int nrows = std::numeric_limits<int>::min();
    current_statement__ = 145;
    nrows = get_num_rows_A_trend(degree, pstream__);
    current_statement__ = 146;
    stan::math::validate_non_negative_index("A", "nrows", nrows);
    current_statement__ = 147;
    stan::math::validate_non_negative_index("A", "ncols", ncols);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nrows, ncols,
        DUMMY_VAR__);
    current_statement__ = 148;
    stan::model::assign(A, stan::math::rep_matrix(0, nrows, ncols),
      "assigning variable A");
    current_statement__ = 151;
    for (int j = 1; j <= ncols; ++j) {
      current_statement__ = 149;
      stan::model::assign(A, (stan::math::pow(-(1), (j + 1)) *
        stan::math::choose(degree, j)), "assigning variable A",
        stan::model::index_uni(1), stan::model::index_uni(j));
    }
    current_statement__ = 154;
    for (int i = 2; i <= nrows; ++i) {
      current_statement__ = 152;
      stan::model::assign(A, 1.0, "assigning variable A",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
    }
    current_statement__ = 155;
    return stan::math::transpose(A);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector create_trend_vector_block_L(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*>
Eigen::Matrix<double,-1,1>
create_trend_vector_block_L(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nsize = std::numeric_limits<int>::min();
    current_statement__ = 157;
    nsize = get_num_elements_L_trend(degree, pstream__);
    current_statement__ = 158;
    stan::math::validate_non_negative_index("L", "nsize", nsize);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsize, DUMMY_VAR__);
    current_statement__ = 159;
    stan::model::assign(L, stan::math::rep_vector(0.0, nsize),
      "assigning variable L");
    current_statement__ = 160;
    stan::model::assign(L, 1.0, "assigning variable L",
      stan::model::index_uni(1));
    current_statement__ = 161;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix create_trend_matrix_block_R(int, int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>*>
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_R(const T0__& degree, const T1__& is_constant,
                            std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ncols = std::numeric_limits<int>::min();
    current_statement__ = 163;
    ncols = get_num_cols_R_trend(degree, pstream__);
    int nrows = std::numeric_limits<int>::min();
    current_statement__ = 164;
    nrows = get_num_rows_R_trend(degree, pstream__);
    current_statement__ = 165;
    stan::math::validate_non_negative_index("R", "nrows", nrows);
    current_statement__ = 166;
    stan::math::validate_non_negative_index("R", "ncols", ncols);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nrows, ncols,
        DUMMY_VAR__);
    current_statement__ = 167;
    stan::model::assign(R, stan::math::rep_matrix(0.0, nrows, ncols),
      "assigning variable R");
    current_statement__ = 168;
    stan::model::assign(R, (1.0 - is_constant), "assigning variable R",
      stan::model::index_uni(1), stan::model::index_uni(1));
    current_statement__ = 169;
    return stan::math::transpose(R);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int get_num_elements_alpha_trend(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*> int
get_num_elements_alpha_trend(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 171;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int get_num_cols_A_trend(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*> int
get_num_cols_A_trend(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 173;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int get_num_rows_A_trend(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*> int
get_num_rows_A_trend(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 175;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int get_num_elements_L_trend(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*> int
get_num_elements_L_trend(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 177;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int get_num_cols_R_trend(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*> int
get_num_cols_R_trend(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 179;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// int get_num_rows_R_trend(int)
template <typename T0__, stan::require_all_t<std::is_integral<T0__>>*> int
get_num_rows_R_trend(const T0__& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 181;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix create_seasonal_discrete_matrix_block_A(int, int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>*>
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_block_A(const T0__& num_seasons, const T1__&
                                        season_duration, std::ostream*
                                        pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 183;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 184;
    stan::math::validate_non_negative_index("A", "k", k);
    current_statement__ = 185;
    stan::math::validate_non_negative_index("A", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 186;
    stan::model::assign(A, stan::math::rep_matrix(0.0, k, k),
      "assigning variable A");
    current_statement__ = 191;
    for (int j = 1; j <= ((k - season_duration) - 1); ++j) {
      current_statement__ = 189;
      if (stan::math::logical_eq(stan::math::modulus(j, season_duration), 0)) {
        current_statement__ = 187;
        stan::model::assign(A, -(1.0), "assigning variable A",
          stan::model::index_uni(1), stan::model::index_uni(j));
      }
    }
    current_statement__ = 192;
    stan::model::assign(A, 1.0, "assigning variable A",
      stan::model::index_uni(1), stan::model::index_uni(k));
    current_statement__ = 195;
    for (int i = 2; i <= (k - 1); ++i) {
      current_statement__ = 193;
      stan::model::assign(A, 1.0, "assigning variable A",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
    }
    current_statement__ = 196;
    stan::model::assign(A, 1.0, "assigning variable A",
      stan::model::index_uni(k), stan::model::index_uni(k));
    current_statement__ = 197;
    return A;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector create_seasonal_discrete_vector_block_L(int, int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>>*>
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_block_L(const T0__& num_seasons, const T1__&
                                        season_duration, std::ostream*
                                        pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 199;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 200;
    stan::math::validate_non_negative_index("L", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 201;
    stan::model::assign(L, stan::math::rep_vector(0.0, k),
      "assigning variable L");
    current_statement__ = 202;
    stan::model::assign(L, 1.0, "assigning variable L",
      stan::model::index_uni(1));
    current_statement__ = 203;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// matrix create_seasonal_discrete_matrix_block_R(int, int, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>*>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_block_R(const T0__& num_seasons, const T1__&
                                        season_duration, const T2__& time,
                                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 205;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 206;
    stan::math::validate_non_negative_index("R", "k", k);
    current_statement__ = 207;
    stan::math::validate_non_negative_index("R", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 208;
    stan::model::assign(R, stan::math::rep_matrix(0.0, k, k),
      "assigning variable R");
    local_scalar_t__ reminder = DUMMY_VAR__;
    current_statement__ = 209;
    reminder = (stan::math::ceil((time / season_duration)) -
      stan::math::floor((time / season_duration)));
    current_statement__ = 210;
    stan::model::assign(R, (1.0 - reminder), "assigning variable R",
      stan::model::index_uni(k), stan::model::index_uni(k));
    current_statement__ = 211;
    return R;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// vector create_initial_seasonal_discrete_vector_block_alpha(vector, int, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              std::is_integral<T1__>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__>,-1,1>
create_initial_seasonal_discrete_vector_block_alpha(const T0__&
                                                    season_params_arg__,
                                                    const T1__&
                                                    season_duration,
                                                    const T2__& error_term,
                                                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& season_params = stan::math::to_ref(season_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 213;
    k = ((stan::math::num_elements(season_params) * season_duration) + 1);
    current_statement__ = 214;
    stan::math::validate_non_negative_index("alpha", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 216;
    stan::model::assign(alpha,
      rep_vec_piecewise(season_params, season_duration, pstream__),
      "assigning variable alpha", stan::model::index_min_max(1, (k - 1)));
    current_statement__ = 217;
    stan::model::assign(alpha, error_term, "assigning variable alpha",
      stan::model::index_uni(k));
    current_statement__ = 218;
    return alpha;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
/* matrix
   state_space_process_v3(int, int, int, matrix, matrix, matrix, matrix,
                          vector, vector, matrix, array[] matrix, matrix,
                          array[] matrix, vector, matrix)
 */
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__, typename T14__,
          stan::require_all_t<std::is_integral<T0__>, std::is_integral<T1__>,
                              std::is_integral<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_eigen_matrix_dynamic<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_std_vector<T10__>,
                              stan::is_eigen_matrix_dynamic<stan::value_type_t<T10__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T10__>>,
                              stan::is_eigen_matrix_dynamic<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_std_vector<T12__>,
                              stan::is_eigen_matrix_dynamic<stan::value_type_t<T12__>>,
                              stan::is_vt_not_complex<stan::value_type_t<T12__>>,
                              stan::is_col_vector<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_eigen_matrix_dynamic<T14__>,
                              stan::is_vt_not_complex<T14__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                stan::promote_args_t<stan::base_type_t<T8__>,
                  stan::base_type_t<T9__>, stan::base_type_t<T10__>,
                  stan::base_type_t<T11__>, stan::base_type_t<T12__>,
                  stan::promote_args_t<stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>>>>,-1,-1>
state_space_process_v3(const T0__& num_steps, const T1__& num_delays,
                       const T2__& num_strata, const T3__& A_mu_arg__,
                       const T4__& A_nu_arg__, const T5__& R_mu_arg__,
                       const T6__& R_nu_arg__, const T7__& L_mu_arg__,
                       const T8__& L_nu_arg__, const T9__& mu_0_arg__,
                       const T10__& xi_mu, const T11__& nu_0_arg__,
                       const T12__& xi_nu, const T13__& B_cnt_arg__,
                       const T14__& X_cnt_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::base_type_t<T7__>,
                             stan::promote_args_t<stan::base_type_t<T8__>,
                               stan::base_type_t<T9__>,
                               stan::base_type_t<T10__>,
                               stan::base_type_t<T11__>,
                               stan::base_type_t<T12__>,
                               stan::promote_args_t<stan::base_type_t<T13__>,
                                 stan::base_type_t<T14__>>>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& A_mu = stan::math::to_ref(A_mu_arg__);
  const auto& A_nu = stan::math::to_ref(A_nu_arg__);
  const auto& R_mu = stan::math::to_ref(R_mu_arg__);
  const auto& R_nu = stan::math::to_ref(R_nu_arg__);
  const auto& L_mu = stan::math::to_ref(L_mu_arg__);
  const auto& L_nu = stan::math::to_ref(L_nu_arg__);
  const auto& mu_0 = stan::math::to_ref(mu_0_arg__);
  const auto& nu_0 = stan::math::to_ref(nu_0_arg__);
  const auto& B_cnt = stan::math::to_ref(B_cnt_arg__);
  const auto& X_cnt = stan::math::to_ref(X_cnt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 220;
    stan::math::validate_non_negative_index("l", "num_delays * num_strata",
      (num_delays * num_strata));
    current_statement__ = 221;
    stan::math::validate_non_negative_index("l", "num_steps", num_steps);
    Eigen::Matrix<local_scalar_t__,-1,-1> l =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((num_delays *
        num_strata), num_steps, DUMMY_VAR__);
    current_statement__ = 223;
    stan::math::validate_non_negative_index("mu", "num_steps", num_steps);
    current_statement__ = 224;
    stan::math::validate_non_negative_index("mu", "num_delays * num_strata",
      (num_delays * num_strata));
    current_statement__ = 225;
    stan::math::validate_non_negative_index("mu", "num_elements(L_mu)",
      stan::math::num_elements(L_mu));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> mu =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((num_delays *
          num_strata), stan::math::num_elements(L_mu), DUMMY_VAR__));
    current_statement__ = 227;
    stan::model::assign(mu, mu_0, "assigning variable mu",
      stan::model::index_uni(1));
    current_statement__ = 228;
    stan::math::validate_non_negative_index("nu", "num_steps", num_steps);
    current_statement__ = 229;
    stan::math::validate_non_negative_index("nu", "num_delays * num_strata",
      (num_delays * num_strata));
    current_statement__ = 230;
    stan::math::validate_non_negative_index("nu", "num_elements(L_nu)",
      stan::math::num_elements(L_nu));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> nu =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((num_delays *
          num_strata), stan::math::num_elements(L_nu), DUMMY_VAR__));
    current_statement__ = 232;
    stan::model::assign(nu, nu_0, "assigning variable nu",
      stan::model::index_uni(1));
    current_statement__ = 237;
    for (int t = 1; t <= (num_steps - 1); ++t) {
      current_statement__ = 233;
      stan::model::assign(l,
        stan::math::add(
          stan::math::multiply(
            stan::model::rvalue(mu, "mu", stan::model::index_uni(t)), L_mu),
          stan::math::multiply(
            stan::model::rvalue(nu, "nu", stan::model::index_uni(t)), L_nu)),
        "assigning variable l", stan::model::index_omni(),
        stan::model::index_uni(t));
      current_statement__ = 234;
      stan::model::assign(mu,
        stan::math::add(
          stan::math::multiply(
            stan::model::deep_copy(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(t))), A_mu),
          stan::math::multiply(
            stan::model::rvalue(xi_mu, "xi_mu", stan::model::index_uni(t)),
            R_mu)), "assigning variable mu", stan::model::index_uni((t + 1)));
      current_statement__ = 235;
      stan::model::assign(nu,
        stan::math::add(
          stan::math::multiply(
            stan::model::deep_copy(
              stan::model::rvalue(nu, "nu", stan::model::index_uni(t))), A_nu),
          stan::math::multiply(
            stan::model::rvalue(xi_nu, "xi_nu", stan::model::index_uni(t)),
            R_nu)), "assigning variable nu", stan::model::index_uni((t + 1)));
    }
    current_statement__ = 238;
    stan::model::assign(l,
      stan::math::add(
        stan::math::multiply(
          stan::model::rvalue(mu, "mu", stan::model::index_uni(num_steps)),
          L_mu),
        stan::math::multiply(
          stan::model::rvalue(nu, "nu", stan::model::index_uni(num_steps)),
          L_nu)), "assigning variable l", stan::model::index_omni(),
      stan::model::index_uni(num_steps));
    current_statement__ = 239;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real dist_lpdf(vector, real, real, int)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>,
                              std::is_integral<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>
dist_lpdf(const T0__& x_arg__, const T1__& param_1, const T2__& param_2,
          const T3__& prior_spec, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& x = stan::math::to_ref(x_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 271;
    if (stan::math::logical_eq(prior_spec, 1)) {
      current_statement__ = 270;
      return stan::math::std_normal_lpdf<false>(x);
    } else {
      current_statement__ = 269;
      if (stan::math::logical_eq(prior_spec, 2)) {
        current_statement__ = 268;
        return stan::math::normal_lpdf<false>(x, param_1, param_2);
      } else {
        current_statement__ = 267;
        if (stan::math::logical_eq(prior_spec, 3)) {
          current_statement__ = 266;
          return stan::math::student_t_lpdf<false>(x, param_1, 0.0, param_2);
        } else {
          current_statement__ = 265;
          if (stan::math::logical_eq(prior_spec, 4)) {
            current_statement__ = 264;
            return stan::math::cauchy_lpdf<false>(x, param_1, param_2);
          } else {
            current_statement__ = 263;
            if (stan::math::logical_eq(prior_spec, 4)) {
              current_statement__ = 262;
              return stan::math::exponential_lpdf<false>(x, param_1);
            } else {
              current_statement__ = 261;
              if (stan::math::logical_eq(prior_spec, 5)) {
                current_statement__ = 260;
                return stan::math::gamma_lpdf<false>(x, param_1, param_2);
              } else {
                current_statement__ = 259;
                if (stan::math::logical_eq(prior_spec, 6)) {
                  current_statement__ = 258;
                  return stan::math::inv_gamma_lpdf<false>(x, param_1,
                           param_2);
                } else {
                  current_statement__ = 257;
                  if (stan::math::logical_eq(prior_spec, 7)) {
                    current_statement__ = 256;
                    return stan::math::lognormal_lpdf<false>(x, param_1,
                             param_2);
                  } else {
                    current_statement__ = 255;
                    if (stan::math::logical_eq(prior_spec, 8)) {
                      current_statement__ = 254;
                      return stan::math::weibull_lpdf<false>(x, param_1,
                               param_2);
                    } else {
                      current_statement__ = 253;
                      if (stan::math::logical_eq(prior_spec, 9)) {
                        current_statement__ = 252;
                        return stan::math::frechet_lpdf<false>(x, param_1,
                                 param_2);
                      } else {
                        current_statement__ = 251;
                        if (stan::math::logical_eq(prior_spec, 10)) {
                          current_statement__ = 250;
                          return stan::math::double_exponential_lpdf<false>(
                                   x, param_1, param_2);
                        } else {
                          current_statement__ = 249;
                          if (stan::math::logical_eq(prior_spec, 11)) {
                            current_statement__ = 248;
                            return stan::math::logistic_lpdf<false>(x,
                                     param_1, param_2);
                          } else {
                            current_statement__ = 247;
                            if (stan::math::logical_eq(prior_spec, 12)) {
                              current_statement__ = 246;
                              return stan::math::rayleigh_lpdf<false>(x,
                                       param_1);
                            } else {
                              current_statement__ = 245;
                              if (stan::math::logical_eq(prior_spec, 13)) {
                                current_statement__ = 244;
                                return stan::math::loglogistic_lpdf<false>(x,
                                         param_1, param_2);
                              } else {
                                current_statement__ = 243;
                                if (stan::math::logical_eq(prior_spec, 14)) {
                                  current_statement__ = 242;
                                  return stan::math::gumbel_lpdf<false>(x,
                                           param_1, param_2);
                                } else {
                                  current_statement__ = 241;
                                  {
                                    std::stringstream errmsg_stream__;
                                    stan::math::stan_print(&errmsg_stream__,
                                      "invalid link");
                                    throw std::domain_error(
                                            errmsg_stream__.str());
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    current_statement__ = 272;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_nowcast_v2 final : public model_base_crtp<model_nowcast_v2> {
private:
  int num_steps;
  int num_delays;
  int num_strata;
  int n_rows;
  std::vector<std::vector<int>> N_cases;
  int mu_degree;
  int mu_is_constant;
  int nu_degree;
  int nu_is_constant;
  int is_negative_binomial;
  int prior_only;
  double dispersion_prior_shape;
  double dispersion_prior_rate;
  double mu_shape_prior;
  double mu_rate_prior;
  double nu_shape_prior;
  double nu_rate_prior;
  int mu_prior;
  int nu_prior;
  int r_prior;
  double mean_mu_0_prior;
  double mean_nu_0_prior;
  double sigma_mu_0_prior;
  double sigma_nu_0_prior;
  Eigen::Matrix<double,-1,1> B_cnt_data__;
  Eigen::Matrix<double,-1,-1> X_cnt_data__;
  int nrows_mu_trend_A;
  int ncols_mu_trend_A;
  Eigen::Matrix<double,-1,-1> A_mu_data__;
  int nrows_nu_trend_A;
  int ncols_nu_trend_A;
  Eigen::Matrix<double,-1,-1> A_nu_data__;
  int nrows_mu_trend_R;
  int ncols_mu_trend_R;
  Eigen::Matrix<double,-1,-1> R_mu_data__;
  int nrows_nu_trend_R;
  int ncols_nu_trend_R;
  Eigen::Matrix<double,-1,-1> R_nu_data__;
  int num_elements_mu_L;
  Eigen::Matrix<double,-1,1> L_mu_data__;
  int num_elements_nu_L;
  Eigen::Matrix<double,-1,1> L_nu_data__;
  int mu_0_size;
  int nu_0_size;
  int xi_mu_size;
  int xi_nu_size;
  int n_col;
  int t_col;
  int d_col;
  int s_col;
  int mu_0_centered_1dim__;
  int nu_0_centered_1dim__;
  int xi_mu_1dim__;
  int xi_mu_2dim__;
  int xi_nu_1dim__;
  int xi_nu_2dim__;
  int r_1dim__;
  int mu_0_1dim__;
  int nu_0_1dim__;
  int lambda_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> B_cnt{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_cnt{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> A_mu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> A_nu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_mu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_nu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> L_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> L_nu{nullptr, 0};
public:
  ~model_nowcast_v2() {}
  model_nowcast_v2(stan::io::var_context& context__, unsigned int
                   random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nowcast_v2_namespace::model_nowcast_v2";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization", "num_steps", "int",
        std::vector<size_t>{});
      num_steps = std::numeric_limits<int>::min();
      current_statement__ = 33;
      num_steps = context__.vals_i("num_steps")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "num_steps", num_steps,
        1);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "num_delays", "int",
        std::vector<size_t>{});
      num_delays = std::numeric_limits<int>::min();
      current_statement__ = 34;
      num_delays = context__.vals_i("num_delays")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "num_delays",
        num_delays, 0);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "num_strata", "int",
        std::vector<size_t>{});
      num_strata = std::numeric_limits<int>::min();
      current_statement__ = 35;
      num_strata = context__.vals_i("num_strata")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "num_strata",
        num_strata, 1);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "n_rows", "int",
        std::vector<size_t>{});
      n_rows = std::numeric_limits<int>::min();
      current_statement__ = 36;
      n_rows = context__.vals_i("n_rows")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "n_rows", n_rows, 1);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("N_cases", "n_rows", n_rows);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "N_cases", "int",
        std::vector<size_t>{static_cast<size_t>(n_rows),
          static_cast<size_t>(4)});
      N_cases = std::vector<std::vector<int>>(n_rows,
                  std::vector<int>(4, std::numeric_limits<int>::min()));
      {
        std::vector<int> N_cases_flat__;
        current_statement__ = 38;
        N_cases_flat__ = context__.vals_i("N_cases");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_rows; ++sym2__) {
            stan::model::assign(N_cases, N_cases_flat__[(pos__ - 1)],
              "assigning variable N_cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      context__.validate_dims("data initialization", "mu_degree", "int",
        std::vector<size_t>{});
      mu_degree = std::numeric_limits<int>::min();
      current_statement__ = 39;
      mu_degree = context__.vals_i("mu_degree")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "mu_degree", mu_degree,
        0);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "mu_is_constant", "int",
        std::vector<size_t>{});
      mu_is_constant = std::numeric_limits<int>::min();
      current_statement__ = 40;
      mu_is_constant = context__.vals_i("mu_is_constant")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "mu_is_constant",
        mu_is_constant, 0);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "mu_is_constant",
        mu_is_constant, 1);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "nu_degree", "int",
        std::vector<size_t>{});
      nu_degree = std::numeric_limits<int>::min();
      current_statement__ = 41;
      nu_degree = context__.vals_i("nu_degree")[(1 - 1)];
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "nu_degree", nu_degree,
        0);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "nu_is_constant", "int",
        std::vector<size_t>{});
      nu_is_constant = std::numeric_limits<int>::min();
      current_statement__ = 42;
      nu_is_constant = context__.vals_i("nu_is_constant")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "nu_is_constant",
        nu_is_constant, 0);
      current_statement__ = 42;
      stan::math::check_less_or_equal(function__, "nu_is_constant",
        nu_is_constant, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "is_negative_binomial",
        "int", std::vector<size_t>{});
      is_negative_binomial = std::numeric_limits<int>::min();
      current_statement__ = 43;
      is_negative_binomial = context__.vals_i("is_negative_binomial")[(1 -
        1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "is_negative_binomial",
        is_negative_binomial, 0);
      current_statement__ = 43;
      stan::math::check_less_or_equal(function__, "is_negative_binomial",
        is_negative_binomial, 1);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 44;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "prior_only",
        prior_only, 0);
      current_statement__ = 44;
      stan::math::check_less_or_equal(function__, "prior_only", prior_only, 1);
      current_statement__ = 45;
      context__.validate_dims("data initialization",
        "dispersion_prior_shape", "double", std::vector<size_t>{});
      dispersion_prior_shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      dispersion_prior_shape = context__.vals_r("dispersion_prior_shape")[(1
        - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__,
        "dispersion_prior_shape", dispersion_prior_shape, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "dispersion_prior_rate",
        "double", std::vector<size_t>{});
      dispersion_prior_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 46;
      dispersion_prior_rate = context__.vals_r("dispersion_prior_rate")[(1 -
        1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "dispersion_prior_rate",
        dispersion_prior_rate, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "mu_shape_prior",
        "double", std::vector<size_t>{});
      mu_shape_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 47;
      mu_shape_prior = context__.vals_r("mu_shape_prior")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "mu_shape_prior",
        mu_shape_prior, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "mu_rate_prior",
        "double", std::vector<size_t>{});
      mu_rate_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      mu_rate_prior = context__.vals_r("mu_rate_prior")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "mu_rate_prior",
        mu_rate_prior, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "nu_shape_prior",
        "double", std::vector<size_t>{});
      nu_shape_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 49;
      nu_shape_prior = context__.vals_r("nu_shape_prior")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "nu_shape_prior",
        nu_shape_prior, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "nu_rate_prior",
        "double", std::vector<size_t>{});
      nu_rate_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 50;
      nu_rate_prior = context__.vals_r("nu_rate_prior")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "nu_rate_prior",
        nu_rate_prior, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "mu_prior", "int",
        std::vector<size_t>{});
      mu_prior = std::numeric_limits<int>::min();
      current_statement__ = 51;
      mu_prior = context__.vals_i("mu_prior")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "mu_prior", mu_prior, 1);
      current_statement__ = 51;
      stan::math::check_less_or_equal(function__, "mu_prior", mu_prior, 14);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "nu_prior", "int",
        std::vector<size_t>{});
      nu_prior = std::numeric_limits<int>::min();
      current_statement__ = 52;
      nu_prior = context__.vals_i("nu_prior")[(1 - 1)];
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "nu_prior", nu_prior, 1);
      current_statement__ = 52;
      stan::math::check_less_or_equal(function__, "nu_prior", nu_prior, 14);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "r_prior", "int",
        std::vector<size_t>{});
      r_prior = std::numeric_limits<int>::min();
      current_statement__ = 53;
      r_prior = context__.vals_i("r_prior")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "r_prior", r_prior, 1);
      current_statement__ = 53;
      stan::math::check_less_or_equal(function__, "r_prior", r_prior, 14);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "mean_mu_0_prior",
        "double", std::vector<size_t>{});
      mean_mu_0_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      mean_mu_0_prior = context__.vals_r("mean_mu_0_prior")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization", "mean_nu_0_prior",
        "double", std::vector<size_t>{});
      mean_nu_0_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 55;
      mean_nu_0_prior = context__.vals_r("mean_nu_0_prior")[(1 - 1)];
      current_statement__ = 56;
      context__.validate_dims("data initialization", "sigma_mu_0_prior",
        "double", std::vector<size_t>{});
      sigma_mu_0_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 56;
      sigma_mu_0_prior = context__.vals_r("sigma_mu_0_prior")[(1 - 1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "sigma_mu_0_prior",
        sigma_mu_0_prior, 0);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "sigma_nu_0_prior",
        "double", std::vector<size_t>{});
      sigma_nu_0_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 57;
      sigma_nu_0_prior = context__.vals_r("sigma_nu_0_prior")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "sigma_nu_0_prior",
        sigma_nu_0_prior, 0);
      current_statement__ = 58;
      B_cnt_data__ = Eigen::Matrix<double,-1,1>::Constant(1,
                       std::numeric_limits<double>::quiet_NaN());
      new (&B_cnt)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(B_cnt_data__.data(), 1);
      current_statement__ = 58;
      stan::model::assign(B_cnt, stan::math::rep_vector(0.0, 1),
        "assigning variable B_cnt");
      current_statement__ = 59;
      X_cnt_data__ = Eigen::Matrix<double,-1,-1>::Constant(1, 1,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_cnt)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_cnt_data__.data(), 1, 1);
      current_statement__ = 59;
      stan::model::assign(X_cnt, stan::math::rep_matrix(0.0, 1, 1),
        "assigning variable X_cnt");
      current_statement__ = 60;
      nrows_mu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 60;
      nrows_mu_trend_A = get_num_rows_A_trend(mu_degree, pstream__);
      current_statement__ = 61;
      ncols_mu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 61;
      ncols_mu_trend_A = get_num_cols_A_trend(mu_degree, pstream__);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("A_mu", "nrows_mu_trend_A",
        nrows_mu_trend_A);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("A_mu", "ncols_mu_trend_A",
        ncols_mu_trend_A);
      current_statement__ = 64;
      A_mu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_mu_trend_A,
                      ncols_mu_trend_A,
                      std::numeric_limits<double>::quiet_NaN());
      new (&A_mu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(A_mu_data__.data(),
        nrows_mu_trend_A, ncols_mu_trend_A);
      current_statement__ = 64;
      stan::model::assign(A_mu,
        create_trend_matrix_block_A(mu_degree, pstream__),
        "assigning variable A_mu");
      current_statement__ = 65;
      nrows_nu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 65;
      nrows_nu_trend_A = get_num_rows_A_trend(nu_degree, pstream__);
      current_statement__ = 66;
      ncols_nu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 66;
      ncols_nu_trend_A = get_num_cols_A_trend(nu_degree, pstream__);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("A_nu", "nrows_nu_trend_A",
        nrows_nu_trend_A);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("A_nu", "ncols_nu_trend_A",
        ncols_nu_trend_A);
      current_statement__ = 69;
      A_nu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_nu_trend_A,
                      ncols_nu_trend_A,
                      std::numeric_limits<double>::quiet_NaN());
      new (&A_nu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(A_nu_data__.data(),
        nrows_nu_trend_A, ncols_nu_trend_A);
      current_statement__ = 69;
      stan::model::assign(A_nu,
        create_trend_matrix_block_A(nu_degree, pstream__),
        "assigning variable A_nu");
      current_statement__ = 70;
      nrows_mu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 70;
      nrows_mu_trend_R = get_num_rows_R_trend(mu_degree, pstream__);
      current_statement__ = 71;
      ncols_mu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 71;
      ncols_mu_trend_R = get_num_cols_R_trend(mu_degree, pstream__);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("R_mu", "nrows_mu_trend_R",
        nrows_mu_trend_R);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("R_mu", "ncols_mu_trend_R",
        ncols_mu_trend_R);
      current_statement__ = 74;
      R_mu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_mu_trend_R,
                      ncols_mu_trend_R,
                      std::numeric_limits<double>::quiet_NaN());
      new (&R_mu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_mu_data__.data(),
        nrows_mu_trend_R, ncols_mu_trend_R);
      current_statement__ = 74;
      stan::model::assign(R_mu,
        create_trend_matrix_block_R(mu_degree, mu_is_constant, pstream__),
        "assigning variable R_mu");
      current_statement__ = 75;
      nrows_nu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 75;
      nrows_nu_trend_R = get_num_rows_R_trend(nu_degree, pstream__);
      current_statement__ = 76;
      ncols_nu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 76;
      ncols_nu_trend_R = get_num_cols_R_trend(nu_degree, pstream__);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("R_nu", "nrows_nu_trend_R",
        nrows_nu_trend_R);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("R_nu", "ncols_nu_trend_R",
        ncols_nu_trend_R);
      current_statement__ = 79;
      R_nu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_nu_trend_R,
                      ncols_nu_trend_R,
                      std::numeric_limits<double>::quiet_NaN());
      new (&R_nu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_nu_data__.data(),
        nrows_nu_trend_R, ncols_nu_trend_R);
      current_statement__ = 79;
      stan::model::assign(R_nu,
        create_trend_matrix_block_R(nu_degree, nu_is_constant, pstream__),
        "assigning variable R_nu");
      current_statement__ = 80;
      num_elements_mu_L = std::numeric_limits<int>::min();
      current_statement__ = 80;
      num_elements_mu_L = get_num_elements_L_trend(mu_degree, pstream__);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("L_mu", "num_elements_mu_L",
        num_elements_mu_L);
      current_statement__ = 82;
      L_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(num_elements_mu_L,
                      std::numeric_limits<double>::quiet_NaN());
      new (&L_mu) Eigen::Map<Eigen::Matrix<double,-1,1>>(L_mu_data__.data(),
        num_elements_mu_L);
      current_statement__ = 82;
      stan::model::assign(L_mu,
        create_trend_vector_block_L(mu_degree, pstream__),
        "assigning variable L_mu");
      current_statement__ = 83;
      num_elements_nu_L = std::numeric_limits<int>::min();
      current_statement__ = 83;
      num_elements_nu_L = get_num_elements_L_trend(nu_degree, pstream__);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("L_nu", "num_elements_nu_L",
        num_elements_nu_L);
      current_statement__ = 85;
      L_nu_data__ = Eigen::Matrix<double,-1,1>::Constant(num_elements_nu_L,
                      std::numeric_limits<double>::quiet_NaN());
      new (&L_nu) Eigen::Map<Eigen::Matrix<double,-1,1>>(L_nu_data__.data(),
        num_elements_nu_L);
      current_statement__ = 85;
      stan::model::assign(L_nu,
        create_trend_vector_block_L(nu_degree, pstream__),
        "assigning variable L_nu");
      current_statement__ = 86;
      mu_0_size = std::numeric_limits<int>::min();
      current_statement__ = 86;
      mu_0_size = num_elements_mu_L;
      current_statement__ = 87;
      nu_0_size = std::numeric_limits<int>::min();
      current_statement__ = 87;
      nu_0_size = num_elements_nu_L;
      current_statement__ = 88;
      xi_mu_size = std::numeric_limits<int>::min();
      current_statement__ = 88;
      xi_mu_size = nrows_mu_trend_R;
      current_statement__ = 89;
      xi_nu_size = std::numeric_limits<int>::min();
      current_statement__ = 89;
      xi_nu_size = nrows_nu_trend_R;
      current_statement__ = 90;
      n_col = std::numeric_limits<int>::min();
      current_statement__ = 90;
      n_col = 1;
      current_statement__ = 91;
      t_col = std::numeric_limits<int>::min();
      current_statement__ = 91;
      t_col = 2;
      current_statement__ = 92;
      d_col = std::numeric_limits<int>::min();
      current_statement__ = 92;
      d_col = 3;
      current_statement__ = 93;
      s_col = std::numeric_limits<int>::min();
      current_statement__ = 93;
      s_col = 4;
      current_statement__ = 94;
      mu_0_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 94;
      mu_0_centered_1dim__ = (num_strata * num_delays);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("mu_0_centered",
        "num_strata * num_delays", mu_0_centered_1dim__);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("mu_0_centered", "mu_0_size",
        mu_0_size);
      current_statement__ = 96;
      nu_0_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 96;
      nu_0_centered_1dim__ = (num_strata * num_delays);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("nu_0_centered",
        "num_strata * num_delays", nu_0_centered_1dim__);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("nu_0_centered", "nu_0_size",
        nu_0_size);
      current_statement__ = 98;
      xi_mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 98;
      xi_mu_1dim__ = (num_steps - 1);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("xi_mu", "num_steps - 1",
        xi_mu_1dim__);
      current_statement__ = 99;
      xi_mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 99;
      xi_mu_2dim__ = (num_strata * num_delays);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("xi_mu",
        "num_strata * num_delays", xi_mu_2dim__);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("xi_mu", "xi_mu_size",
        xi_mu_size);
      current_statement__ = 101;
      xi_nu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 101;
      xi_nu_1dim__ = (num_steps - 1);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("xi_nu", "num_steps - 1",
        xi_nu_1dim__);
      current_statement__ = 102;
      xi_nu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 102;
      xi_nu_2dim__ = (num_strata * num_delays);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("xi_nu",
        "num_strata * num_delays", xi_nu_2dim__);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("xi_nu", "xi_nu_size",
        xi_nu_size);
      current_statement__ = 104;
      r_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 104;
      r_1dim__ = (is_negative_binomial ? 1 : 0);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("r",
        "is_negative_binomial ? 1 : 0", r_1dim__);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("sigma_mu", "1", 1);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("sigma_nu", "1", 1);
      current_statement__ = 107;
      mu_0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 107;
      mu_0_1dim__ = (num_strata * num_delays);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("mu_0",
        "num_strata * num_delays", mu_0_1dim__);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("mu_0", "mu_0_size", mu_0_size);
      current_statement__ = 109;
      nu_0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 109;
      nu_0_1dim__ = (num_strata * num_delays);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("nu_0",
        "num_strata * num_delays", nu_0_1dim__);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("nu_0", "nu_0_size", nu_0_size);
      current_statement__ = 111;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 111;
      lambda_1dim__ = (num_delays * num_strata);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("lambda",
        "num_delays * num_strata", lambda_1dim__);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("lambda", "num_steps",
        num_steps);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("lambda_mean", "n_rows", n_rows);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (mu_0_centered_1dim__ * mu_0_size) +
      (nu_0_centered_1dim__ * nu_0_size) + (xi_mu_1dim__ * (xi_mu_2dim__ *
      xi_mu_size)) + (xi_nu_1dim__ * (xi_nu_2dim__ * xi_nu_size)) + r_1dim__
      + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_nowcast_v2";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.35.0",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcast_v2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 1;
      mu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
                        mu_0_size);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 2;
      nu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
                        nu_0_size);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_2dim__,
            xi_mu_size, DUMMY_VAR__));
      current_statement__ = 3;
      xi_mu = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_mu_1dim__,
                xi_mu_2dim__, xi_mu_size);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_2dim__,
            xi_nu_size, DUMMY_VAR__));
      current_statement__ = 4;
      xi_nu = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_nu_1dim__,
                xi_nu_2dim__, xi_nu_size);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            r_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_mu = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   1);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_nu = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   1);
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(mu_0,
        stan::math::add(
          stan::math::rep_matrix(mean_mu_0_prior, (num_strata * num_delays),
            mu_0_size), stan::math::multiply(sigma_mu_0_prior, mu_0_centered)),
        "assigning variable mu_0");
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(nu_0,
        stan::math::add(
          stan::math::rep_matrix(mean_nu_0_prior, (num_strata * num_delays),
            nu_0_size), stan::math::multiply(sigma_nu_0_prior, nu_0_centered)),
        "assigning variable nu_0");
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lambda_1dim__,
          num_steps, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lambda,
        state_space_process_v3(num_steps, num_delays, num_strata, A_mu, A_nu,
          stan::math::multiply(
            stan::model::rvalue(sigma_mu, "sigma_mu",
              stan::model::index_uni(1)), R_mu),
          stan::math::multiply(
            stan::model::rvalue(sigma_nu, "sigma_nu",
              stan::model::index_uni(1)), R_nu), L_mu, L_nu, mu_0, xi_mu,
          nu_0, xi_nu, B_cnt, X_cnt, pstream__), "assigning variable lambda");
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_mean =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rows, DUMMY_VAR__);
      current_statement__ = 14;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 13;
        stan::model::assign(lambda_mean,
          stan::model::rvalue(lambda, "lambda",
            stan::model::index_uni(((num_strata *
              (stan::model::rvalue(N_cases, "N_cases",
                 stan::model::index_uni(n), stan::model::index_uni(d_col)) -
              1)) +
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(s_col)))),
            stan::model::index_uni(
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))),
          "assigning variable lambda_mean", stan::model::index_uni(n));
      }
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 12;
      lprior = 0;
      current_statement__ = 15;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(mu_0_centered)));
      current_statement__ = 16;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(nu_0_centered)));
      current_statement__ = 20;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 17;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_mu, "xi_mu", stan::model::index_uni(t)))));
        current_statement__ = 18;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_nu, "xi_nu", stan::model::index_uni(t)))));
      }
      current_statement__ = 21;
      lprior = (lprior +
        dist_lpdf<false>(sigma_mu, mu_shape_prior, mu_rate_prior, mu_prior,
          pstream__));
      current_statement__ = 22;
      lprior = (lprior +
        dist_lpdf<false>(sigma_nu, nu_shape_prior, nu_rate_prior, nu_prior,
          pstream__));
      current_statement__ = 24;
      if (is_negative_binomial) {
        current_statement__ = 23;
        lprior = (lprior +
          dist_lpdf<false>(r, dispersion_prior_shape, dispersion_prior_rate,
            r_prior, pstream__));
      }
      {
        current_statement__ = 31;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 29;
          if (is_negative_binomial) {
            current_statement__ = 27;
            lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<false>(
                             stan::model::rvalue(N_cases, "N_cases",
                               stan::model::index_omni(),
                               stan::model::index_uni(n_col)), lambda_mean,
                             stan::math::rep_vector(
                               stan::model::rvalue(r, "r",
                                 stan::model::index_uni(1)),
                               stan::math::num_elements(lambda_mean))));
          } else {
            current_statement__ = 25;
            lp_accum__.add(stan::math::poisson_log_lpmf<false>(
                             stan::model::rvalue(N_cases, "N_cases",
                               stan::model::index_omni(),
                               stan::model::index_uni(n_col)), lambda_mean));
          }
        }
        current_statement__ = 32;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcast_v2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 1;
      mu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
                        mu_0_size);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 2;
      nu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
                        nu_0_size);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_2dim__,
            xi_mu_size, DUMMY_VAR__));
      current_statement__ = 3;
      xi_mu = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_mu_1dim__,
                xi_mu_2dim__, xi_mu_size);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_2dim__,
            xi_nu_size, DUMMY_VAR__));
      current_statement__ = 4;
      xi_nu = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_nu_1dim__,
                xi_nu_2dim__, xi_nu_size);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            r_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_mu = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   1);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_nu = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   1);
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(mu_0,
        stan::math::add(
          stan::math::rep_matrix(mean_mu_0_prior, (num_strata * num_delays),
            mu_0_size), stan::math::multiply(sigma_mu_0_prior, mu_0_centered)),
        "assigning variable mu_0");
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(nu_0,
        stan::math::add(
          stan::math::rep_matrix(mean_nu_0_prior, (num_strata * num_delays),
            nu_0_size), stan::math::multiply(sigma_nu_0_prior, nu_0_centered)),
        "assigning variable nu_0");
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lambda_1dim__,
          num_steps, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lambda,
        state_space_process_v3(num_steps, num_delays, num_strata, A_mu, A_nu,
          stan::math::multiply(
            stan::model::rvalue(sigma_mu, "sigma_mu",
              stan::model::index_uni(1)), R_mu),
          stan::math::multiply(
            stan::model::rvalue(sigma_nu, "sigma_nu",
              stan::model::index_uni(1)), R_nu), L_mu, L_nu, mu_0, xi_mu,
          nu_0, xi_nu, B_cnt, X_cnt, pstream__), "assigning variable lambda");
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_mean =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rows, DUMMY_VAR__);
      current_statement__ = 14;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 13;
        stan::model::assign(lambda_mean,
          stan::model::rvalue(lambda, "lambda",
            stan::model::index_uni(((num_strata *
              (stan::model::rvalue(N_cases, "N_cases",
                 stan::model::index_uni(n), stan::model::index_uni(d_col)) -
              1)) +
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(s_col)))),
            stan::model::index_uni(
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))),
          "assigning variable lambda_mean", stan::model::index_uni(n));
      }
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 12;
      lprior = 0;
      current_statement__ = 15;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(mu_0_centered)));
      current_statement__ = 16;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(nu_0_centered)));
      current_statement__ = 20;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 17;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_mu, "xi_mu", stan::model::index_uni(t)))));
        current_statement__ = 18;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_nu, "xi_nu", stan::model::index_uni(t)))));
      }
      current_statement__ = 21;
      lprior = (lprior +
        dist_lpdf<false>(sigma_mu, mu_shape_prior, mu_rate_prior, mu_prior,
          pstream__));
      current_statement__ = 22;
      lprior = (lprior +
        dist_lpdf<false>(sigma_nu, nu_shape_prior, nu_rate_prior, nu_prior,
          pstream__));
      current_statement__ = 24;
      if (is_negative_binomial) {
        current_statement__ = 23;
        lprior = (lprior +
          dist_lpdf<false>(r, dispersion_prior_shape, dispersion_prior_rate,
            r_prior, pstream__));
      }
      {
        current_statement__ = 31;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 29;
          if (is_negative_binomial) {
            current_statement__ = 27;
            lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<false>(
                             stan::model::rvalue(N_cases, "N_cases",
                               stan::model::index_omni(),
                               stan::model::index_uni(n_col)), lambda_mean,
                             stan::math::rep_vector(
                               stan::model::rvalue(r, "r",
                                 stan::model::index_uni(1)),
                               stan::math::num_elements(lambda_mean))));
          } else {
            current_statement__ = 25;
            lp_accum__.add(stan::math::poisson_log_lpmf<false>(
                             stan::model::rvalue(N_cases, "N_cases",
                               stan::model::index_omni(),
                               stan::model::index_uni(n_col)), lambda_mean));
          }
        }
        current_statement__ = 32;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_nowcast_v2_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> mu_0_centered =
        Eigen::Matrix<double,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
                        mu_0_size);
      Eigen::Matrix<double,-1,-1> nu_0_centered =
        Eigen::Matrix<double,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      nu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
                        nu_0_size);
      std::vector<Eigen::Matrix<double,-1,-1>> xi_mu =
        std::vector<Eigen::Matrix<double,-1,-1>>(xi_mu_1dim__,
          Eigen::Matrix<double,-1,-1>::Constant(xi_mu_2dim__, xi_mu_size,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      xi_mu = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_mu_1dim__,
                xi_mu_2dim__, xi_mu_size);
      std::vector<Eigen::Matrix<double,-1,-1>> xi_nu =
        std::vector<Eigen::Matrix<double,-1,-1>>(xi_nu_1dim__,
          Eigen::Matrix<double,-1,-1>::Constant(xi_nu_2dim__, xi_nu_size,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      xi_nu = in__.template read<
                std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_nu_1dim__,
                xi_nu_2dim__, xi_nu_size);
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(r_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            r_1dim__);
      Eigen::Matrix<double,-1,1> sigma_mu =
        Eigen::Matrix<double,-1,1>::Constant(1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigma_mu = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   1);
      Eigen::Matrix<double,-1,1> sigma_nu =
        Eigen::Matrix<double,-1,1>::Constant(1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sigma_nu = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   1);
      Eigen::Matrix<double,-1,-1> mu_0 =
        Eigen::Matrix<double,-1,-1>::Constant(mu_0_1dim__, mu_0_size,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> nu_0 =
        Eigen::Matrix<double,-1,-1>::Constant(nu_0_1dim__, nu_0_size,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lambda =
        Eigen::Matrix<double,-1,-1>::Constant(lambda_1dim__, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda_mean =
        Eigen::Matrix<double,-1,1>::Constant(n_rows,
          std::numeric_limits<double>::quiet_NaN());
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_0_centered);
      out__.write(nu_0_centered);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_mu_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= xi_mu_1dim__; ++sym3__) {
            out__.write(stan::model::rvalue(xi_mu, "xi_mu",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_nu_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= xi_nu_1dim__; ++sym3__) {
            out__.write(stan::model::rvalue(xi_nu, "xi_nu",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(r);
      out__.write(sigma_mu);
      out__.write(sigma_nu);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 8;
      stan::model::assign(mu_0,
        stan::math::add(
          stan::math::rep_matrix(mean_mu_0_prior, (num_strata * num_delays),
            mu_0_size), stan::math::multiply(sigma_mu_0_prior, mu_0_centered)),
        "assigning variable mu_0");
      current_statement__ = 9;
      stan::model::assign(nu_0,
        stan::math::add(
          stan::math::rep_matrix(mean_nu_0_prior, (num_strata * num_delays),
            nu_0_size), stan::math::multiply(sigma_nu_0_prior, nu_0_centered)),
        "assigning variable nu_0");
      current_statement__ = 10;
      stan::model::assign(lambda,
        state_space_process_v3(num_steps, num_delays, num_strata, A_mu, A_nu,
          stan::math::multiply(
            stan::model::rvalue(sigma_mu, "sigma_mu",
              stan::model::index_uni(1)), R_mu),
          stan::math::multiply(
            stan::model::rvalue(sigma_nu, "sigma_nu",
              stan::model::index_uni(1)), R_nu), L_mu, L_nu, mu_0, xi_mu,
          nu_0, xi_nu, B_cnt, X_cnt, pstream__), "assigning variable lambda");
      current_statement__ = 14;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 13;
        stan::model::assign(lambda_mean,
          stan::model::rvalue(lambda, "lambda",
            stan::model::index_uni(((num_strata *
              (stan::model::rvalue(N_cases, "N_cases",
                 stan::model::index_uni(n), stan::model::index_uni(d_col)) -
              1)) +
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(s_col)))),
            stan::model::index_uni(
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))),
          "assigning variable lambda_mean", stan::model::index_uni(n));
      }
      current_statement__ = 12;
      lprior = 0;
      current_statement__ = 15;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(mu_0_centered)));
      current_statement__ = 16;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(nu_0_centered)));
      current_statement__ = 20;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 17;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_mu, "xi_mu", stan::model::index_uni(t)))));
        current_statement__ = 18;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_nu, "xi_nu", stan::model::index_uni(t)))));
      }
      current_statement__ = 21;
      lprior = (lprior +
        dist_lpdf<false>(sigma_mu, mu_shape_prior, mu_rate_prior, mu_prior,
          pstream__));
      current_statement__ = 22;
      lprior = (lprior +
        dist_lpdf<false>(sigma_nu, nu_shape_prior, nu_rate_prior, nu_prior,
          pstream__));
      current_statement__ = 24;
      if (is_negative_binomial) {
        current_statement__ = 23;
        lprior = (lprior +
          dist_lpdf<false>(r, dispersion_prior_shape, dispersion_prior_rate,
            r_prior, pstream__));
      }
      if (emit_transformed_parameters__) {
        out__.write(mu_0);
        out__.write(nu_0);
        out__.write(lambda);
        out__.write(lambda_mean);
        out__.write(lprior);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu_0_centered,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
          mu_0_size), "assigning variable mu_0_centered");
      out__.write(mu_0_centered);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(nu_0_centered,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
          nu_0_size), "assigning variable nu_0_centered");
      out__.write(nu_0_centered);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_2dim__,
            xi_mu_size, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_mu_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= xi_mu_1dim__; ++sym3__) {
            current_statement__ = 3;
            stan::model::assign(xi_mu, in__.read<local_scalar_t__>(),
              "assigning variable xi_mu", stan::model::index_uni(sym3__),
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(xi_mu);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_2dim__,
            xi_nu_size, DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_nu_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= xi_nu_1dim__; ++sym3__) {
            current_statement__ = 4;
            stan::model::assign(xi_nu, in__.read<local_scalar_t__>(),
              "assigning variable xi_nu", stan::model::index_uni(sym3__),
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(xi_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(r,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(r_1dim__),
        "assigning variable r");
      out__.write_free_lb(0, r);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigma_mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(1),
        "assigning variable sigma_mu");
      out__.write_free_lb(0, sigma_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(sigma_nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(1),
        "assigning variable sigma_nu");
      out__.write_free_lb(0, sigma_nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_0_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(mu_0_centered_1dim__),
          static_cast<size_t>(mu_0_size)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "nu_0_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(nu_0_centered_1dim__),
          static_cast<size_t>(nu_0_size)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "xi_mu", "double",
        std::vector<size_t>{static_cast<size_t>(xi_mu_1dim__),
          static_cast<size_t>(xi_mu_2dim__), static_cast<size_t>(xi_mu_size)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "xi_nu", "double",
        std::vector<size_t>{static_cast<size_t>(xi_nu_1dim__),
          static_cast<size_t>(xi_nu_2dim__), static_cast<size_t>(xi_nu_size)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{static_cast<size_t>(r_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_mu",
        "double", std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma_nu",
        "double", std::vector<size_t>{static_cast<size_t>(1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_0_centered_flat__;
        current_statement__ = 1;
        mu_0_centered_flat__ = context__.vals_r("mu_0_centered");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= mu_0_centered_1dim__; ++sym2__) {
            stan::model::assign(mu_0_centered, mu_0_centered_flat__[(pos__ -
              1)], "assigning variable mu_0_centered",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(mu_0_centered);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_0_centered_flat__;
        current_statement__ = 2;
        nu_0_centered_flat__ = context__.vals_r("nu_0_centered");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nu_0_centered_1dim__; ++sym2__) {
            stan::model::assign(nu_0_centered, nu_0_centered_flat__[(pos__ -
              1)], "assigning variable nu_0_centered",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(nu_0_centered);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_2dim__,
            xi_mu_size, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> xi_mu_flat__;
        current_statement__ = 3;
        xi_mu_flat__ = context__.vals_r("xi_mu");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= xi_mu_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= xi_mu_1dim__; ++sym3__) {
              stan::model::assign(xi_mu, xi_mu_flat__[(pos__ - 1)],
                "assigning variable xi_mu", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(xi_mu);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_2dim__,
            xi_nu_size, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> xi_nu_flat__;
        current_statement__ = 4;
        xi_nu_flat__ = context__.vals_r("xi_nu");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= xi_nu_2dim__; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= xi_nu_1dim__; ++sym3__) {
              stan::model::assign(xi_nu, xi_nu_flat__[(pos__ - 1)],
                "assigning variable xi_nu", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(xi_nu);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 5;
        r_flat__ = context__.vals_r("r");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
          stan::model::assign(r, r_flat__[(pos__ - 1)],
            "assigning variable r", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, r);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_mu_flat__;
        current_statement__ = 6;
        sigma_mu_flat__ = context__.vals_r("sigma_mu");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          stan::model::assign(sigma_mu, sigma_mu_flat__[(pos__ - 1)],
            "assigning variable sigma_mu", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_mu);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_nu_flat__;
        current_statement__ = 7;
        sigma_nu_flat__ = context__.vals_r("sigma_nu");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          stan::model::assign(sigma_nu, sigma_nu_flat__[(pos__ - 1)],
            "assigning variable sigma_nu", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_nu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_0_centered", "nu_0_centered",
                "xi_mu", "xi_nu", "r", "sigma_mu", "sigma_nu"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"mu_0", "nu_0", "lambda", "lambda_mean", "lprior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    mu_0_centered_1dim__),
                                                 static_cast<size_t>(
                                                   mu_0_size)},
                std::vector<size_t>{static_cast<size_t>(nu_0_centered_1dim__),
                  static_cast<size_t>(nu_0_size)},
                std::vector<size_t>{static_cast<size_t>(xi_mu_1dim__),
                  static_cast<size_t>(xi_mu_2dim__),
                  static_cast<size_t>(xi_mu_size)},
                std::vector<size_t>{static_cast<size_t>(xi_nu_1dim__),
                  static_cast<size_t>(xi_nu_2dim__),
                  static_cast<size_t>(xi_nu_size)},
                std::vector<size_t>{static_cast<size_t>(r_1dim__)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(mu_0_1dim__),
               static_cast<size_t>(mu_0_size)},
             std::vector<size_t>{static_cast<size_t>(nu_0_1dim__),
               static_cast<size_t>(nu_0_size)},
             std::vector<size_t>{static_cast<size_t>(lambda_1dim__),
               static_cast<size_t>(num_steps)},
             std::vector<size_t>{static_cast<size_t>(n_rows)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= mu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "nu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_mu_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_mu_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_mu" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_nu_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_nu_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_nu" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_nu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mu_0_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nu_0_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lambda_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_mean" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= mu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "nu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_mu_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_mu_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_mu" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_nu_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_nu_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_nu" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_nu" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mu_0_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nu_0_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lambda_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_mean" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_0_centered_1dim__) + ",\"cols\":" + std::to_string(mu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"nu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nu_0_centered_1dim__) + ",\"cols\":" + std::to_string(nu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_mu_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_mu_2dim__) + ",\"cols\":" + std::to_string(xi_mu_size) + "}},\"block\":\"parameters\"},{\"name\":\"xi_nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_nu_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_nu_2dim__) + ",\"cols\":" + std::to_string(xi_nu_size) + "}},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"sigma_nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_0_1dim__) + ",\"cols\":" + std::to_string(mu_0_size) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nu_0_1dim__) + ",\"cols\":" + std::to_string(nu_0_size) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lambda_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rows) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_0_centered_1dim__) + ",\"cols\":" + std::to_string(mu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"nu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nu_0_centered_1dim__) + ",\"cols\":" + std::to_string(nu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_mu_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_mu_2dim__) + ",\"cols\":" + std::to_string(xi_mu_size) + "}},\"block\":\"parameters\"},{\"name\":\"xi_nu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_nu_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_nu_2dim__) + ",\"cols\":" + std::to_string(xi_nu_size) + "}},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"sigma_nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"mu_0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_0_1dim__) + ",\"cols\":" + std::to_string(mu_0_size) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nu_0_1dim__) + ",\"cols\":" + std::to_string(nu_0_size) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lambda_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rows) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((mu_0_centered_1dim__ * mu_0_size) +
      (nu_0_centered_1dim__ * nu_0_size)) + (xi_mu_1dim__ * (xi_mu_2dim__ *
      xi_mu_size))) + (xi_nu_1dim__ * (xi_nu_2dim__ * xi_nu_size))) +
      r_1dim__) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((mu_0_1dim__ * mu_0_size) + (nu_0_1dim__ * nu_0_size)) +
      (lambda_1dim__ * num_steps)) + n_rows) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((mu_0_centered_1dim__ * mu_0_size) +
      (nu_0_centered_1dim__ * nu_0_size)) + (xi_mu_1dim__ * (xi_mu_2dim__ *
      xi_mu_size))) + (xi_nu_1dim__ * (xi_nu_2dim__ * xi_nu_size))) +
      r_1dim__) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((mu_0_1dim__ * mu_0_size) + (nu_0_1dim__ * nu_0_size)) +
      (lambda_1dim__ * num_steps)) + n_rows) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nowcast_v2_namespace::model_nowcast_v2;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nowcast_v2_namespace::profiles__;
}
#endif
#endif
