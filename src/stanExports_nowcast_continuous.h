// Generated by rstantools.  Do not edit by hand.

#ifndef LICENSE_INCLUDED
#define LICENSE_INCLUDED

/*
    diseasenowcasting is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    diseasenowcasting is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with diseasenowcasting.  If not, see <http://www.gnu.org/licenses/>.
*/
#endif //LICENSE_INCLUDED
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_nowcast_continuous_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 480> locations_array__ =
  {" (found before start of program)",
  " (in 'nowcast_continuous', line 678, column 0 to column 55)",
  " (in 'nowcast_continuous', line 679, column 0 to column 55)",
  " (in 'nowcast_continuous', line 681, column 0 to column 35)",
  " (in 'nowcast_continuous', line 682, column 0 to column 37)",
  " (in 'nowcast_continuous', line 684, column 0 to column 15)",
  " (in 'nowcast_continuous', line 685, column 0 to column 15)",
  " (in 'nowcast_continuous', line 686, column 0 to column 22)",
  " (in 'nowcast_continuous', line 687, column 0 to column 22)",
  " (in 'nowcast_continuous', line 688, column 0 to column 20)",
  " (in 'nowcast_continuous', line 689, column 0 to column 23)",
  " (in 'nowcast_continuous', line 690, column 0 to column 23)",
  " (in 'nowcast_continuous', line 692, column 0 to column 53)",
  " (in 'nowcast_continuous', line 693, column 0 to column 78)",
  " (in 'nowcast_continuous', line 694, column 0 to column 78)",
  " (in 'nowcast_continuous', line 696, column 0 to column 21)",
  " (in 'nowcast_continuous', line 700, column 0 to column 64)",
  " (in 'nowcast_continuous', line 702, column 0 to line 705, column 64)",
  " (in 'nowcast_continuous', line 721, column 0 to column 27)",
  " (in 'nowcast_continuous', line 728, column 0 to column 16)",
  " (in 'nowcast_continuous', line 723, column 2 to column 98)",
  " (in 'nowcast_continuous', line 722, column 0 to line 723, column 98)",
  " (in 'nowcast_continuous', line 732, column 0 to column 52)",
  " (in 'nowcast_continuous', line 734, column 0 to column 95)",
  " (in 'nowcast_continuous', line 735, column 0 to column 87)",
  " (in 'nowcast_continuous', line 737, column 0 to column 77)",
  " (in 'nowcast_continuous', line 741, column 0 to column 52)",
  " (in 'nowcast_continuous', line 743, column 0 to column 95)",
  " (in 'nowcast_continuous', line 744, column 0 to column 87)",
  " (in 'nowcast_continuous', line 746, column 0 to column 77)",
  " (in 'nowcast_continuous', line 750, column 2 to column 58)",
  " (in 'nowcast_continuous', line 751, column 2 to column 58)",
  " (in 'nowcast_continuous', line 749, column 28 to line 752, column 1)",
  " (in 'nowcast_continuous', line 749, column 0 to line 752, column 1)",
  " (in 'nowcast_continuous', line 754, column 0 to column 78)",
  " (in 'nowcast_continuous', line 755, column 0 to column 86)",
  " (in 'nowcast_continuous', line 757, column 0 to column 50)",
  " (in 'nowcast_continuous', line 758, column 0 to column 74)",
  " (in 'nowcast_continuous', line 760, column 0 to column 58)",
  " (in 'nowcast_continuous', line 769, column 2 to column 106)",
  " (in 'nowcast_continuous', line 768, column 7 to line 770, column 1)",
  " (in 'nowcast_continuous', line 767, column 2 to column 98)",
  " (in 'nowcast_continuous', line 766, column 25 to line 768, column 1)",
  " (in 'nowcast_continuous', line 766, column 0 to line 770, column 1)",
  " (in 'nowcast_continuous', line 763, column 18 to line 771, column 3)",
  " (in 'nowcast_continuous', line 763, column 2 to line 771, column 3)",
  " (in 'nowcast_continuous', line 773, column 2 to column 19)",
  " (in 'nowcast_continuous', line 580, column 0 to column 23)",
  " (in 'nowcast_continuous', line 581, column 0 to column 24)",
  " (in 'nowcast_continuous', line 582, column 0 to column 24)",
  " (in 'nowcast_continuous', line 583, column 0 to column 20)",
  " (in 'nowcast_continuous', line 584, column 6 to column 12)",
  " (in 'nowcast_continuous', line 584, column 0 to column 29)",
  " (in 'nowcast_continuous', line 586, column 0 to column 23)",
  " (in 'nowcast_continuous', line 587, column 0 to column 36)",
  " (in 'nowcast_continuous', line 588, column 0 to column 23)",
  " (in 'nowcast_continuous', line 589, column 0 to column 36)",
  " (in 'nowcast_continuous', line 591, column 0 to column 15)",
  " (in 'nowcast_continuous', line 592, column 0 to column 15)",
  " (in 'nowcast_continuous', line 593, column 0 to column 20)",
  " (in 'nowcast_continuous', line 594, column 0 to column 20)",
  " (in 'nowcast_continuous', line 595, column 0 to column 22)",
  " (in 'nowcast_continuous', line 596, column 0 to column 22)",
  " (in 'nowcast_continuous', line 597, column 0 to column 19)",
  " (in 'nowcast_continuous', line 598, column 0 to column 19)",
  " (in 'nowcast_continuous', line 600, column 0 to column 43)",
  " (in 'nowcast_continuous', line 601, column 0 to column 33)",
  " (in 'nowcast_continuous', line 603, column 0 to column 24)",
  " (in 'nowcast_continuous', line 604, column 0 to column 24)",
  " (in 'nowcast_continuous', line 605, column 0 to column 28)",
  " (in 'nowcast_continuous', line 606, column 0 to column 28)",
  " (in 'nowcast_continuous', line 607, column 0 to column 28)",
  " (in 'nowcast_continuous', line 608, column 0 to column 28)",
  " (in 'nowcast_continuous', line 610, column 0 to column 34)",
  " (in 'nowcast_continuous', line 611, column 0 to column 34)",
  " (in 'nowcast_continuous', line 612, column 0 to column 30)",
  " (in 'nowcast_continuous', line 613, column 0 to column 35)",
  " (in 'nowcast_continuous', line 614, column 0 to column 37)",
  " (in 'nowcast_continuous', line 615, column 0 to column 34)",
  " (in 'nowcast_continuous', line 616, column 0 to column 43)",
  " (in 'nowcast_continuous', line 617, column 0 to column 43)",
  " (in 'nowcast_continuous', line 618, column 0 to column 41)",
  " (in 'nowcast_continuous', line 619, column 0 to column 41)",
  " (in 'nowcast_continuous', line 621, column 0 to column 23)",
  " (in 'nowcast_continuous', line 622, column 0 to column 23)",
  " (in 'nowcast_continuous', line 623, column 0 to column 23)",
  " (in 'nowcast_continuous', line 624, column 0 to column 23)",
  " (in 'nowcast_continuous', line 625, column 0 to column 21)",
  " (in 'nowcast_continuous', line 626, column 0 to column 21)",
  " (in 'nowcast_continuous', line 627, column 0 to column 21)",
  " (in 'nowcast_continuous', line 628, column 0 to column 21)",
  " (in 'nowcast_continuous', line 630, column 0 to column 30)",
  " (in 'nowcast_continuous', line 631, column 0 to column 28)",
  " (in 'nowcast_continuous', line 633, column 7 to column 17)",
  " (in 'nowcast_continuous', line 633, column 19 to column 29)",
  " (in 'nowcast_continuous', line 633, column 0 to column 40)",
  " (in 'nowcast_continuous', line 634, column 7 to column 17)",
  " (in 'nowcast_continuous', line 634, column 19 to column 29)",
  " (in 'nowcast_continuous', line 634, column 0 to column 40)",
  " (in 'nowcast_continuous', line 637, column 6 to column 12)",
  " (in 'nowcast_continuous', line 637, column 0 to column 28)",
  " (in 'nowcast_continuous', line 641, column 0 to column 37)",
  " (in 'nowcast_continuous', line 642, column 0 to column 42)",
  " (in 'nowcast_continuous', line 646, column 0 to column 55)",
  " (in 'nowcast_continuous', line 647, column 0 to column 55)",
  " (in 'nowcast_continuous', line 648, column 7 to column 23)",
  " (in 'nowcast_continuous', line 648, column 25 to column 41)",
  " (in 'nowcast_continuous', line 648, column 0 to column 89)",
  " (in 'nowcast_continuous', line 649, column 0 to column 55)",
  " (in 'nowcast_continuous', line 650, column 0 to column 55)",
  " (in 'nowcast_continuous', line 651, column 7 to column 23)",
  " (in 'nowcast_continuous', line 651, column 25 to column 41)",
  " (in 'nowcast_continuous', line 651, column 0 to column 89)",
  " (in 'nowcast_continuous', line 653, column 0 to column 55)",
  " (in 'nowcast_continuous', line 654, column 0 to column 55)",
  " (in 'nowcast_continuous', line 655, column 7 to column 23)",
  " (in 'nowcast_continuous', line 655, column 25 to column 41)",
  " (in 'nowcast_continuous', line 655, column 0 to column 105)",
  " (in 'nowcast_continuous', line 656, column 0 to column 55)",
  " (in 'nowcast_continuous', line 657, column 0 to column 55)",
  " (in 'nowcast_continuous', line 658, column 7 to column 23)",
  " (in 'nowcast_continuous', line 658, column 25 to column 41)",
  " (in 'nowcast_continuous', line 658, column 0 to column 105)",
  " (in 'nowcast_continuous', line 660, column 0 to column 60)",
  " (in 'nowcast_continuous', line 661, column 7 to column 24)",
  " (in 'nowcast_continuous', line 661, column 0 to column 72)",
  " (in 'nowcast_continuous', line 662, column 0 to column 60)",
  " (in 'nowcast_continuous', line 663, column 7 to column 24)",
  " (in 'nowcast_continuous', line 663, column 0 to column 72)",
  " (in 'nowcast_continuous', line 665, column 0 to column 34)",
  " (in 'nowcast_continuous', line 666, column 0 to column 34)",
  " (in 'nowcast_continuous', line 668, column 0 to column 34)",
  " (in 'nowcast_continuous', line 669, column 0 to column 34)",
  " (in 'nowcast_continuous', line 671, column 0 to column 14)",
  " (in 'nowcast_continuous', line 672, column 0 to column 14)",
  " (in 'nowcast_continuous', line 673, column 0 to column 14)",
  " (in 'nowcast_continuous', line 674, column 0 to column 14)",
  " (in 'nowcast_continuous', line 678, column 7 to column 28)",
  " (in 'nowcast_continuous', line 678, column 30 to column 39)",
  " (in 'nowcast_continuous', line 679, column 7 to column 28)",
  " (in 'nowcast_continuous', line 679, column 30 to column 39)",
  " (in 'nowcast_continuous', line 681, column 25 to column 26)",
  " (in 'nowcast_continuous', line 682, column 25 to column 26)",
  " (in 'nowcast_continuous', line 692, column 7 to column 28)",
  " (in 'nowcast_continuous', line 692, column 30 to column 39)",
  " (in 'nowcast_continuous', line 693, column 6 to column 19)",
  " (in 'nowcast_continuous', line 693, column 28 to column 49)",
  " (in 'nowcast_continuous', line 693, column 51 to column 61)",
  " (in 'nowcast_continuous', line 694, column 6 to column 19)",
  " (in 'nowcast_continuous', line 694, column 28 to column 49)",
  " (in 'nowcast_continuous', line 694, column 51 to column 61)",
  " (in 'nowcast_continuous', line 696, column 16 to column 17)",
  " (in 'nowcast_continuous', line 700, column 7 to column 28)",
  " (in 'nowcast_continuous', line 700, column 30 to column 39)",
  " (in 'nowcast_continuous', line 702, column 7 to column 28)",
  " (in 'nowcast_continuous', line 702, column 30 to column 39)",
  " (in 'nowcast_continuous', line 721, column 7 to column 13)",
  " (in 'nowcast_continuous', line 32, column 9 to column 26)",
  " (in 'nowcast_continuous', line 32, column 28 to column 45)",
  " (in 'nowcast_continuous', line 32, column 2 to column 103)",
  " (in 'nowcast_continuous', line 34, column 2 to column 29)",
  " (in 'nowcast_continuous', line 36, column 2 to column 77)",
  " (in 'nowcast_continuous', line 37, column 2 to column 11)",
  " (in 'nowcast_continuous', line 23, column 48 to line 38, column 1)",
  " (in 'nowcast_continuous', line 48, column 9 to column 18)",
  " (in 'nowcast_continuous', line 48, column 20 to column 29)",
  " (in 'nowcast_continuous', line 48, column 2 to column 71)",
  " (in 'nowcast_continuous', line 51, column 4 to column 76)",
  " (in 'nowcast_continuous', line 50, column 16 to line 52, column 3)",
  " (in 'nowcast_continuous', line 50, column 2 to line 52, column 3)",
  " (in 'nowcast_continuous', line 53, column 2 to column 11)",
  " (in 'nowcast_continuous', line 39, column 40 to line 54, column 1)",
  " (in 'nowcast_continuous', line 64, column 9 to column 26)",
  " (in 'nowcast_continuous', line 64, column 2 to column 30)",
  " (in 'nowcast_continuous', line 67, column 4 to column 59)",
  " (in 'nowcast_continuous', line 66, column 16 to line 68, column 3)",
  " (in 'nowcast_continuous', line 66, column 2 to line 68, column 3)",
  " (in 'nowcast_continuous', line 69, column 2 to column 11)",
  " (in 'nowcast_continuous', line 55, column 31 to line 70, column 1)",
  " (in 'nowcast_continuous', line 88, column 2 to column 26)",
  " (in 'nowcast_continuous', line 89, column 9 to column 12)",
  " (in 'nowcast_continuous', line 89, column 2 to column 16)",
  " (in 'nowcast_continuous', line 92, column 4 to column 51)",
  " (in 'nowcast_continuous', line 91, column 16 to line 93, column 3)",
  " (in 'nowcast_continuous', line 91, column 2 to line 93, column 3)",
  " (in 'nowcast_continuous', line 94, column 2 to column 11)",
  " (in 'nowcast_continuous', line 71, column 41 to line 95, column 1)",
  " (in 'nowcast_continuous', line 108, column 10 to column 29)",
  " (in 'nowcast_continuous', line 108, column 2 to column 33)",
  " (in 'nowcast_continuous', line 111, column 4 to column 29)",
  " (in 'nowcast_continuous', line 110, column 2 to line 111, column 29)",
  " (in 'nowcast_continuous', line 113, column 2 to column 27)",
  " (in 'nowcast_continuous', line 114, column 2 to column 11)",
  " (in 'nowcast_continuous', line 96, column 43 to line 115, column 1)",
  " (in 'nowcast_continuous', line 128, column 10 to column 29)",
  " (in 'nowcast_continuous', line 128, column 2 to column 33)",
  " (in 'nowcast_continuous', line 131, column 4 to column 29)",
  " (in 'nowcast_continuous', line 130, column 2 to line 131, column 29)",
  " (in 'nowcast_continuous', line 133, column 2 to column 13)",
  " (in 'nowcast_continuous', line 134, column 2 to column 11)",
  " (in 'nowcast_continuous', line 116, column 43 to line 135, column 1)",
  " (in 'nowcast_continuous', line 144, column 2 to column 43)",
  " (in 'nowcast_continuous', line 145, column 2 to column 43)",
  " (in 'nowcast_continuous', line 146, column 9 to column 14)",
  " (in 'nowcast_continuous', line 146, column 16 to column 21)",
  " (in 'nowcast_continuous', line 146, column 2 to column 55)",
  " (in 'nowcast_continuous', line 150, column 6 to column 47)",
  " (in 'nowcast_continuous', line 149, column 23 to line 151, column 5)",
  " (in 'nowcast_continuous', line 149, column 4 to line 151, column 5)",
  " (in 'nowcast_continuous', line 154, column 6 to column 22)",
  " (in 'nowcast_continuous', line 153, column 23 to line 155, column 5)",
  " (in 'nowcast_continuous', line 153, column 4 to line 155, column 5)",
  " (in 'nowcast_continuous', line 148, column 17 to line 156, column 3)",
  " (in 'nowcast_continuous', line 148, column 2 to line 156, column 3)",
  " (in 'nowcast_continuous', line 157, column 2 to column 12)",
  " (in 'nowcast_continuous', line 136, column 47 to line 158, column 1)",
  " (in 'nowcast_continuous', line 164, column 2 to column 47)",
  " (in 'nowcast_continuous', line 165, column 9 to column 14)",
  " (in 'nowcast_continuous', line 165, column 2 to column 43)",
  " (in 'nowcast_continuous', line 167, column 4 to column 15)",
  " (in 'nowcast_continuous', line 166, column 17 to line 168, column 3)",
  " (in 'nowcast_continuous', line 166, column 2 to line 168, column 3)",
  " (in 'nowcast_continuous', line 169, column 2 to column 11)",
  " (in 'nowcast_continuous', line 159, column 46 to line 170, column 1)",
  " (in 'nowcast_continuous', line 177, column 2 to column 43)",
  " (in 'nowcast_continuous', line 178, column 2 to column 43)",
  " (in 'nowcast_continuous', line 179, column 9 to column 14)",
  " (in 'nowcast_continuous', line 179, column 15 to column 20)",
  " (in 'nowcast_continuous', line 179, column 2 to column 56)",
  " (in 'nowcast_continuous', line 181, column 4 to column 31)",
  " (in 'nowcast_continuous', line 180, column 17 to line 182, column 3)",
  " (in 'nowcast_continuous', line 180, column 2 to line 182, column 3)",
  " (in 'nowcast_continuous', line 183, column 2 to column 12)",
  " (in 'nowcast_continuous', line 171, column 63 to line 184, column 1)",
  " (in 'nowcast_continuous', line 188, column 2 to column 16)",
  " (in 'nowcast_continuous', line 187, column 44 to line 189, column 1)",
  " (in 'nowcast_continuous', line 191, column 2 to column 16)",
  " (in 'nowcast_continuous', line 190, column 36 to line 192, column 1)",
  " (in 'nowcast_continuous', line 194, column 2 to column 16)",
  " (in 'nowcast_continuous', line 193, column 36 to line 195, column 1)",
  " (in 'nowcast_continuous', line 197, column 2 to column 16)",
  " (in 'nowcast_continuous', line 196, column 40 to line 198, column 1)",
  " (in 'nowcast_continuous', line 200, column 2 to column 16)",
  " (in 'nowcast_continuous', line 199, column 36 to line 201, column 1)",
  " (in 'nowcast_continuous', line 203, column 2 to column 16)",
  " (in 'nowcast_continuous', line 202, column 36 to line 204, column 1)",
  " (in 'nowcast_continuous', line 210, column 2 to column 42)",
  " (in 'nowcast_continuous', line 211, column 9 to column 10)",
  " (in 'nowcast_continuous', line 211, column 12 to column 13)",
  " (in 'nowcast_continuous', line 211, column 2 to column 41)",
  " (in 'nowcast_continuous', line 215, column 6 to column 20)",
  " (in 'nowcast_continuous', line 214, column 33 to line 216, column 5)",
  " (in 'nowcast_continuous', line 214, column 4 to line 216, column 5)",
  " (in 'nowcast_continuous', line 213, column 40 to line 217, column 3)",
  " (in 'nowcast_continuous', line 213, column 2 to line 217, column 3)",
  " (in 'nowcast_continuous', line 219, column 2 to column 15)",
  " (in 'nowcast_continuous', line 222, column 4 to column 20)",
  " (in 'nowcast_continuous', line 221, column 21 to line 223, column 3)",
  " (in 'nowcast_continuous', line 221, column 2 to line 223, column 3)",
  " (in 'nowcast_continuous', line 225, column 2 to column 15)",
  " (in 'nowcast_continuous', line 226, column 2 to column 11)",
  " (in 'nowcast_continuous', line 208, column 85 to line 227, column 1)",
  " (in 'nowcast_continuous', line 230, column 2 to column 42)",
  " (in 'nowcast_continuous', line 232, column 9 to column 10)",
  " (in 'nowcast_continuous', line 232, column 2 to column 35)",
  " (in 'nowcast_continuous', line 233, column 2 to column 13)",
  " (in 'nowcast_continuous', line 234, column 2 to column 11)",
  " (in 'nowcast_continuous', line 228, column 84 to line 235, column 1)",
  " (in 'nowcast_continuous', line 242, column 2 to column 42)",
  " (in 'nowcast_continuous', line 243, column 9 to column 10)",
  " (in 'nowcast_continuous', line 243, column 11 to column 12)",
  " (in 'nowcast_continuous', line 243, column 2 to column 40)",
  " (in 'nowcast_continuous', line 244, column 2 to column 79)",
  " (in 'nowcast_continuous', line 245, column 2 to column 26)",
  " (in 'nowcast_continuous', line 246, column 2 to column 11)",
  " (in 'nowcast_continuous', line 236, column 95 to line 247, column 1)",
  " (in 'nowcast_continuous', line 250, column 2 to column 58)",
  " (in 'nowcast_continuous', line 252, column 9 to column 10)",
  " (in 'nowcast_continuous', line 252, column 2 to column 18)",
  " (in 'nowcast_continuous', line 253, column 2 to column 69)",
  " (in 'nowcast_continuous', line 255, column 2 to column 24)",
  " (in 'nowcast_continuous', line 256, column 2 to column 15)",
  " (in 'nowcast_continuous', line 248, column 118 to line 257, column 1)",
  " (in 'nowcast_continuous', line 270, column 4 to column 13)",
  " (in 'nowcast_continuous', line 269, column 9 to line 271, column 3)",
  " (in 'nowcast_continuous', line 268, column 4 to column 13)",
  " (in 'nowcast_continuous', line 267, column 12 to line 269, column 3)",
  " (in 'nowcast_continuous', line 267, column 2 to line 271, column 3)",
  " (in 'nowcast_continuous', line 272, column 2 to column 11)",
  " (in 'nowcast_continuous', line 258, column 25 to line 273, column 1)",
  " (in 'nowcast_continuous', line 286, column 4 to column 13)",
  " (in 'nowcast_continuous', line 285, column 9 to line 287, column 3)",
  " (in 'nowcast_continuous', line 284, column 4 to column 13)",
  " (in 'nowcast_continuous', line 283, column 12 to line 285, column 3)",
  " (in 'nowcast_continuous', line 283, column 2 to line 287, column 3)",
  " (in 'nowcast_continuous', line 288, column 2 to column 11)",
  " (in 'nowcast_continuous', line 274, column 25 to line 289, column 1)",
  " (in 'nowcast_continuous', line 316, column 2 to column 134)",
  " (in 'nowcast_continuous', line 290, column 38 to line 317, column 1)",
  " (in 'nowcast_continuous', line 349, column 2 to column 26)",
  " (in 'nowcast_continuous', line 318, column 41 to line 350, column 1)",
  " (in 'nowcast_continuous', line 366, column 2 to column 36)",
  " (in 'nowcast_continuous', line 351, column 32 to line 367, column 1)",
  " (in 'nowcast_continuous', line 382, column 2 to column 38)",
  " (in 'nowcast_continuous', line 368, column 36 to line 383, column 1)",
  " (in 'nowcast_continuous', line 412, column 11 to column 32)",
  " (in 'nowcast_continuous', line 412, column 34 to column 43)",
  " (in 'nowcast_continuous', line 412, column 4 to column 99)",
  " (in 'nowcast_continuous', line 414, column 10 to column 19)",
  " (in 'nowcast_continuous', line 414, column 28 to column 49)",
  " (in 'nowcast_continuous', line 414, column 51 to column 69)",
  " (in 'nowcast_continuous', line 414, column 4 to column 74)",
  " (in 'nowcast_continuous', line 415, column 4 to column 101)",
  " (in 'nowcast_continuous', line 416, column 10 to column 19)",
  " (in 'nowcast_continuous', line 416, column 28 to column 49)",
  " (in 'nowcast_continuous', line 416, column 51 to column 69)",
  " (in 'nowcast_continuous', line 416, column 4 to column 74)",
  " (in 'nowcast_continuous', line 417, column 4 to column 101)",
  " (in 'nowcast_continuous', line 419, column 11 to column 35)",
  " (in 'nowcast_continuous', line 419, column 4 to column 65)",
  " (in 'nowcast_continuous', line 420, column 11 to column 37)",
  " (in 'nowcast_continuous', line 420, column 4 to column 73)",
  " (in 'nowcast_continuous', line 425, column 6 to column 73)",
  " (in 'nowcast_continuous', line 426, column 6 to column 61)",
  " (in 'nowcast_continuous', line 427, column 6 to column 61)",
  " (in 'nowcast_continuous', line 424, column 32 to line 428, column 5)",
  " (in 'nowcast_continuous', line 424, column 4 to line 428, column 5)",
  " (in 'nowcast_continuous', line 431, column 4 to line 432, column 55)",
  " (in 'nowcast_continuous', line 433, column 4 to column 13)",
  " (in 'nowcast_continuous', line 410, column 4 to line 434, column 1)",
  " (in 'nowcast_continuous', line 503, column 7 to column 30)",
  " (in 'nowcast_continuous', line 502, column 29 to column 71)",
  " (in 'nowcast_continuous', line 502, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 501, column 29 to column 70)",
  " (in 'nowcast_continuous', line 501, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 500, column 29 to column 75)",
  " (in 'nowcast_continuous', line 500, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 499, column 29 to column 63)",
  " (in 'nowcast_continuous', line 499, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 498, column 29 to column 72)",
  " (in 'nowcast_continuous', line 498, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 497, column 29 to column 82)",
  " (in 'nowcast_continuous', line 497, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 496, column 29 to column 71)",
  " (in 'nowcast_continuous', line 496, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 495, column 28 to column 70)",
  " (in 'nowcast_continuous', line 495, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 494, column 28 to column 72)",
  " (in 'nowcast_continuous', line 494, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 493, column 28 to column 72)",
  " (in 'nowcast_continuous', line 493, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 492, column 28 to column 68)",
  " (in 'nowcast_continuous', line 492, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 491, column 28 to column 65)",
  " (in 'nowcast_continuous', line 491, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 490, column 28 to column 69)",
  " (in 'nowcast_continuous', line 490, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 489, column 28 to column 77)",
  " (in 'nowcast_continuous', line 489, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 488, column 28 to column 69)",
  " (in 'nowcast_continuous', line 488, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 487, column 28 to column 54)",
  " (in 'nowcast_continuous', line 487, column 7 to line 503, column 30)",
  " (in 'nowcast_continuous', line 486, column 23 to column 34)",
  " (in 'nowcast_continuous', line 486, column 2 to line 503, column 30)",
  " (in 'nowcast_continuous', line 484, column 7 to line 504, column 1)",
  " (in 'nowcast_continuous', line 482, column 7 to column 30)",
  " (in 'nowcast_continuous', line 481, column 29 to column 109)",
  " (in 'nowcast_continuous', line 481, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 480, column 29 to column 107)",
  " (in 'nowcast_continuous', line 480, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 479, column 29 to column 75)",
  " (in 'nowcast_continuous', line 479, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 478, column 29 to column 63)",
  " (in 'nowcast_continuous', line 478, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 477, column 29 to column 111)",
  " (in 'nowcast_continuous', line 477, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 476, column 29 to column 131)",
  " (in 'nowcast_continuous', line 476, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 475, column 29 to column 71)",
  " (in 'nowcast_continuous', line 475, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 474, column 28 to column 70)",
  " (in 'nowcast_continuous', line 474, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 473, column 28 to column 72)",
  " (in 'nowcast_continuous', line 473, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 472, column 28 to column 72)",
  " (in 'nowcast_continuous', line 472, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 471, column 28 to column 68)",
  " (in 'nowcast_continuous', line 471, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 470, column 28 to column 65)",
  " (in 'nowcast_continuous', line 470, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 469, column 28 to column 106)",
  " (in 'nowcast_continuous', line 469, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 468, column 28 to column 122)",
  " (in 'nowcast_continuous', line 468, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 467, column 28 to column 106)",
  " (in 'nowcast_continuous', line 467, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 466, column 28 to column 54)",
  " (in 'nowcast_continuous', line 466, column 7 to line 482, column 30)",
  " (in 'nowcast_continuous', line 465, column 23 to column 34)",
  " (in 'nowcast_continuous', line 465, column 2 to line 482, column 30)",
  " (in 'nowcast_continuous', line 483, column 2 to column 13)",
  " (in 'nowcast_continuous', line 463, column 16 to line 484, column 1)",
  " (in 'nowcast_continuous', line 463, column 0 to line 504, column 1)",
  " (in 'nowcast_continuous', line 435, column 86 to line 505, column 1)",
  " (in 'nowcast_continuous', line 574, column 7 to column 30)",
  " (in 'nowcast_continuous', line 573, column 29 to column 71)",
  " (in 'nowcast_continuous', line 573, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 572, column 29 to column 70)",
  " (in 'nowcast_continuous', line 572, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 571, column 29 to column 75)",
  " (in 'nowcast_continuous', line 571, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 570, column 29 to column 63)",
  " (in 'nowcast_continuous', line 570, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 569, column 29 to column 72)",
  " (in 'nowcast_continuous', line 569, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 568, column 29 to column 82)",
  " (in 'nowcast_continuous', line 568, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 567, column 29 to column 71)",
  " (in 'nowcast_continuous', line 567, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 566, column 28 to column 70)",
  " (in 'nowcast_continuous', line 566, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 565, column 28 to column 72)",
  " (in 'nowcast_continuous', line 565, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 564, column 28 to column 72)",
  " (in 'nowcast_continuous', line 564, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 563, column 28 to column 68)",
  " (in 'nowcast_continuous', line 563, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 562, column 28 to column 65)",
  " (in 'nowcast_continuous', line 562, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 561, column 28 to column 69)",
  " (in 'nowcast_continuous', line 561, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 560, column 28 to column 77)",
  " (in 'nowcast_continuous', line 560, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 559, column 28 to column 69)",
  " (in 'nowcast_continuous', line 559, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 558, column 28 to column 54)",
  " (in 'nowcast_continuous', line 558, column 7 to line 574, column 30)",
  " (in 'nowcast_continuous', line 557, column 23 to column 34)",
  " (in 'nowcast_continuous', line 557, column 2 to line 574, column 30)",
  " (in 'nowcast_continuous', line 555, column 7 to line 575, column 1)",
  " (in 'nowcast_continuous', line 553, column 7 to column 30)",
  " (in 'nowcast_continuous', line 552, column 29 to column 109)",
  " (in 'nowcast_continuous', line 552, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 551, column 29 to column 107)",
  " (in 'nowcast_continuous', line 551, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 550, column 29 to column 75)",
  " (in 'nowcast_continuous', line 550, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 549, column 29 to column 63)",
  " (in 'nowcast_continuous', line 549, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 548, column 29 to column 111)",
  " (in 'nowcast_continuous', line 548, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 547, column 29 to column 131)",
  " (in 'nowcast_continuous', line 547, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 546, column 29 to column 71)",
  " (in 'nowcast_continuous', line 546, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 545, column 28 to column 70)",
  " (in 'nowcast_continuous', line 545, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 544, column 28 to column 72)",
  " (in 'nowcast_continuous', line 544, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 543, column 28 to column 72)",
  " (in 'nowcast_continuous', line 543, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 542, column 28 to column 68)",
  " (in 'nowcast_continuous', line 542, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 541, column 28 to column 65)",
  " (in 'nowcast_continuous', line 541, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 540, column 28 to column 106)",
  " (in 'nowcast_continuous', line 540, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 539, column 28 to column 122)",
  " (in 'nowcast_continuous', line 539, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 538, column 28 to column 106)",
  " (in 'nowcast_continuous', line 538, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 537, column 28 to column 54)",
  " (in 'nowcast_continuous', line 537, column 7 to line 553, column 30)",
  " (in 'nowcast_continuous', line 536, column 23 to column 34)",
  " (in 'nowcast_continuous', line 536, column 2 to line 553, column 30)",
  " (in 'nowcast_continuous', line 554, column 2 to column 13)",
  " (in 'nowcast_continuous', line 534, column 16 to line 555, column 1)",
  " (in 'nowcast_continuous', line 534, column 0 to line 575, column 1)",
  " (in 'nowcast_continuous', line 506, column 84 to line 576, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_val_2_vec(const T0__& A_arg__, const T1__& val, std::ostream*
                 pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
append_vec_2_val(const T0__& val, const T1__& A_arg__, std::ostream*
                 pstream__);
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_A(const int& degree, std::ostream* pstream__);
Eigen::Matrix<double,-1,1>
create_trend_vector_block_L(const int& degree, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_R(const int& degree, const int& is_constant,
                            std::ostream* pstream__);
int get_num_elements_alpha_trend(const int& degree, std::ostream* pstream__);
int get_num_cols_A_trend(const int& degree, std::ostream* pstream__);
int get_num_rows_A_trend(const int& degree, std::ostream* pstream__);
int get_num_elements_L_trend(const int& degree, std::ostream* pstream__);
int get_num_cols_R_trend(const int& degree, std::ostream* pstream__);
int get_num_rows_R_trend(const int& degree, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_block_A(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__);
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_block_L(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__);
template <typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_block_R(const int& num_seasons, const int&
                                        season_duration, const T2__& time,
                                        std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__>,-1,1>
create_initial_seasonal_discrete_vector_block_alpha(const T0__&
                                                    season_params_arg__,
                                                    const int&
                                                    season_duration,
                                                    const T2__& error_term,
                                                    std::ostream* pstream__);
int max_int(const int& a, const int& b, std::ostream* pstream__);
int min_int(const int& a, const int& b, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
AR(const T0__& y_arg__, const T1__& phi_arg__, const int& t, std::ostream*
   pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
MA(const T0__& xi_arg__, const T1__& theta_arg__, const int& t, std::ostream*
   pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_phi_AR(const T0__& phi_arg__, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_theta_MA(const T0__& theta_arg__, std::ostream* pstream__);
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__, typename T10__,
          typename T11__, typename T12__, typename T13__, typename T14__,
          typename T15__, typename T16__, typename T17__, typename T18__,
          typename T19__, typename T20__, typename T21__, typename T22__,
          typename T23__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_eigen_matrix_dynamic<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_eigen_matrix_dynamic<T14__>,
                              stan::is_vt_not_complex<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T17__>,
                              stan::is_stan_scalar<T18__>,
                              stan::is_col_vector<T19__>,
                              stan::is_vt_not_complex<T19__>,
                              stan::is_eigen_matrix_dynamic<T20__>,
                              stan::is_vt_not_complex<T20__>,
                              stan::is_col_vector<T21__>,
                              stan::is_vt_not_complex<T21__>,
                              stan::is_col_vector<T22__>,
                              stan::is_vt_not_complex<T22__>,
                              stan::is_eigen_matrix_dynamic<T23__>,
                              stan::is_vt_not_complex<T23__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                stan::promote_args_t<stan::base_type_t<T8__>, T9__, T10__,
                  T11__, T12__,
                  stan::promote_args_t<stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>, T15__, T16__, T17__,
                    stan::promote_args_t<T18__, stan::base_type_t<T19__>,
                      stan::base_type_t<T20__>, stan::base_type_t<T21__>,
                      stan::base_type_t<T22__>,
                      stan::promote_args_t<stan::base_type_t<T23__>>>>>>,-1,-1>
state_space_process(const int& num_steps, const int& num_delays, const int&
                    num_strata, const T3__& A_mu_arg__, const T4__&
                    A_nu_arg__, const T5__& R_mu_arg__, const T6__&
                    R_nu_arg__, const T7__& L_mu_arg__, const T8__&
                    L_nu_arg__, const std::vector<Eigen::Matrix<T9__,-1,-1>>&
                    xi_mu_centered,
                    const std::vector<Eigen::Matrix<T10__,-1,-1>>&
                    xi_nu_centered, const T11__& xi_mu_sd, const T12__&
                    xi_nu_sd, const T13__& mu_0_centered_arg__, const T14__&
                    nu_0_centered_arg__, const T15__& mu_0_sd, const T16__&
                    nu_0_sd, const T17__& mu_0_mean, const T18__& nu_0_mean,
                    const T19__& B_cnt_arg__, const T20__& X_cnt_arg__,
                    const T21__& phi_AR_arg__, const T22__& theta_MA_arg__,
                    const T23__& xi_arg__, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>
dist_lpdf(const T0__& x_arg__, const T1__& param_1, const T2__& param_2,
          const int& prior_spec, const int& is_positive, std::ostream*
          pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
dist_lpdf(const T0__& x, const T1__& param_1, const T2__& param_2, const int&
          prior_spec, const int& is_positive, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  const auto& B = stan::math::to_ref(B_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 157;
    stan::math::validate_non_negative_index("C", "rows(A) + rows(B)",
      (stan::math::rows(A) + stan::math::rows(B)));
    current_statement__ = 158;
    stan::math::validate_non_negative_index("C", "cols(A) + cols(B)",
      (stan::math::cols(A) + stan::math::cols(B)));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) +
        stan::math::rows(B)), (stan::math::cols(A) + stan::math::cols(B)),
        DUMMY_VAR__);
    current_statement__ = 159;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) + stan::math::rows(B)),
        (stan::math::cols(A) + stan::math::cols(B))), "assigning variable C");
    current_statement__ = 160;
    stan::model::assign(C, A, "assigning variable C",
      stan::model::index_min_max(1, stan::math::rows(A)),
      stan::model::index_min_max(1, stan::math::cols(A)));
    current_statement__ = 161;
    stan::model::assign(C, B, "assigning variable C",
      stan::model::index_min_max((stan::math::rows(A) + 1),
        (stan::math::rows(A) + stan::math::rows(B))),
      stan::model::index_min_max((stan::math::cols(A) + 1),
        (stan::math::cols(A) + stan::math::cols(B))));
    current_statement__ = 162;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 164;
    stan::math::validate_non_negative_index("C", "rows(A) * k",
      (stan::math::rows(A) * k));
    current_statement__ = 165;
    stan::math::validate_non_negative_index("C", "cols(A) * k",
      (stan::math::cols(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) *
        k), (stan::math::cols(A) * k), DUMMY_VAR__);
    current_statement__ = 166;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) * k),
        (stan::math::cols(A) * k)), "assigning variable C");
    current_statement__ = 169;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 167;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::rows(A)) + 1), (l
          * stan::math::rows(A))),
        stan::model::index_min_max((((l - 1) * stan::math::cols(A)) + 1), (l
          * stan::math::cols(A))));
    }
    current_statement__ = 170;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 172;
    stan::math::validate_non_negative_index("C", "num_elements(A) * k",
      (stan::math::num_elements(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) * k), DUMMY_VAR__);
    current_statement__ = 176;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 174;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::num_elements(A)) +
          1), (l * stan::math::num_elements(A))));
    }
    current_statement__ = 177;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 179;
    n = stan::math::num_elements(A);
    current_statement__ = 180;
    stan::math::validate_non_negative_index("C", "n * k", (n * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n * k), DUMMY_VAR__);
    current_statement__ = 184;
    for (int j = 1; j <= n; ++j) {
      current_statement__ = 182;
      stan::model::assign(C,
        stan::math::rep_vector(
          stan::model::rvalue(A, "A", stan::model::index_uni(j)), k),
        "assigning variable C",
        stan::model::index_min_max((((j - 1) * k) + 1), (k * j)));
    }
    current_statement__ = 185;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>,-1,1>
append_val_2_vec(const T0__& A_arg__, const T1__& val, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 187;
    stan::math::validate_non_negative_index("B", "num_elements(A) + 1",
      (stan::math::num_elements(A) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) + 1), DUMMY_VAR__);
    current_statement__ = 190;
    if (stan::math::logical_gt(stan::math::num_elements(A), 0)) {
      current_statement__ = 189;
      stan::model::assign(B, A, "assigning variable B",
        stan::model::index_min_max(1, stan::math::num_elements(A)));
    }
    current_statement__ = 191;
    stan::model::assign(B, val, "assigning variable B",
      stan::model::index_uni(stan::math::num_elements(B)));
    current_statement__ = 192;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
append_vec_2_val(const T0__& val, const T1__& A_arg__, std::ostream*
                 pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 194;
    stan::math::validate_non_negative_index("B", "num_elements(A) + 1",
      (stan::math::num_elements(A) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> B =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) + 1), DUMMY_VAR__);
    current_statement__ = 197;
    if (stan::math::logical_gt(stan::math::num_elements(A), 0)) {
      current_statement__ = 196;
      stan::model::assign(B, A, "assigning variable B",
        stan::model::index_min_max(2, stan::math::num_elements(B)));
    }
    current_statement__ = 198;
    stan::model::assign(B, val, "assigning variable B",
      stan::model::index_uni(1));
    current_statement__ = 199;
    return B;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_A(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ncols = std::numeric_limits<int>::min();
    current_statement__ = 201;
    ncols = get_num_cols_A_trend(degree, pstream__);
    int nrows = std::numeric_limits<int>::min();
    current_statement__ = 202;
    nrows = get_num_rows_A_trend(degree, pstream__);
    current_statement__ = 203;
    stan::math::validate_non_negative_index("A", "nrows", nrows);
    current_statement__ = 204;
    stan::math::validate_non_negative_index("A", "ncols", ncols);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nrows, ncols,
        DUMMY_VAR__);
    current_statement__ = 205;
    stan::model::assign(A, stan::math::rep_matrix(0, nrows, ncols),
      "assigning variable A");
    current_statement__ = 213;
    if (stan::math::logical_gt(degree, 0)) {
      current_statement__ = 208;
      for (int j = 1; j <= ncols; ++j) {
        current_statement__ = 206;
        stan::model::assign(A, (stan::math::pow(-1, (j + 1)) *
          stan::math::choose(degree, j)), "assigning variable A",
          stan::model::index_uni(1), stan::model::index_uni(j));
      }
      current_statement__ = 211;
      for (int i = 2; i <= nrows; ++i) {
        current_statement__ = 209;
        stan::model::assign(A, 1.0, "assigning variable A",
          stan::model::index_uni(i), stan::model::index_uni((i - 1)));
      }
    }
    current_statement__ = 214;
    return stan::math::transpose(A);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
create_trend_vector_block_L(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int nsize = std::numeric_limits<int>::min();
    current_statement__ = 216;
    nsize = get_num_elements_L_trend(degree, pstream__);
    current_statement__ = 217;
    stan::math::validate_non_negative_index("L", "nsize", nsize);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nsize, DUMMY_VAR__);
    current_statement__ = 218;
    stan::model::assign(L, stan::math::rep_vector(0.0, nsize),
      "assigning variable L");
    current_statement__ = 221;
    if (stan::math::logical_gt(degree, 0)) {
      current_statement__ = 219;
      stan::model::assign(L, 1.0, "assigning variable L",
        stan::model::index_uni(1));
    }
    current_statement__ = 222;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_R(const int& degree, const int& is_constant,
                            std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int ncols = std::numeric_limits<int>::min();
    current_statement__ = 224;
    ncols = get_num_cols_R_trend(degree, pstream__);
    int nrows = std::numeric_limits<int>::min();
    current_statement__ = 225;
    nrows = get_num_rows_R_trend(degree, pstream__);
    current_statement__ = 226;
    stan::math::validate_non_negative_index("R", "nrows", nrows);
    current_statement__ = 227;
    stan::math::validate_non_negative_index("R", "ncols", ncols);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nrows, ncols,
        DUMMY_VAR__);
    current_statement__ = 228;
    stan::model::assign(R, stan::math::rep_matrix(0.0, nrows, ncols),
      "assigning variable R");
    current_statement__ = 231;
    if (stan::math::logical_gt(degree, 0)) {
      current_statement__ = 229;
      stan::model::assign(R, (1.0 - is_constant), "assigning variable R",
        stan::model::index_uni(1), stan::model::index_uni(1));
    }
    current_statement__ = 232;
    return stan::math::transpose(R);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int get_num_elements_alpha_trend(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 234;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int get_num_cols_A_trend(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 236;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int get_num_rows_A_trend(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 238;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int get_num_elements_L_trend(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 240;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int get_num_cols_R_trend(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 242;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int get_num_rows_R_trend(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 244;
    return degree;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_block_A(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 246;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 247;
    stan::math::validate_non_negative_index("A", "k", k);
    current_statement__ = 248;
    stan::math::validate_non_negative_index("A", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 249;
    stan::model::assign(A, stan::math::rep_matrix(0.0, k, k),
      "assigning variable A");
    current_statement__ = 254;
    for (int j = 1; j <= ((k - season_duration) - 1); ++j) {
      current_statement__ = 252;
      if (stan::math::logical_eq(stan::math::modulus(j, season_duration), 0)) {
        current_statement__ = 250;
        stan::model::assign(A, -1.0, "assigning variable A",
          stan::model::index_uni(1), stan::model::index_uni(j));
      }
    }
    current_statement__ = 255;
    stan::model::assign(A, 1.0, "assigning variable A",
      stan::model::index_uni(1), stan::model::index_uni(k));
    current_statement__ = 258;
    for (int i = 2; i <= (k - 1); ++i) {
      current_statement__ = 256;
      stan::model::assign(A, 1.0, "assigning variable A",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
    }
    current_statement__ = 259;
    stan::model::assign(A, 1.0, "assigning variable A",
      stan::model::index_uni(k), stan::model::index_uni(k));
    current_statement__ = 260;
    return A;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_block_L(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 262;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 263;
    stan::math::validate_non_negative_index("L", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 264;
    stan::model::assign(L, stan::math::rep_vector(0.0, k),
      "assigning variable L");
    current_statement__ = 265;
    stan::model::assign(L, 1.0, "assigning variable L",
      stan::model::index_uni(1));
    current_statement__ = 266;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, stan::require_all_t<stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_block_R(const int& num_seasons, const int&
                                        season_duration, const T2__& time,
                                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 268;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 269;
    stan::math::validate_non_negative_index("R", "k", k);
    current_statement__ = 270;
    stan::math::validate_non_negative_index("R", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 271;
    stan::model::assign(R, stan::math::rep_matrix(0.0, k, k),
      "assigning variable R");
    local_scalar_t__ reminder = DUMMY_VAR__;
    current_statement__ = 272;
    reminder = (stan::math::ceil((time / season_duration)) -
      stan::math::floor((time / season_duration)));
    current_statement__ = 273;
    stan::model::assign(R, (1.0 - reminder), "assigning variable R",
      stan::model::index_uni(k), stan::model::index_uni(k));
    current_statement__ = 274;
    return R;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__>,-1,1>
create_initial_seasonal_discrete_vector_block_alpha(const T0__&
                                                    season_params_arg__,
                                                    const int&
                                                    season_duration,
                                                    const T2__& error_term,
                                                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__>;
  int current_statement__ = 0;
  const auto& season_params = stan::math::to_ref(season_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 276;
    k = ((stan::math::num_elements(season_params) * season_duration) + 1);
    current_statement__ = 277;
    stan::math::validate_non_negative_index("alpha", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 279;
    stan::model::assign(alpha,
      rep_vec_piecewise(season_params, season_duration, pstream__),
      "assigning variable alpha", stan::model::index_min_max(1, (k - 1)));
    current_statement__ = 280;
    stan::model::assign(alpha, error_term, "assigning variable alpha",
      stan::model::index_uni(k));
    current_statement__ = 281;
    return alpha;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int max_int(const int& a, const int& b, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 287;
    if (stan::math::logical_gt(a, b)) {
      current_statement__ = 285;
      return a;
    } else {
      current_statement__ = 283;
      return b;
    }
    current_statement__ = 288;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int min_int(const int& a, const int& b, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 294;
    if (stan::math::logical_gt(a, b)) {
      current_statement__ = 292;
      return b;
    } else {
      current_statement__ = 290;
      return a;
    }
    current_statement__ = 295;
    return 1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
AR(const T0__& y_arg__, const T1__& phi_arg__, const int& t, std::ostream*
   pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& y = stan::math::to_ref(y_arg__);
  const auto& phi = stan::math::to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 297;
    return stan::math::multiply(
             stan::model::rvalue(y, "y", stan::model::index_omni(),
               stan::model::index_min_max(((t + 1) -
                 min_int(t, stan::math::num_elements(phi), pstream__)), t)),
             stan::model::rvalue(phi, "phi",
               stan::model::index_min_max(((stan::math::num_elements(phi) +
                 1) - min_int(t, stan::math::num_elements(phi), pstream__)),
                 stan::math::num_elements(phi))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
MA(const T0__& xi_arg__, const T1__& theta_arg__, const int& t, std::ostream*
   pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xi = stan::math::to_ref(xi_arg__);
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 299;
    return AR(xi, theta, t, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_phi_AR(const T0__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& phi = stan::math::to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 301;
    return append_val_2_vec(phi, 0.0, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_theta_MA(const T0__& theta_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& theta = stan::math::to_ref(theta_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 303;
    return append_val_2_vec(theta, 1.0, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__, typename T10__,
          typename T11__, typename T12__, typename T13__, typename T14__,
          typename T15__, typename T16__, typename T17__, typename T18__,
          typename T19__, typename T20__, typename T21__, typename T22__,
          typename T23__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_eigen_matrix_dynamic<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_eigen_matrix_dynamic<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_eigen_matrix_dynamic<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_eigen_matrix_dynamic<T14__>,
                              stan::is_vt_not_complex<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T17__>,
                              stan::is_stan_scalar<T18__>,
                              stan::is_col_vector<T19__>,
                              stan::is_vt_not_complex<T19__>,
                              stan::is_eigen_matrix_dynamic<T20__>,
                              stan::is_vt_not_complex<T20__>,
                              stan::is_col_vector<T21__>,
                              stan::is_vt_not_complex<T21__>,
                              stan::is_col_vector<T22__>,
                              stan::is_vt_not_complex<T22__>,
                              stan::is_eigen_matrix_dynamic<T23__>,
                              stan::is_vt_not_complex<T23__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T3__>,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                stan::promote_args_t<stan::base_type_t<T8__>, T9__, T10__,
                  T11__, T12__,
                  stan::promote_args_t<stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>, T15__, T16__, T17__,
                    stan::promote_args_t<T18__, stan::base_type_t<T19__>,
                      stan::base_type_t<T20__>, stan::base_type_t<T21__>,
                      stan::base_type_t<T22__>,
                      stan::promote_args_t<stan::base_type_t<T23__>>>>>>,-1,-1>
state_space_process(const int& num_steps, const int& num_delays, const int&
                    num_strata, const T3__& A_mu_arg__, const T4__&
                    A_nu_arg__, const T5__& R_mu_arg__, const T6__&
                    R_nu_arg__, const T7__& L_mu_arg__, const T8__&
                    L_nu_arg__, const std::vector<Eigen::Matrix<T9__,-1,-1>>&
                    xi_mu_centered,
                    const std::vector<Eigen::Matrix<T10__,-1,-1>>&
                    xi_nu_centered, const T11__& xi_mu_sd, const T12__&
                    xi_nu_sd, const T13__& mu_0_centered_arg__, const T14__&
                    nu_0_centered_arg__, const T15__& mu_0_sd, const T16__&
                    nu_0_sd, const T17__& mu_0_mean, const T18__& nu_0_mean,
                    const T19__& B_cnt_arg__, const T20__& X_cnt_arg__,
                    const T21__& phi_AR_arg__, const T22__& theta_MA_arg__,
                    const T23__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::base_type_t<T7__>,
                             stan::promote_args_t<stan::base_type_t<T8__>,
                               T9__, T10__, T11__, T12__,
                               stan::promote_args_t<stan::base_type_t<T13__>,
                                 stan::base_type_t<T14__>, T15__, T16__,
                                 T17__,
                                 stan::promote_args_t<T18__,
                                   stan::base_type_t<T19__>,
                                   stan::base_type_t<T20__>,
                                   stan::base_type_t<T21__>,
                                   stan::base_type_t<T22__>,
                                   stan::promote_args_t<stan::base_type_t<T23__>>>>>>;
  int current_statement__ = 0;
  const auto& A_mu = stan::math::to_ref(A_mu_arg__);
  const auto& A_nu = stan::math::to_ref(A_nu_arg__);
  const auto& R_mu = stan::math::to_ref(R_mu_arg__);
  const auto& R_nu = stan::math::to_ref(R_nu_arg__);
  const auto& L_mu = stan::math::to_ref(L_mu_arg__);
  const auto& L_nu = stan::math::to_ref(L_nu_arg__);
  const auto& mu_0_centered = stan::math::to_ref(mu_0_centered_arg__);
  const auto& nu_0_centered = stan::math::to_ref(nu_0_centered_arg__);
  const auto& B_cnt = stan::math::to_ref(B_cnt_arg__);
  const auto& X_cnt = stan::math::to_ref(X_cnt_arg__);
  const auto& phi_AR = stan::math::to_ref(phi_AR_arg__);
  const auto& theta_MA = stan::math::to_ref(theta_MA_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 305;
    stan::math::validate_non_negative_index("l", "num_delays * num_strata",
      (num_delays * num_strata));
    current_statement__ = 306;
    stan::math::validate_non_negative_index("l", "num_steps", num_steps);
    Eigen::Matrix<local_scalar_t__,-1,-1> l =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((num_delays *
        num_strata), num_steps, DUMMY_VAR__);
    current_statement__ = 307;
    stan::model::assign(l,
      stan::math::rep_matrix(0.0, (num_delays * num_strata), num_steps),
      "assigning variable l");
    current_statement__ = 308;
    stan::math::validate_non_negative_index("mu", "num_steps", num_steps);
    current_statement__ = 309;
    stan::math::validate_non_negative_index("mu", "num_delays * num_strata",
      (num_delays * num_strata));
    current_statement__ = 310;
    stan::math::validate_non_negative_index("mu", "num_elements(L_mu)",
      stan::math::num_elements(L_mu));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> mu =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((num_delays *
          num_strata), stan::math::num_elements(L_mu), DUMMY_VAR__));
    current_statement__ = 312;
    stan::model::assign(mu,
      stan::math::add(
        stan::math::rep_matrix(mu_0_mean, (num_strata * num_delays),
          stan::math::num_elements(L_mu)),
        stan::math::multiply(mu_0_sd, mu_0_centered)),
      "assigning variable mu", stan::model::index_uni(1));
    current_statement__ = 313;
    stan::math::validate_non_negative_index("nu", "num_steps", num_steps);
    current_statement__ = 314;
    stan::math::validate_non_negative_index("nu", "num_delays * num_strata",
      (num_delays * num_strata));
    current_statement__ = 315;
    stan::math::validate_non_negative_index("nu", "num_elements(L_nu)",
      stan::math::num_elements(L_nu));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> nu =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((num_delays *
          num_strata), stan::math::num_elements(L_nu), DUMMY_VAR__));
    current_statement__ = 317;
    stan::model::assign(nu,
      stan::math::add(
        stan::math::rep_matrix(nu_0_mean, (num_strata * num_delays),
          stan::math::num_elements(L_nu)),
        stan::math::multiply(nu_0_sd, nu_0_centered)),
      "assigning variable nu", stan::model::index_uni(1));
    current_statement__ = 318;
    stan::math::validate_non_negative_index("phi",
      "num_elements(phi_AR) + 1", (stan::math::num_elements(phi_AR) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> phi =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        phi_AR) + 1),
        DUMMY_VAR__);
    current_statement__ = 319;
    stan::model::assign(phi, create_phi_AR(phi_AR, pstream__),
      "assigning variable phi");
    current_statement__ = 320;
    stan::math::validate_non_negative_index("theta",
      "num_elements(theta_MA) + 1", (stan::math::num_elements(theta_MA) + 1));
    Eigen::Matrix<local_scalar_t__,-1,1> theta =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        theta_MA) + 1),
        DUMMY_VAR__);
    current_statement__ = 321;
    stan::model::assign(theta, create_theta_MA(theta_MA, pstream__),
      "assigning variable theta");
    current_statement__ = 326;
    for (int t = 1; t <= (num_steps - 1); ++t) {
      current_statement__ = 322;
      stan::model::assign(l,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(mu, "mu", stan::model::index_uni(t)),
                L_mu),
              stan::math::multiply(
                stan::model::rvalue(nu, "nu", stan::model::index_uni(t)),
                L_nu)), AR(stan::model::deep_copy(l), phi, t, pstream__)),
          MA(xi, theta, t, pstream__)), "assigning variable l",
        stan::model::index_omni(), stan::model::index_uni(t));
      current_statement__ = 323;
      stan::model::assign(mu,
        stan::math::add(
          stan::math::multiply(
            stan::model::deep_copy(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(t))), A_mu),
          stan::math::multiply(
            stan::math::multiply(xi_mu_sd,
              stan::model::rvalue(xi_mu_centered, "xi_mu_centered",
                stan::model::index_uni(t))), R_mu)), "assigning variable mu",
        stan::model::index_uni((t + 1)));
      current_statement__ = 324;
      stan::model::assign(nu,
        stan::math::add(
          stan::math::multiply(
            stan::model::deep_copy(
              stan::model::rvalue(nu, "nu", stan::model::index_uni(t))), A_nu),
          stan::math::multiply(
            stan::math::multiply(xi_nu_sd,
              stan::model::rvalue(xi_nu_centered, "xi_nu_centered",
                stan::model::index_uni(t))), R_nu)), "assigning variable nu",
        stan::model::index_uni((t + 1)));
    }
    current_statement__ = 327;
    stan::model::assign(l,
      stan::math::add(
        stan::math::add(
          stan::math::add(
            stan::math::multiply(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(num_steps)),
              L_mu),
            stan::math::multiply(
              stan::model::rvalue(nu, "nu", stan::model::index_uni(num_steps)),
              L_nu)),
          AR(stan::model::deep_copy(l), phi, num_steps, pstream__)),
        MA(xi, theta, num_steps, pstream__)), "assigning variable l",
      stan::model::index_omni(), stan::model::index_uni(num_steps));
    current_statement__ = 328;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>
dist_lpdf(const T0__& x_arg__, const T1__& param_1, const T2__& param_2,
          const int& prior_spec, const int& is_positive, std::ostream*
          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__>;
  int current_statement__ = 0;
  const auto& x = stan::math::to_ref(x_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 403;
    if (is_positive) {
      current_statement__ = 400;
      if (stan::math::logical_eq(prior_spec, 0)) {
        current_statement__ = 399;
        return 0.0;
      } else {
        current_statement__ = 398;
        if (stan::math::logical_eq(prior_spec, 1)) {
          current_statement__ = 397;
          return stan::math::std_normal_lpdf<false>(x);
        } else {
          current_statement__ = 396;
          if (stan::math::logical_eq(prior_spec, 2)) {
            current_statement__ = 395;
            return (stan::math::normal_lpdf<false>(x, param_1, param_2) -
                   stan::math::normal_lccdf(0, param_1, param_2));
          } else {
            current_statement__ = 394;
            if (stan::math::logical_eq(prior_spec, 3)) {
              current_statement__ = 393;
              return (stan::math::student_t_lpdf<false>(x, 3.0, param_1,
                        param_2)
                     - stan::math::student_t_lccdf(0, 3.0, param_1, param_2));
            } else {
              current_statement__ = 392;
              if (stan::math::logical_eq(prior_spec, 4)) {
                current_statement__ = 391;
                return (stan::math::cauchy_lpdf<false>(x, param_1, param_2) -
                       stan::math::cauchy_lccdf(0, param_1, param_2));
              } else {
                current_statement__ = 390;
                if (stan::math::logical_eq(prior_spec, 5)) {
                  current_statement__ = 389;
                  return stan::math::exponential_lpdf<false>(x, param_1);
                } else {
                  current_statement__ = 388;
                  if (stan::math::logical_eq(prior_spec, 6)) {
                    current_statement__ = 387;
                    return stan::math::gamma_lpdf<false>(x, param_1, param_2);
                  } else {
                    current_statement__ = 386;
                    if (stan::math::logical_eq(prior_spec, 7)) {
                      current_statement__ = 385;
                      return stan::math::inv_gamma_lpdf<false>(x, param_1,
                               param_2);
                    } else {
                      current_statement__ = 384;
                      if (stan::math::logical_eq(prior_spec, 8)) {
                        current_statement__ = 383;
                        return stan::math::lognormal_lpdf<false>(x, param_1,
                                 param_2);
                      } else {
                        current_statement__ = 382;
                        if (stan::math::logical_eq(prior_spec, 9)) {
                          current_statement__ = 381;
                          return stan::math::weibull_lpdf<false>(x, param_1,
                                   param_2);
                        } else {
                          current_statement__ = 380;
                          if (stan::math::logical_eq(prior_spec, 10)) {
                            current_statement__ = 379;
                            return stan::math::frechet_lpdf<false>(x,
                                     param_1, param_2);
                          } else {
                            current_statement__ = 378;
                            if (stan::math::logical_eq(prior_spec, 11)) {
                              current_statement__ = 377;
                              return (stan::math::double_exponential_lpdf<
                                        false>(x, param_1, param_2)
                                     -
                                     stan::math::double_exponential_lccdf(0,
                                       param_1, param_2));
                            } else {
                              current_statement__ = 376;
                              if (stan::math::logical_eq(prior_spec, 12)) {
                                current_statement__ = 375;
                                return (stan::math::logistic_lpdf<false>(x,
                                          param_1, param_2)
                                       -
                                       stan::math::logistic_lccdf(0, param_1,
                                         param_2));
                              } else {
                                current_statement__ = 374;
                                if (stan::math::logical_eq(prior_spec, 13)) {
                                  current_statement__ = 373;
                                  return stan::math::rayleigh_lpdf<false>(x,
                                           param_1);
                                } else {
                                  current_statement__ = 372;
                                  if (stan::math::logical_eq(prior_spec, 14)) {
                                    current_statement__ = 371;
                                    return stan::math::loglogistic_lpdf<
                                             false>(x, param_1, param_2);
                                  } else {
                                    current_statement__ = 370;
                                    if (stan::math::logical_eq(prior_spec, 15)) {
                                      current_statement__ = 369;
                                      return (stan::math::gumbel_lpdf<false>(
                                                x, param_1, param_2)
                                             -
                                             stan::math::gumbel_lccdf(0,
                                               param_1, param_2));
                                    } else {
                                      current_statement__ = 368;
                                      if (stan::math::logical_eq(prior_spec,
                                            16)) {
                                        current_statement__ = 367;
                                        return (stan::math::uniform_lpdf<
                                                  false>(x, param_1, param_2)
                                               -
                                               stan::math::uniform_lccdf(0,
                                                 param_1, param_2));
                                      } else {
                                        current_statement__ = 366;
                                        std::stringstream errmsg_stream__;
                                        stan::math::stan_print(
                                          &errmsg_stream__, "invalid link");
                                        throw std::domain_error(
                                                errmsg_stream__.str());
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 401;
      return 0.0;
    } else {
      current_statement__ = 364;
      if (stan::math::logical_eq(prior_spec, 0)) {
        current_statement__ = 363;
        return 0.0;
      } else {
        current_statement__ = 362;
        if (stan::math::logical_eq(prior_spec, 1)) {
          current_statement__ = 361;
          return stan::math::std_normal_lpdf<false>(x);
        } else {
          current_statement__ = 360;
          if (stan::math::logical_eq(prior_spec, 2)) {
            current_statement__ = 359;
            return stan::math::normal_lpdf<false>(x, param_1, param_2);
          } else {
            current_statement__ = 358;
            if (stan::math::logical_eq(prior_spec, 3)) {
              current_statement__ = 357;
              return stan::math::student_t_lpdf<false>(x, 3.0, param_1,
                       param_2);
            } else {
              current_statement__ = 356;
              if (stan::math::logical_eq(prior_spec, 4)) {
                current_statement__ = 355;
                return stan::math::cauchy_lpdf<false>(x, param_1, param_2);
              } else {
                current_statement__ = 354;
                if (stan::math::logical_eq(prior_spec, 5)) {
                  current_statement__ = 353;
                  return stan::math::exponential_lpdf<false>(x, param_1);
                } else {
                  current_statement__ = 352;
                  if (stan::math::logical_eq(prior_spec, 6)) {
                    current_statement__ = 351;
                    return stan::math::gamma_lpdf<false>(x, param_1, param_2);
                  } else {
                    current_statement__ = 350;
                    if (stan::math::logical_eq(prior_spec, 7)) {
                      current_statement__ = 349;
                      return stan::math::inv_gamma_lpdf<false>(x, param_1,
                               param_2);
                    } else {
                      current_statement__ = 348;
                      if (stan::math::logical_eq(prior_spec, 8)) {
                        current_statement__ = 347;
                        return stan::math::lognormal_lpdf<false>(x, param_1,
                                 param_2);
                      } else {
                        current_statement__ = 346;
                        if (stan::math::logical_eq(prior_spec, 9)) {
                          current_statement__ = 345;
                          return stan::math::weibull_lpdf<false>(x, param_1,
                                   param_2);
                        } else {
                          current_statement__ = 344;
                          if (stan::math::logical_eq(prior_spec, 10)) {
                            current_statement__ = 343;
                            return stan::math::frechet_lpdf<false>(x,
                                     param_1, param_2);
                          } else {
                            current_statement__ = 342;
                            if (stan::math::logical_eq(prior_spec, 11)) {
                              current_statement__ = 341;
                              return stan::math::double_exponential_lpdf<
                                       false>(x, param_1, param_2);
                            } else {
                              current_statement__ = 340;
                              if (stan::math::logical_eq(prior_spec, 12)) {
                                current_statement__ = 339;
                                return stan::math::logistic_lpdf<false>(x,
                                         param_1, param_2);
                              } else {
                                current_statement__ = 338;
                                if (stan::math::logical_eq(prior_spec, 13)) {
                                  current_statement__ = 337;
                                  return stan::math::rayleigh_lpdf<false>(x,
                                           param_1);
                                } else {
                                  current_statement__ = 336;
                                  if (stan::math::logical_eq(prior_spec, 14)) {
                                    current_statement__ = 335;
                                    return stan::math::loglogistic_lpdf<
                                             false>(x, param_1, param_2);
                                  } else {
                                    current_statement__ = 334;
                                    if (stan::math::logical_eq(prior_spec, 15)) {
                                      current_statement__ = 333;
                                      return stan::math::gumbel_lpdf<false>(
                                               x, param_1, param_2);
                                    } else {
                                      current_statement__ = 332;
                                      if (stan::math::logical_eq(prior_spec,
                                            16)) {
                                        current_statement__ = 331;
                                        return stan::math::uniform_lpdf<
                                                 false>(x, param_1, param_2);
                                      } else {
                                        current_statement__ = 330;
                                        std::stringstream errmsg_stream__;
                                        stan::math::stan_print(
                                          &errmsg_stream__, "invalid link");
                                        throw std::domain_error(
                                                errmsg_stream__.str());
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
dist_lpdf(const T0__& x, const T1__& param_1, const T2__& param_2, const int&
          prior_spec, const int& is_positive, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 478;
    if (is_positive) {
      current_statement__ = 475;
      if (stan::math::logical_eq(prior_spec, 0)) {
        current_statement__ = 474;
        return 0.0;
      } else {
        current_statement__ = 473;
        if (stan::math::logical_eq(prior_spec, 1)) {
          current_statement__ = 472;
          return stan::math::std_normal_lpdf<false>(x);
        } else {
          current_statement__ = 471;
          if (stan::math::logical_eq(prior_spec, 2)) {
            current_statement__ = 470;
            return (stan::math::normal_lpdf<false>(x, param_1, param_2) -
                   stan::math::normal_lccdf(0, param_1, param_2));
          } else {
            current_statement__ = 469;
            if (stan::math::logical_eq(prior_spec, 3)) {
              current_statement__ = 468;
              return (stan::math::student_t_lpdf<false>(x, 3.0, param_1,
                        param_2)
                     - stan::math::student_t_lccdf(0, 3.0, param_1, param_2));
            } else {
              current_statement__ = 467;
              if (stan::math::logical_eq(prior_spec, 4)) {
                current_statement__ = 466;
                return (stan::math::cauchy_lpdf<false>(x, param_1, param_2) -
                       stan::math::cauchy_lccdf(0, param_1, param_2));
              } else {
                current_statement__ = 465;
                if (stan::math::logical_eq(prior_spec, 5)) {
                  current_statement__ = 464;
                  return stan::math::exponential_lpdf<false>(x, param_1);
                } else {
                  current_statement__ = 463;
                  if (stan::math::logical_eq(prior_spec, 6)) {
                    current_statement__ = 462;
                    return stan::math::gamma_lpdf<false>(x, param_1, param_2);
                  } else {
                    current_statement__ = 461;
                    if (stan::math::logical_eq(prior_spec, 7)) {
                      current_statement__ = 460;
                      return stan::math::inv_gamma_lpdf<false>(x, param_1,
                               param_2);
                    } else {
                      current_statement__ = 459;
                      if (stan::math::logical_eq(prior_spec, 8)) {
                        current_statement__ = 458;
                        return stan::math::lognormal_lpdf<false>(x, param_1,
                                 param_2);
                      } else {
                        current_statement__ = 457;
                        if (stan::math::logical_eq(prior_spec, 9)) {
                          current_statement__ = 456;
                          return stan::math::weibull_lpdf<false>(x, param_1,
                                   param_2);
                        } else {
                          current_statement__ = 455;
                          if (stan::math::logical_eq(prior_spec, 10)) {
                            current_statement__ = 454;
                            return stan::math::frechet_lpdf<false>(x,
                                     param_1, param_2);
                          } else {
                            current_statement__ = 453;
                            if (stan::math::logical_eq(prior_spec, 11)) {
                              current_statement__ = 452;
                              return (stan::math::double_exponential_lpdf<
                                        false>(x, param_1, param_2)
                                     -
                                     stan::math::double_exponential_lccdf(0,
                                       param_1, param_2));
                            } else {
                              current_statement__ = 451;
                              if (stan::math::logical_eq(prior_spec, 12)) {
                                current_statement__ = 450;
                                return (stan::math::logistic_lpdf<false>(x,
                                          param_1, param_2)
                                       -
                                       stan::math::logistic_lccdf(0, param_1,
                                         param_2));
                              } else {
                                current_statement__ = 449;
                                if (stan::math::logical_eq(prior_spec, 13)) {
                                  current_statement__ = 448;
                                  return stan::math::rayleigh_lpdf<false>(x,
                                           param_1);
                                } else {
                                  current_statement__ = 447;
                                  if (stan::math::logical_eq(prior_spec, 14)) {
                                    current_statement__ = 446;
                                    return stan::math::loglogistic_lpdf<
                                             false>(x, param_1, param_2);
                                  } else {
                                    current_statement__ = 445;
                                    if (stan::math::logical_eq(prior_spec, 15)) {
                                      current_statement__ = 444;
                                      return (stan::math::gumbel_lpdf<false>(
                                                x, param_1, param_2)
                                             -
                                             stan::math::gumbel_lccdf(0,
                                               param_1, param_2));
                                    } else {
                                      current_statement__ = 443;
                                      if (stan::math::logical_eq(prior_spec,
                                            16)) {
                                        current_statement__ = 442;
                                        return (stan::math::uniform_lpdf<
                                                  false>(x, param_1, param_2)
                                               -
                                               stan::math::uniform_lccdf(0,
                                                 param_1, param_2));
                                      } else {
                                        current_statement__ = 441;
                                        std::stringstream errmsg_stream__;
                                        stan::math::stan_print(
                                          &errmsg_stream__, "invalid link");
                                        throw std::domain_error(
                                                errmsg_stream__.str());
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 476;
      return 0.0;
    } else {
      current_statement__ = 439;
      if (stan::math::logical_eq(prior_spec, 0)) {
        current_statement__ = 438;
        return 0.0;
      } else {
        current_statement__ = 437;
        if (stan::math::logical_eq(prior_spec, 1)) {
          current_statement__ = 436;
          return stan::math::std_normal_lpdf<false>(x);
        } else {
          current_statement__ = 435;
          if (stan::math::logical_eq(prior_spec, 2)) {
            current_statement__ = 434;
            return stan::math::normal_lpdf<false>(x, param_1, param_2);
          } else {
            current_statement__ = 433;
            if (stan::math::logical_eq(prior_spec, 3)) {
              current_statement__ = 432;
              return stan::math::student_t_lpdf<false>(x, 3.0, param_1,
                       param_2);
            } else {
              current_statement__ = 431;
              if (stan::math::logical_eq(prior_spec, 4)) {
                current_statement__ = 430;
                return stan::math::cauchy_lpdf<false>(x, param_1, param_2);
              } else {
                current_statement__ = 429;
                if (stan::math::logical_eq(prior_spec, 5)) {
                  current_statement__ = 428;
                  return stan::math::exponential_lpdf<false>(x, param_1);
                } else {
                  current_statement__ = 427;
                  if (stan::math::logical_eq(prior_spec, 6)) {
                    current_statement__ = 426;
                    return stan::math::gamma_lpdf<false>(x, param_1, param_2);
                  } else {
                    current_statement__ = 425;
                    if (stan::math::logical_eq(prior_spec, 7)) {
                      current_statement__ = 424;
                      return stan::math::inv_gamma_lpdf<false>(x, param_1,
                               param_2);
                    } else {
                      current_statement__ = 423;
                      if (stan::math::logical_eq(prior_spec, 8)) {
                        current_statement__ = 422;
                        return stan::math::lognormal_lpdf<false>(x, param_1,
                                 param_2);
                      } else {
                        current_statement__ = 421;
                        if (stan::math::logical_eq(prior_spec, 9)) {
                          current_statement__ = 420;
                          return stan::math::weibull_lpdf<false>(x, param_1,
                                   param_2);
                        } else {
                          current_statement__ = 419;
                          if (stan::math::logical_eq(prior_spec, 10)) {
                            current_statement__ = 418;
                            return stan::math::frechet_lpdf<false>(x,
                                     param_1, param_2);
                          } else {
                            current_statement__ = 417;
                            if (stan::math::logical_eq(prior_spec, 11)) {
                              current_statement__ = 416;
                              return stan::math::double_exponential_lpdf<
                                       false>(x, param_1, param_2);
                            } else {
                              current_statement__ = 415;
                              if (stan::math::logical_eq(prior_spec, 12)) {
                                current_statement__ = 414;
                                return stan::math::logistic_lpdf<false>(x,
                                         param_1, param_2);
                              } else {
                                current_statement__ = 413;
                                if (stan::math::logical_eq(prior_spec, 13)) {
                                  current_statement__ = 412;
                                  return stan::math::rayleigh_lpdf<false>(x,
                                           param_1);
                                } else {
                                  current_statement__ = 411;
                                  if (stan::math::logical_eq(prior_spec, 14)) {
                                    current_statement__ = 410;
                                    return stan::math::loglogistic_lpdf<
                                             false>(x, param_1, param_2);
                                  } else {
                                    current_statement__ = 409;
                                    if (stan::math::logical_eq(prior_spec, 15)) {
                                      current_statement__ = 408;
                                      return stan::math::gumbel_lpdf<false>(
                                               x, param_1, param_2);
                                    } else {
                                      current_statement__ = 407;
                                      if (stan::math::logical_eq(prior_spec,
                                            16)) {
                                        current_statement__ = 406;
                                        return stan::math::uniform_lpdf<
                                                 false>(x, param_1, param_2);
                                      } else {
                                        current_statement__ = 405;
                                        std::stringstream errmsg_stream__;
                                        stan::math::stan_print(
                                          &errmsg_stream__, "invalid link");
                                        throw std::domain_error(
                                                errmsg_stream__.str());
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_nowcast_continuous final : public model_base_crtp<model_nowcast_continuous> {
private:
  int num_steps;
  int num_delays;
  int num_strata;
  int n_rows;
  std::vector<std::vector<int>> N_cases;
  int mu_degree;
  int mu_is_constant;
  int nu_degree;
  int nu_is_constant;
  int p;
  int q;
  double phi_AR_param_1;
  double phi_AR_param_2;
  double theta_MA_param_1;
  double theta_MA_param_2;
  double xi_sd_param_1;
  double xi_sd_param_2;
  int is_negative_binomial;
  int prior_only;
  double r_param_1;
  double r_param_2;
  double mu_sd_param_1;
  double mu_sd_param_2;
  double nu_sd_param_1;
  double nu_sd_param_2;
  int mu_sd_prior;
  int nu_sd_prior;
  int r_prior;
  int phi_AR_prior;
  int theta_MA_prior;
  int xi_sd_prior;
  int mu_0_mean_hyperprior;
  int nu_0_mean_hyperprior;
  int mu_0_sd_hyperprior;
  int nu_0_sd_hyperprior;
  double mu_0_mean_param_1;
  double mu_0_mean_param_2;
  double nu_0_mean_param_1;
  double nu_0_mean_param_2;
  double mu_0_sd_param_1;
  double mu_0_sd_param_2;
  double nu_0_sd_param_1;
  double nu_0_sd_param_2;
  double max_log_tol_val;
  double precision_tol;
  Eigen::Matrix<double,-1,-1> sd_cases_data__;
  Eigen::Matrix<double,-1,-1> mu_cases_data__;
  std::vector<std::vector<double>> Cases;
  Eigen::Matrix<double,-1,1> B_cnt_data__;
  Eigen::Matrix<double,-1,-1> X_cnt_data__;
  int nrows_mu_trend_A;
  int ncols_mu_trend_A;
  Eigen::Matrix<double,-1,-1> A_mu_data__;
  int nrows_nu_trend_A;
  int ncols_nu_trend_A;
  Eigen::Matrix<double,-1,-1> A_nu_data__;
  int nrows_mu_trend_R;
  int ncols_mu_trend_R;
  Eigen::Matrix<double,-1,-1> R_mu_data__;
  int nrows_nu_trend_R;
  int ncols_nu_trend_R;
  Eigen::Matrix<double,-1,-1> R_nu_data__;
  int num_elements_mu_L;
  Eigen::Matrix<double,-1,1> L_mu_data__;
  int num_elements_nu_L;
  Eigen::Matrix<double,-1,1> L_nu_data__;
  int mu_0_size;
  int nu_0_size;
  int xi_mu_size;
  int xi_nu_size;
  int n_col;
  int t_col;
  int d_col;
  int s_col;
  int mu_0_centered_1dim__;
  int nu_0_centered_1dim__;
  int xi_centered_1dim__;
  int xi_mu_centered_1dim__;
  int xi_mu_centered_2dim__;
  int xi_nu_centered_1dim__;
  int xi_nu_centered_2dim__;
  int xi_1dim__;
  int lambda_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> sd_cases{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> mu_cases{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> B_cnt{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_cnt{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> A_mu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> A_nu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_mu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> R_nu{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> L_mu{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> L_nu{nullptr, 0};
public:
  ~model_nowcast_continuous() {}
  model_nowcast_continuous(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nowcast_continuous_namespace::model_nowcast_continuous";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization", "num_steps", "int",
        std::vector<size_t>{});
      num_steps = std::numeric_limits<int>::min();
      current_statement__ = 47;
      num_steps = context__.vals_i("num_steps")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "num_steps", num_steps,
        1);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "num_delays", "int",
        std::vector<size_t>{});
      num_delays = std::numeric_limits<int>::min();
      current_statement__ = 48;
      num_delays = context__.vals_i("num_delays")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "num_delays",
        num_delays, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "num_strata", "int",
        std::vector<size_t>{});
      num_strata = std::numeric_limits<int>::min();
      current_statement__ = 49;
      num_strata = context__.vals_i("num_strata")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "num_strata",
        num_strata, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "n_rows", "int",
        std::vector<size_t>{});
      n_rows = std::numeric_limits<int>::min();
      current_statement__ = 50;
      n_rows = context__.vals_i("n_rows")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "n_rows", n_rows, 1);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("N_cases", "n_rows", n_rows);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "N_cases", "int",
        std::vector<size_t>{static_cast<size_t>(n_rows),
          static_cast<size_t>(3)});
      N_cases = std::vector<std::vector<int>>(n_rows,
                  std::vector<int>(3, std::numeric_limits<int>::min()));
      {
        std::vector<int> N_cases_flat__;
        current_statement__ = 52;
        N_cases_flat__ = context__.vals_i("N_cases");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 52;
          for (int sym2__ = 1; sym2__ <= n_rows; ++sym2__) {
            current_statement__ = 52;
            stan::model::assign(N_cases, N_cases_flat__[(pos__ - 1)],
              "assigning variable N_cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 52;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 53;
      context__.validate_dims("data initialization", "mu_degree", "int",
        std::vector<size_t>{});
      mu_degree = std::numeric_limits<int>::min();
      current_statement__ = 53;
      mu_degree = context__.vals_i("mu_degree")[(1 - 1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "mu_degree", mu_degree,
        0);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "mu_is_constant", "int",
        std::vector<size_t>{});
      mu_is_constant = std::numeric_limits<int>::min();
      current_statement__ = 54;
      mu_is_constant = context__.vals_i("mu_is_constant")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "mu_is_constant",
        mu_is_constant, 0);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "mu_is_constant",
        mu_is_constant, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "nu_degree", "int",
        std::vector<size_t>{});
      nu_degree = std::numeric_limits<int>::min();
      current_statement__ = 55;
      nu_degree = context__.vals_i("nu_degree")[(1 - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__, "nu_degree", nu_degree,
        0);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "nu_is_constant", "int",
        std::vector<size_t>{});
      nu_is_constant = std::numeric_limits<int>::min();
      current_statement__ = 56;
      nu_is_constant = context__.vals_i("nu_is_constant")[(1 - 1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "nu_is_constant",
        nu_is_constant, 0);
      current_statement__ = 56;
      stan::math::check_less_or_equal(function__, "nu_is_constant",
        nu_is_constant, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 57;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "q", "int",
        std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      current_statement__ = 58;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "phi_AR_param_1",
        "double", std::vector<size_t>{});
      phi_AR_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 59;
      phi_AR_param_1 = context__.vals_r("phi_AR_param_1")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization", "phi_AR_param_2",
        "double", std::vector<size_t>{});
      phi_AR_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 60;
      phi_AR_param_2 = context__.vals_r("phi_AR_param_2")[(1 - 1)];
      current_statement__ = 61;
      context__.validate_dims("data initialization", "theta_MA_param_1",
        "double", std::vector<size_t>{});
      theta_MA_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 61;
      theta_MA_param_1 = context__.vals_r("theta_MA_param_1")[(1 - 1)];
      current_statement__ = 62;
      context__.validate_dims("data initialization", "theta_MA_param_2",
        "double", std::vector<size_t>{});
      theta_MA_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 62;
      theta_MA_param_2 = context__.vals_r("theta_MA_param_2")[(1 - 1)];
      current_statement__ = 63;
      context__.validate_dims("data initialization", "xi_sd_param_1",
        "double", std::vector<size_t>{});
      xi_sd_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 63;
      xi_sd_param_1 = context__.vals_r("xi_sd_param_1")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization", "xi_sd_param_2",
        "double", std::vector<size_t>{});
      xi_sd_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 64;
      xi_sd_param_2 = context__.vals_r("xi_sd_param_2")[(1 - 1)];
      current_statement__ = 65;
      context__.validate_dims("data initialization", "is_negative_binomial",
        "int", std::vector<size_t>{});
      is_negative_binomial = std::numeric_limits<int>::min();
      current_statement__ = 65;
      is_negative_binomial = context__.vals_i("is_negative_binomial")[(1 -
        1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "is_negative_binomial",
        is_negative_binomial, 0);
      current_statement__ = 65;
      stan::math::check_less_or_equal(function__, "is_negative_binomial",
        is_negative_binomial, 1);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 66;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "prior_only",
        prior_only, 0);
      current_statement__ = 66;
      stan::math::check_less_or_equal(function__, "prior_only", prior_only, 1);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "r_param_1", "double",
        std::vector<size_t>{});
      r_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 67;
      r_param_1 = context__.vals_r("r_param_1")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "r_param_1", r_param_1,
        0);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "r_param_2", "double",
        std::vector<size_t>{});
      r_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 68;
      r_param_2 = context__.vals_r("r_param_2")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "r_param_2", r_param_2,
        0);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "mu_sd_param_1",
        "double", std::vector<size_t>{});
      mu_sd_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 69;
      mu_sd_param_1 = context__.vals_r("mu_sd_param_1")[(1 - 1)];
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "mu_sd_param_1",
        mu_sd_param_1, 0);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "mu_sd_param_2",
        "double", std::vector<size_t>{});
      mu_sd_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 70;
      mu_sd_param_2 = context__.vals_r("mu_sd_param_2")[(1 - 1)];
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "mu_sd_param_2",
        mu_sd_param_2, 0);
      current_statement__ = 71;
      context__.validate_dims("data initialization", "nu_sd_param_1",
        "double", std::vector<size_t>{});
      nu_sd_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 71;
      nu_sd_param_1 = context__.vals_r("nu_sd_param_1")[(1 - 1)];
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "nu_sd_param_1",
        nu_sd_param_1, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "nu_sd_param_2",
        "double", std::vector<size_t>{});
      nu_sd_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 72;
      nu_sd_param_2 = context__.vals_r("nu_sd_param_2")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "nu_sd_param_2",
        nu_sd_param_2, 0);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "mu_sd_prior", "int",
        std::vector<size_t>{});
      mu_sd_prior = std::numeric_limits<int>::min();
      current_statement__ = 73;
      mu_sd_prior = context__.vals_i("mu_sd_prior")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "mu_sd_prior",
        mu_sd_prior, 0);
      current_statement__ = 73;
      stan::math::check_less_or_equal(function__, "mu_sd_prior", mu_sd_prior,
        16);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "nu_sd_prior", "int",
        std::vector<size_t>{});
      nu_sd_prior = std::numeric_limits<int>::min();
      current_statement__ = 74;
      nu_sd_prior = context__.vals_i("nu_sd_prior")[(1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "nu_sd_prior",
        nu_sd_prior, 0);
      current_statement__ = 74;
      stan::math::check_less_or_equal(function__, "nu_sd_prior", nu_sd_prior,
        16);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "r_prior", "int",
        std::vector<size_t>{});
      r_prior = std::numeric_limits<int>::min();
      current_statement__ = 75;
      r_prior = context__.vals_i("r_prior")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "r_prior", r_prior, 0);
      current_statement__ = 75;
      stan::math::check_less_or_equal(function__, "r_prior", r_prior, 16);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "phi_AR_prior", "int",
        std::vector<size_t>{});
      phi_AR_prior = std::numeric_limits<int>::min();
      current_statement__ = 76;
      phi_AR_prior = context__.vals_i("phi_AR_prior")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "phi_AR_prior",
        phi_AR_prior, 0);
      current_statement__ = 76;
      stan::math::check_less_or_equal(function__, "phi_AR_prior",
        phi_AR_prior, 16);
      current_statement__ = 77;
      context__.validate_dims("data initialization", "theta_MA_prior", "int",
        std::vector<size_t>{});
      theta_MA_prior = std::numeric_limits<int>::min();
      current_statement__ = 77;
      theta_MA_prior = context__.vals_i("theta_MA_prior")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "theta_MA_prior",
        theta_MA_prior, 0);
      current_statement__ = 77;
      stan::math::check_less_or_equal(function__, "theta_MA_prior",
        theta_MA_prior, 16);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "xi_sd_prior", "int",
        std::vector<size_t>{});
      xi_sd_prior = std::numeric_limits<int>::min();
      current_statement__ = 78;
      xi_sd_prior = context__.vals_i("xi_sd_prior")[(1 - 1)];
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "xi_sd_prior",
        xi_sd_prior, 0);
      current_statement__ = 78;
      stan::math::check_less_or_equal(function__, "xi_sd_prior", xi_sd_prior,
        16);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "mu_0_mean_hyperprior",
        "int", std::vector<size_t>{});
      mu_0_mean_hyperprior = std::numeric_limits<int>::min();
      current_statement__ = 79;
      mu_0_mean_hyperprior = context__.vals_i("mu_0_mean_hyperprior")[(1 -
        1)];
      current_statement__ = 79;
      stan::math::check_greater_or_equal(function__, "mu_0_mean_hyperprior",
        mu_0_mean_hyperprior, 0);
      current_statement__ = 79;
      stan::math::check_less_or_equal(function__, "mu_0_mean_hyperprior",
        mu_0_mean_hyperprior, 16);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "nu_0_mean_hyperprior",
        "int", std::vector<size_t>{});
      nu_0_mean_hyperprior = std::numeric_limits<int>::min();
      current_statement__ = 80;
      nu_0_mean_hyperprior = context__.vals_i("nu_0_mean_hyperprior")[(1 -
        1)];
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "nu_0_mean_hyperprior",
        nu_0_mean_hyperprior, 0);
      current_statement__ = 80;
      stan::math::check_less_or_equal(function__, "nu_0_mean_hyperprior",
        nu_0_mean_hyperprior, 16);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "mu_0_sd_hyperprior",
        "int", std::vector<size_t>{});
      mu_0_sd_hyperprior = std::numeric_limits<int>::min();
      current_statement__ = 81;
      mu_0_sd_hyperprior = context__.vals_i("mu_0_sd_hyperprior")[(1 - 1)];
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "mu_0_sd_hyperprior",
        mu_0_sd_hyperprior, 0);
      current_statement__ = 81;
      stan::math::check_less_or_equal(function__, "mu_0_sd_hyperprior",
        mu_0_sd_hyperprior, 16);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "nu_0_sd_hyperprior",
        "int", std::vector<size_t>{});
      nu_0_sd_hyperprior = std::numeric_limits<int>::min();
      current_statement__ = 82;
      nu_0_sd_hyperprior = context__.vals_i("nu_0_sd_hyperprior")[(1 - 1)];
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "nu_0_sd_hyperprior",
        nu_0_sd_hyperprior, 0);
      current_statement__ = 82;
      stan::math::check_less_or_equal(function__, "nu_0_sd_hyperprior",
        nu_0_sd_hyperprior, 16);
      current_statement__ = 83;
      context__.validate_dims("data initialization", "mu_0_mean_param_1",
        "double", std::vector<size_t>{});
      mu_0_mean_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 83;
      mu_0_mean_param_1 = context__.vals_r("mu_0_mean_param_1")[(1 - 1)];
      current_statement__ = 84;
      context__.validate_dims("data initialization", "mu_0_mean_param_2",
        "double", std::vector<size_t>{});
      mu_0_mean_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 84;
      mu_0_mean_param_2 = context__.vals_r("mu_0_mean_param_2")[(1 - 1)];
      current_statement__ = 85;
      context__.validate_dims("data initialization", "nu_0_mean_param_1",
        "double", std::vector<size_t>{});
      nu_0_mean_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 85;
      nu_0_mean_param_1 = context__.vals_r("nu_0_mean_param_1")[(1 - 1)];
      current_statement__ = 86;
      context__.validate_dims("data initialization", "nu_0_mean_param_2",
        "double", std::vector<size_t>{});
      nu_0_mean_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 86;
      nu_0_mean_param_2 = context__.vals_r("nu_0_mean_param_2")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization", "mu_0_sd_param_1",
        "double", std::vector<size_t>{});
      mu_0_sd_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 87;
      mu_0_sd_param_1 = context__.vals_r("mu_0_sd_param_1")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization", "mu_0_sd_param_2",
        "double", std::vector<size_t>{});
      mu_0_sd_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 88;
      mu_0_sd_param_2 = context__.vals_r("mu_0_sd_param_2")[(1 - 1)];
      current_statement__ = 89;
      context__.validate_dims("data initialization", "nu_0_sd_param_1",
        "double", std::vector<size_t>{});
      nu_0_sd_param_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 89;
      nu_0_sd_param_1 = context__.vals_r("nu_0_sd_param_1")[(1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization", "nu_0_sd_param_2",
        "double", std::vector<size_t>{});
      nu_0_sd_param_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 90;
      nu_0_sd_param_2 = context__.vals_r("nu_0_sd_param_2")[(1 - 1)];
      current_statement__ = 91;
      context__.validate_dims("data initialization", "max_log_tol_val",
        "double", std::vector<size_t>{});
      max_log_tol_val = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 91;
      max_log_tol_val = context__.vals_r("max_log_tol_val")[(1 - 1)];
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "max_log_tol_val",
        max_log_tol_val, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization", "precision_tol",
        "double", std::vector<size_t>{});
      precision_tol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 92;
      precision_tol = context__.vals_r("precision_tol")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "precision_tol",
        precision_tol, 0);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("sd_cases", "num_strata",
        num_strata);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("sd_cases", "num_delays",
        num_delays);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "sd_cases", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata),
          static_cast<size_t>(num_delays)});
      sd_cases_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_strata,
                          num_delays,
                          std::numeric_limits<double>::quiet_NaN());
      new (&sd_cases)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(sd_cases_data__.data(),
        num_strata, num_delays);
      {
        std::vector<local_scalar_t__> sd_cases_flat__;
        current_statement__ = 95;
        sd_cases_flat__ = context__.vals_r("sd_cases");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= num_delays; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 95;
            stan::model::assign(sd_cases, sd_cases_flat__[(pos__ - 1)],
              "assigning variable sd_cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 95;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 96;
      stan::math::validate_non_negative_index("mu_cases", "num_strata",
        num_strata);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("mu_cases", "num_delays",
        num_delays);
      current_statement__ = 98;
      context__.validate_dims("data initialization", "mu_cases", "double",
        std::vector<size_t>{static_cast<size_t>(num_strata),
          static_cast<size_t>(num_delays)});
      mu_cases_data__ = Eigen::Matrix<double,-1,-1>::Constant(num_strata,
                          num_delays,
                          std::numeric_limits<double>::quiet_NaN());
      new (&mu_cases)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(mu_cases_data__.data(),
        num_strata, num_delays);
      {
        std::vector<local_scalar_t__> mu_cases_flat__;
        current_statement__ = 98;
        mu_cases_flat__ = context__.vals_r("mu_cases");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= num_delays; ++sym1__) {
          current_statement__ = 98;
          for (int sym2__ = 1; sym2__ <= num_strata; ++sym2__) {
            current_statement__ = 98;
            stan::model::assign(mu_cases, mu_cases_flat__[(pos__ - 1)],
              "assigning variable mu_cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 98;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 99;
      stan::math::validate_non_negative_index("Cases", "n_rows", n_rows);
      current_statement__ = 100;
      context__.validate_dims("data initialization", "Cases", "double",
        std::vector<size_t>{static_cast<size_t>(n_rows),
          static_cast<size_t>(1)});
      Cases = std::vector<std::vector<double>>(n_rows,
                std::vector<double>(1,
                  std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> Cases_flat__;
        current_statement__ = 100;
        Cases_flat__ = context__.vals_r("Cases");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 100;
          for (int sym2__ = 1; sym2__ <= n_rows; ++sym2__) {
            current_statement__ = 100;
            stan::model::assign(Cases, Cases_flat__[(pos__ - 1)],
              "assigning variable Cases", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 100;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 101;
      B_cnt_data__ = Eigen::Matrix<double,-1,1>::Constant(1,
                       std::numeric_limits<double>::quiet_NaN());
      new (&B_cnt)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(B_cnt_data__.data(), 1);
      current_statement__ = 101;
      stan::model::assign(B_cnt, stan::math::rep_vector(0.0, 1),
        "assigning variable B_cnt");
      current_statement__ = 102;
      X_cnt_data__ = Eigen::Matrix<double,-1,-1>::Constant(1, 1,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_cnt)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_cnt_data__.data(), 1, 1);
      current_statement__ = 102;
      stan::model::assign(X_cnt, stan::math::rep_matrix(0.0, 1, 1),
        "assigning variable X_cnt");
      current_statement__ = 103;
      nrows_mu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 103;
      nrows_mu_trend_A = get_num_rows_A_trend(mu_degree, pstream__);
      current_statement__ = 104;
      ncols_mu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 104;
      ncols_mu_trend_A = get_num_cols_A_trend(mu_degree, pstream__);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("A_mu", "nrows_mu_trend_A",
        nrows_mu_trend_A);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("A_mu", "ncols_mu_trend_A",
        ncols_mu_trend_A);
      current_statement__ = 107;
      A_mu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_mu_trend_A,
                      ncols_mu_trend_A,
                      std::numeric_limits<double>::quiet_NaN());
      new (&A_mu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(A_mu_data__.data(),
        nrows_mu_trend_A, ncols_mu_trend_A);
      current_statement__ = 107;
      stan::model::assign(A_mu,
        create_trend_matrix_block_A(mu_degree, pstream__),
        "assigning variable A_mu");
      current_statement__ = 108;
      nrows_nu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 108;
      nrows_nu_trend_A = get_num_rows_A_trend(nu_degree, pstream__);
      current_statement__ = 109;
      ncols_nu_trend_A = std::numeric_limits<int>::min();
      current_statement__ = 109;
      ncols_nu_trend_A = get_num_cols_A_trend(nu_degree, pstream__);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("A_nu", "nrows_nu_trend_A",
        nrows_nu_trend_A);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("A_nu", "ncols_nu_trend_A",
        ncols_nu_trend_A);
      current_statement__ = 112;
      A_nu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_nu_trend_A,
                      ncols_nu_trend_A,
                      std::numeric_limits<double>::quiet_NaN());
      new (&A_nu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(A_nu_data__.data(),
        nrows_nu_trend_A, ncols_nu_trend_A);
      current_statement__ = 112;
      stan::model::assign(A_nu,
        create_trend_matrix_block_A(nu_degree, pstream__),
        "assigning variable A_nu");
      current_statement__ = 113;
      nrows_mu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 113;
      nrows_mu_trend_R = get_num_rows_R_trend(mu_degree, pstream__);
      current_statement__ = 114;
      ncols_mu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 114;
      ncols_mu_trend_R = get_num_cols_R_trend(mu_degree, pstream__);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("R_mu", "nrows_mu_trend_R",
        nrows_mu_trend_R);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("R_mu", "ncols_mu_trend_R",
        ncols_mu_trend_R);
      current_statement__ = 117;
      R_mu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_mu_trend_R,
                      ncols_mu_trend_R,
                      std::numeric_limits<double>::quiet_NaN());
      new (&R_mu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_mu_data__.data(),
        nrows_mu_trend_R, ncols_mu_trend_R);
      current_statement__ = 117;
      stan::model::assign(R_mu,
        create_trend_matrix_block_R(mu_degree, mu_is_constant, pstream__),
        "assigning variable R_mu");
      current_statement__ = 118;
      nrows_nu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 118;
      nrows_nu_trend_R = get_num_rows_R_trend(nu_degree, pstream__);
      current_statement__ = 119;
      ncols_nu_trend_R = std::numeric_limits<int>::min();
      current_statement__ = 119;
      ncols_nu_trend_R = get_num_cols_R_trend(nu_degree, pstream__);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("R_nu", "nrows_nu_trend_R",
        nrows_nu_trend_R);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("R_nu", "ncols_nu_trend_R",
        ncols_nu_trend_R);
      current_statement__ = 122;
      R_nu_data__ = Eigen::Matrix<double,-1,-1>::Constant(nrows_nu_trend_R,
                      ncols_nu_trend_R,
                      std::numeric_limits<double>::quiet_NaN());
      new (&R_nu) Eigen::Map<Eigen::Matrix<double,-1,-1>>(R_nu_data__.data(),
        nrows_nu_trend_R, ncols_nu_trend_R);
      current_statement__ = 122;
      stan::model::assign(R_nu,
        create_trend_matrix_block_R(nu_degree, nu_is_constant, pstream__),
        "assigning variable R_nu");
      current_statement__ = 123;
      num_elements_mu_L = std::numeric_limits<int>::min();
      current_statement__ = 123;
      num_elements_mu_L = get_num_elements_L_trend(mu_degree, pstream__);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("L_mu", "num_elements_mu_L",
        num_elements_mu_L);
      current_statement__ = 125;
      L_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(num_elements_mu_L,
                      std::numeric_limits<double>::quiet_NaN());
      new (&L_mu) Eigen::Map<Eigen::Matrix<double,-1,1>>(L_mu_data__.data(),
        num_elements_mu_L);
      current_statement__ = 125;
      stan::model::assign(L_mu,
        create_trend_vector_block_L(mu_degree, pstream__),
        "assigning variable L_mu");
      current_statement__ = 126;
      num_elements_nu_L = std::numeric_limits<int>::min();
      current_statement__ = 126;
      num_elements_nu_L = get_num_elements_L_trend(nu_degree, pstream__);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("L_nu", "num_elements_nu_L",
        num_elements_nu_L);
      current_statement__ = 128;
      L_nu_data__ = Eigen::Matrix<double,-1,1>::Constant(num_elements_nu_L,
                      std::numeric_limits<double>::quiet_NaN());
      new (&L_nu) Eigen::Map<Eigen::Matrix<double,-1,1>>(L_nu_data__.data(),
        num_elements_nu_L);
      current_statement__ = 128;
      stan::model::assign(L_nu,
        create_trend_vector_block_L(nu_degree, pstream__),
        "assigning variable L_nu");
      current_statement__ = 129;
      mu_0_size = std::numeric_limits<int>::min();
      current_statement__ = 129;
      mu_0_size = num_elements_mu_L;
      current_statement__ = 130;
      nu_0_size = std::numeric_limits<int>::min();
      current_statement__ = 130;
      nu_0_size = num_elements_nu_L;
      current_statement__ = 131;
      xi_mu_size = std::numeric_limits<int>::min();
      current_statement__ = 131;
      xi_mu_size = nrows_mu_trend_R;
      current_statement__ = 132;
      xi_nu_size = std::numeric_limits<int>::min();
      current_statement__ = 132;
      xi_nu_size = nrows_nu_trend_R;
      current_statement__ = 133;
      n_col = std::numeric_limits<int>::min();
      current_statement__ = 133;
      n_col = 1;
      current_statement__ = 134;
      t_col = std::numeric_limits<int>::min();
      current_statement__ = 134;
      t_col = 1;
      current_statement__ = 135;
      d_col = std::numeric_limits<int>::min();
      current_statement__ = 135;
      d_col = 2;
      current_statement__ = 136;
      s_col = std::numeric_limits<int>::min();
      current_statement__ = 136;
      s_col = 3;
      current_statement__ = 137;
      mu_0_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 137;
      mu_0_centered_1dim__ = (num_strata * num_delays);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("mu_0_centered",
        "num_strata * num_delays", mu_0_centered_1dim__);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("mu_0_centered", "mu_0_size",
        mu_0_size);
      current_statement__ = 139;
      nu_0_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 139;
      nu_0_centered_1dim__ = (num_strata * num_delays);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("nu_0_centered",
        "num_strata * num_delays", nu_0_centered_1dim__);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("nu_0_centered", "nu_0_size",
        nu_0_size);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("phi_AR", "p", p);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("theta_MA", "q", q);
      current_statement__ = 143;
      xi_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 143;
      xi_centered_1dim__ = (num_strata * num_delays);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("xi_centered",
        "num_strata * num_delays", xi_centered_1dim__);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("xi_centered", "num_steps",
        num_steps);
      current_statement__ = 145;
      xi_mu_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 145;
      xi_mu_centered_1dim__ = (num_steps - 1);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("xi_mu_centered",
        "num_steps - 1", xi_mu_centered_1dim__);
      current_statement__ = 146;
      xi_mu_centered_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 146;
      xi_mu_centered_2dim__ = (num_strata * num_delays);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("xi_mu_centered",
        "num_strata * num_delays", xi_mu_centered_2dim__);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("xi_mu_centered", "xi_mu_size",
        xi_mu_size);
      current_statement__ = 148;
      xi_nu_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 148;
      xi_nu_centered_1dim__ = (num_steps - 1);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("xi_nu_centered",
        "num_steps - 1", xi_nu_centered_1dim__);
      current_statement__ = 149;
      xi_nu_centered_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 149;
      xi_nu_centered_2dim__ = (num_strata * num_delays);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("xi_nu_centered",
        "num_strata * num_delays", xi_nu_centered_2dim__);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("xi_nu_centered", "xi_nu_size",
        xi_nu_size);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("r", "1", 1);
      current_statement__ = 152;
      xi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 152;
      xi_1dim__ = (num_delays * num_strata);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("xi",
        "num_delays * num_strata", xi_1dim__);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("xi", "num_steps", num_steps);
      current_statement__ = 154;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 154;
      lambda_1dim__ = (num_delays * num_strata);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("lambda",
        "num_delays * num_strata", lambda_1dim__);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("lambda", "num_steps",
        num_steps);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("lambda_mean", "n_rows", n_rows);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (mu_0_centered_1dim__ * mu_0_size) +
      (nu_0_centered_1dim__ * nu_0_size) + p + q + 1 + 1 + 1 + 1 + 1 + 1 + 1
      + (xi_centered_1dim__ * num_steps) + (xi_mu_centered_1dim__ *
      xi_mu_centered_2dim__ * xi_mu_size) + (xi_nu_centered_1dim__ *
      xi_nu_centered_2dim__ * xi_nu_size) + 1;
  }
  inline std::string model_name() const final {
    return "model_nowcast_continuous";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcast_continuous_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 1;
      mu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
                        mu_0_size);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 2;
      nu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
                        nu_0_size);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_AR =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 3;
      phi_AR = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, p);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_MA =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 4;
      theta_MA = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                   lp__, q);
      local_scalar_t__ mu_0_mean = DUMMY_VAR__;
      current_statement__ = 5;
      mu_0_mean = in__.template read<local_scalar_t__>();
      local_scalar_t__ nu_0_mean = DUMMY_VAR__;
      current_statement__ = 6;
      nu_0_mean = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_0_sd = DUMMY_VAR__;
      current_statement__ = 7;
      mu_0_sd = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ nu_0_sd = DUMMY_VAR__;
      current_statement__ = 8;
      nu_0_sd = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      local_scalar_t__ xi_sd = DUMMY_VAR__;
      current_statement__ = 9;
      xi_sd = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      local_scalar_t__ xi_mu_sd = DUMMY_VAR__;
      current_statement__ = 10;
      xi_mu_sd = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ xi_nu_sd = DUMMY_VAR__;
      current_statement__ = 11;
      xi_nu_sd = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_centered_1dim__,
          num_steps, DUMMY_VAR__);
      current_statement__ = 12;
      xi_centered = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_centered_1dim__,
                      num_steps);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu_centered =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_centered_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_centered_2dim__,
            xi_mu_size, DUMMY_VAR__));
      current_statement__ = 13;
      xi_mu_centered = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_mu_centered_1dim__,
                         xi_mu_centered_2dim__, xi_mu_size);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu_centered =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_centered_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_centered_2dim__,
            xi_nu_size, DUMMY_VAR__));
      current_statement__ = 14;
      xi_nu_centered = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_nu_centered_1dim__,
                         xi_nu_centered_2dim__, xi_nu_size);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 15;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 1);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_1dim__, num_steps,
          DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(xi, stan::math::multiply(xi_sd, xi_centered),
        "assigning variable xi");
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lambda_1dim__,
          num_steps, DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(lambda,
        state_space_process(num_steps, num_delays, num_strata, A_mu, A_nu,
          R_mu, R_nu, L_mu, L_nu, xi_mu_centered, xi_nu_centered, xi_mu_sd,
          xi_nu_sd, mu_0_centered, nu_0_centered, mu_0_sd, nu_0_sd,
          mu_0_mean, nu_0_mean, B_cnt, X_cnt, phi_AR, theta_MA, xi, pstream__),
        "assigning variable lambda");
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_mean =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_rows, DUMMY_VAR__);
      current_statement__ = 21;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 20;
        stan::model::assign(lambda_mean,
          stan::model::rvalue(lambda, "lambda",
            stan::model::index_uni(((num_strata *
              (stan::model::rvalue(N_cases, "N_cases",
                 stan::model::index_uni(n), stan::model::index_uni(d_col)) -
              1)) +
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(s_col)))),
            stan::model::index_uni(
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))),
          "assigning variable lambda_mean", stan::model::index_uni(n));
      }
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 19;
      lprior = 0;
      current_statement__ = 22;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(mu_0_centered)));
      current_statement__ = 23;
      lprior = (lprior +
        dist_lpdf<false>(mu_0_mean, mu_0_mean_param_1, mu_0_mean_param_2,
          mu_0_mean_hyperprior, 0, pstream__));
      current_statement__ = 24;
      lprior = (lprior +
        dist_lpdf<false>(mu_0_sd, mu_0_sd_param_1, mu_0_sd_param_2,
          mu_0_sd_hyperprior, 1, pstream__));
      current_statement__ = 25;
      lprior = (lprior +
        dist_lpdf<false>(xi_mu_sd, mu_sd_param_1, mu_sd_param_2, mu_sd_prior,
          1, pstream__));
      current_statement__ = 26;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(nu_0_centered)));
      current_statement__ = 27;
      lprior = (lprior +
        dist_lpdf<false>(nu_0_mean, nu_0_mean_param_1, nu_0_mean_param_2,
          nu_0_mean_hyperprior, 0, pstream__));
      current_statement__ = 28;
      lprior = (lprior +
        dist_lpdf<false>(nu_0_sd, nu_0_sd_param_1, nu_0_sd_param_2,
          nu_0_sd_hyperprior, 1, pstream__));
      current_statement__ = 29;
      lprior = (lprior +
        dist_lpdf<false>(xi_nu_sd, nu_sd_param_1, nu_sd_param_2, nu_sd_prior,
          1, pstream__));
      current_statement__ = 33;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 30;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_nu_centered, "xi_nu_centered",
                stan::model::index_uni(t)))));
        current_statement__ = 31;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_mu_centered, "xi_mu_centered",
                stan::model::index_uni(t)))));
      }
      current_statement__ = 34;
      lprior = (lprior +
        dist_lpdf<false>(phi_AR, phi_AR_param_1, phi_AR_param_2,
          phi_AR_prior, 0, pstream__));
      current_statement__ = 35;
      lprior = (lprior +
        dist_lpdf<false>(theta_MA, theta_MA_param_1, theta_MA_param_2,
          theta_MA_prior, 0, pstream__));
      current_statement__ = 36;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_centered)));
      current_statement__ = 37;
      lprior = (lprior +
        dist_lpdf<false>(xi_sd, xi_sd_param_1, xi_sd_param_2, xi_sd_prior, 1,
          pstream__));
      current_statement__ = 38;
      lprior = (lprior +
        dist_lpdf<false>(r, r_param_1, r_param_2, r_prior, 1, pstream__));
      {
        current_statement__ = 45;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 43;
          if (is_negative_binomial) {
            current_statement__ = 41;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(Cases, "Cases",
                               stan::model::index_omni(),
                               stan::model::index_uni(n_col)), lambda_mean,
                             stan::math::rep_vector(
                               stan::model::rvalue(r, "r",
                                 stan::model::index_uni(1)),
                               stan::math::num_elements(lambda_mean))));
          } else {
            current_statement__ = 39;
            lp_accum__.add(stan::math::student_t_lpdf<false>(
                             stan::model::rvalue(Cases, "Cases",
                               stan::model::index_omni(),
                               stan::model::index_uni(n_col)), 3.0,
                             lambda_mean,
                             stan::math::rep_vector(
                               stan::model::rvalue(r, "r",
                                 stan::model::index_uni(1)),
                               stan::math::num_elements(lambda_mean))));
          }
        }
        current_statement__ = 46;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_nowcast_continuous_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> mu_0_centered =
        Eigen::Matrix<double,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
                        mu_0_size);
      Eigen::Matrix<double,-1,-1> nu_0_centered =
        Eigen::Matrix<double,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      nu_0_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
                        nu_0_size);
      Eigen::Matrix<double,-1,1> phi_AR =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      phi_AR = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                 lp__, p);
      Eigen::Matrix<double,-1,1> theta_MA =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      theta_MA = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-1, 1,
                   lp__, q);
      double mu_0_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_0_mean = in__.template read<local_scalar_t__>();
      double nu_0_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      nu_0_mean = in__.template read<local_scalar_t__>();
      double mu_0_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      mu_0_sd = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double nu_0_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      nu_0_sd = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      double xi_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      xi_sd = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      double xi_mu_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      xi_mu_sd = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double xi_nu_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      xi_nu_sd = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,-1> xi_centered =
        Eigen::Matrix<double,-1,-1>::Constant(xi_centered_1dim__, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      xi_centered = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_centered_1dim__,
                      num_steps);
      std::vector<Eigen::Matrix<double,-1,-1>> xi_mu_centered =
        std::vector<Eigen::Matrix<double,-1,-1>>(xi_mu_centered_1dim__,
          Eigen::Matrix<double,-1,-1>::Constant(xi_mu_centered_2dim__,
            xi_mu_size, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 13;
      xi_mu_centered = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_mu_centered_1dim__,
                         xi_mu_centered_2dim__, xi_mu_size);
      std::vector<Eigen::Matrix<double,-1,-1>> xi_nu_centered =
        std::vector<Eigen::Matrix<double,-1,-1>>(xi_nu_centered_1dim__,
          Eigen::Matrix<double,-1,-1>::Constant(xi_nu_centered_2dim__,
            xi_nu_size, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 14;
      xi_nu_centered = in__.template read<
                         std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>>(xi_nu_centered_1dim__,
                         xi_nu_centered_2dim__, xi_nu_size);
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 1);
      Eigen::Matrix<double,-1,-1> xi =
        Eigen::Matrix<double,-1,-1>::Constant(xi_1dim__, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lambda =
        Eigen::Matrix<double,-1,-1>::Constant(lambda_1dim__, num_steps,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda_mean =
        Eigen::Matrix<double,-1,1>::Constant(n_rows,
          std::numeric_limits<double>::quiet_NaN());
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_0_centered);
      out__.write(nu_0_centered);
      out__.write(phi_AR);
      out__.write(theta_MA);
      out__.write(mu_0_mean);
      out__.write(nu_0_mean);
      out__.write(mu_0_sd);
      out__.write(nu_0_sd);
      out__.write(xi_sd);
      out__.write(xi_mu_sd);
      out__.write(xi_nu_sd);
      out__.write(xi_centered);
      for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_mu_centered_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= xi_mu_centered_1dim__; ++sym3__) {
            out__.write(stan::model::rvalue(xi_mu_centered, "xi_mu_centered",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_nu_centered_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= xi_nu_centered_1dim__; ++sym3__) {
            out__.write(stan::model::rvalue(xi_nu_centered, "xi_nu_centered",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      out__.write(r);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 16;
      stan::model::assign(xi, stan::math::multiply(xi_sd, xi_centered),
        "assigning variable xi");
      current_statement__ = 17;
      stan::model::assign(lambda,
        state_space_process(num_steps, num_delays, num_strata, A_mu, A_nu,
          R_mu, R_nu, L_mu, L_nu, xi_mu_centered, xi_nu_centered, xi_mu_sd,
          xi_nu_sd, mu_0_centered, nu_0_centered, mu_0_sd, nu_0_sd,
          mu_0_mean, nu_0_mean, B_cnt, X_cnt, phi_AR, theta_MA, xi, pstream__),
        "assigning variable lambda");
      current_statement__ = 21;
      for (int n = 1; n <= n_rows; ++n) {
        current_statement__ = 20;
        stan::model::assign(lambda_mean,
          stan::model::rvalue(lambda, "lambda",
            stan::model::index_uni(((num_strata *
              (stan::model::rvalue(N_cases, "N_cases",
                 stan::model::index_uni(n), stan::model::index_uni(d_col)) -
              1)) +
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(s_col)))),
            stan::model::index_uni(
              stan::model::rvalue(N_cases, "N_cases",
                stan::model::index_uni(n), stan::model::index_uni(t_col)))),
          "assigning variable lambda_mean", stan::model::index_uni(n));
      }
      current_statement__ = 19;
      lprior = 0;
      current_statement__ = 22;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(mu_0_centered)));
      current_statement__ = 23;
      lprior = (lprior +
        dist_lpdf<false>(mu_0_mean, mu_0_mean_param_1, mu_0_mean_param_2,
          mu_0_mean_hyperprior, 0, pstream__));
      current_statement__ = 24;
      lprior = (lprior +
        dist_lpdf<false>(mu_0_sd, mu_0_sd_param_1, mu_0_sd_param_2,
          mu_0_sd_hyperprior, 1, pstream__));
      current_statement__ = 25;
      lprior = (lprior +
        dist_lpdf<false>(xi_mu_sd, mu_sd_param_1, mu_sd_param_2, mu_sd_prior,
          1, pstream__));
      current_statement__ = 26;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(
          stan::math::to_vector(nu_0_centered)));
      current_statement__ = 27;
      lprior = (lprior +
        dist_lpdf<false>(nu_0_mean, nu_0_mean_param_1, nu_0_mean_param_2,
          nu_0_mean_hyperprior, 0, pstream__));
      current_statement__ = 28;
      lprior = (lprior +
        dist_lpdf<false>(nu_0_sd, nu_0_sd_param_1, nu_0_sd_param_2,
          nu_0_sd_hyperprior, 1, pstream__));
      current_statement__ = 29;
      lprior = (lprior +
        dist_lpdf<false>(xi_nu_sd, nu_sd_param_1, nu_sd_param_2, nu_sd_prior,
          1, pstream__));
      current_statement__ = 33;
      for (int t = 1; t <= (num_steps - 1); ++t) {
        current_statement__ = 30;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_nu_centered, "xi_nu_centered",
                stan::model::index_uni(t)))));
        current_statement__ = 31;
        lprior = (lprior +
          stan::math::std_normal_lpdf<false>(
            stan::math::to_vector(
              stan::model::rvalue(xi_mu_centered, "xi_mu_centered",
                stan::model::index_uni(t)))));
      }
      current_statement__ = 34;
      lprior = (lprior +
        dist_lpdf<false>(phi_AR, phi_AR_param_1, phi_AR_param_2,
          phi_AR_prior, 0, pstream__));
      current_statement__ = 35;
      lprior = (lprior +
        dist_lpdf<false>(theta_MA, theta_MA_param_1, theta_MA_param_2,
          theta_MA_prior, 0, pstream__));
      current_statement__ = 36;
      lprior = (lprior +
        stan::math::std_normal_lpdf<false>(stan::math::to_vector(xi_centered)));
      current_statement__ = 37;
      lprior = (lprior +
        dist_lpdf<false>(xi_sd, xi_sd_param_1, xi_sd_param_2, xi_sd_prior, 1,
          pstream__));
      current_statement__ = 38;
      lprior = (lprior +
        dist_lpdf<false>(r, r_param_1, r_param_2, r_prior, 1, pstream__));
      if (emit_transformed_parameters__) {
        out__.write(xi);
        out__.write(lambda);
        out__.write(lambda_mean);
        out__.write(lprior);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu_0_centered,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,-1>>(mu_0_centered_1dim__,
          mu_0_size), "assigning variable mu_0_centered");
      out__.write(mu_0_centered);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(nu_0_centered,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,-1>>(nu_0_centered_1dim__,
          nu_0_size), "assigning variable nu_0_centered");
      out__.write(nu_0_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_AR =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(phi_AR,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable phi_AR");
      out__.write_free_lub(-1, 1, phi_AR);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_MA =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(theta_MA,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(q),
        "assigning variable theta_MA");
      out__.write_free_lub(-1, 1, theta_MA);
      local_scalar_t__ mu_0_mean = DUMMY_VAR__;
      current_statement__ = 5;
      mu_0_mean = in__.read<local_scalar_t__>();
      out__.write(mu_0_mean);
      local_scalar_t__ nu_0_mean = DUMMY_VAR__;
      current_statement__ = 6;
      nu_0_mean = in__.read<local_scalar_t__>();
      out__.write(nu_0_mean);
      local_scalar_t__ mu_0_sd = DUMMY_VAR__;
      current_statement__ = 7;
      mu_0_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, mu_0_sd);
      local_scalar_t__ nu_0_sd = DUMMY_VAR__;
      current_statement__ = 8;
      nu_0_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, nu_0_sd);
      local_scalar_t__ xi_sd = DUMMY_VAR__;
      current_statement__ = 9;
      xi_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, xi_sd);
      local_scalar_t__ xi_mu_sd = DUMMY_VAR__;
      current_statement__ = 10;
      xi_mu_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, xi_mu_sd);
      local_scalar_t__ xi_nu_sd = DUMMY_VAR__;
      current_statement__ = 11;
      xi_nu_sd = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, xi_nu_sd);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_centered_1dim__,
          num_steps, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(xi_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_centered_1dim__,
          num_steps), "assigning variable xi_centered");
      out__.write(xi_centered);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu_centered =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_centered_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_centered_2dim__,
            xi_mu_size, DUMMY_VAR__));
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= xi_mu_centered_2dim__; ++sym2__) {
          current_statement__ = 13;
          for (int sym3__ = 1; sym3__ <= xi_mu_centered_1dim__; ++sym3__) {
            current_statement__ = 13;
            stan::model::assign(xi_mu_centered,
              in__.read<local_scalar_t__>(),
              "assigning variable xi_mu_centered",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(xi_mu_centered);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu_centered =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_centered_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_centered_2dim__,
            xi_nu_size, DUMMY_VAR__));
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= xi_nu_centered_2dim__; ++sym2__) {
          current_statement__ = 14;
          for (int sym3__ = 1; sym3__ <= xi_nu_centered_1dim__; ++sym3__) {
            current_statement__ = 14;
            stan::model::assign(xi_nu_centered,
              in__.read<local_scalar_t__>(),
              "assigning variable xi_nu_centered",
              stan::model::index_uni(sym3__), stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
          }
        }
      }
      out__.write(xi_nu_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(r,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(1),
        "assigning variable r");
      out__.write_free_lb(0, r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_0_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(mu_0_centered_1dim__),
          static_cast<size_t>(mu_0_size)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "nu_0_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(nu_0_centered_1dim__),
          static_cast<size_t>(nu_0_size)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "phi_AR", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "theta_MA",
        "double", std::vector<size_t>{static_cast<size_t>(q)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_0_mean",
        "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "nu_0_mean",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "mu_0_sd",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "nu_0_sd",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "xi_sd", "double",
        std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "xi_mu_sd",
        "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "xi_nu_sd",
        "double", std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "xi_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(xi_centered_1dim__),
          static_cast<size_t>(num_steps)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "xi_mu_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(xi_mu_centered_1dim__),
          static_cast<size_t>(xi_mu_centered_2dim__),
          static_cast<size_t>(xi_mu_size)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "xi_nu_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(xi_nu_centered_1dim__),
          static_cast<size_t>(xi_nu_centered_2dim__),
          static_cast<size_t>(xi_nu_size)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> mu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(mu_0_centered_1dim__,
          mu_0_size, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_0_centered_flat__;
        current_statement__ = 1;
        mu_0_centered_flat__ = context__.vals_r("mu_0_centered");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= mu_0_centered_1dim__; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(mu_0_centered, mu_0_centered_flat__[(pos__ -
              1)], "assigning variable mu_0_centered",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(mu_0_centered);
      Eigen::Matrix<local_scalar_t__,-1,-1> nu_0_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nu_0_centered_1dim__,
          nu_0_size, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_0_centered_flat__;
        current_statement__ = 2;
        nu_0_centered_flat__ = context__.vals_r("nu_0_centered");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= nu_0_centered_1dim__; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(nu_0_centered, nu_0_centered_flat__[(pos__ -
              1)], "assigning variable nu_0_centered",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(nu_0_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> phi_AR =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_AR_flat__;
        current_statement__ = 3;
        phi_AR_flat__ = context__.vals_r("phi_AR");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(phi_AR, phi_AR_flat__[(pos__ - 1)],
            "assigning variable phi_AR", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, phi_AR);
      Eigen::Matrix<local_scalar_t__,-1,1> theta_MA =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_MA_flat__;
        current_statement__ = 4;
        theta_MA_flat__ = context__.vals_r("theta_MA");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(theta_MA, theta_MA_flat__[(pos__ - 1)],
            "assigning variable theta_MA", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-1, 1, theta_MA);
      local_scalar_t__ mu_0_mean = DUMMY_VAR__;
      current_statement__ = 5;
      mu_0_mean = context__.vals_r("mu_0_mean")[(1 - 1)];
      out__.write(mu_0_mean);
      local_scalar_t__ nu_0_mean = DUMMY_VAR__;
      current_statement__ = 6;
      nu_0_mean = context__.vals_r("nu_0_mean")[(1 - 1)];
      out__.write(nu_0_mean);
      local_scalar_t__ mu_0_sd = DUMMY_VAR__;
      current_statement__ = 7;
      mu_0_sd = context__.vals_r("mu_0_sd")[(1 - 1)];
      out__.write_free_lb(0, mu_0_sd);
      local_scalar_t__ nu_0_sd = DUMMY_VAR__;
      current_statement__ = 8;
      nu_0_sd = context__.vals_r("nu_0_sd")[(1 - 1)];
      out__.write_free_lb(0, nu_0_sd);
      local_scalar_t__ xi_sd = DUMMY_VAR__;
      current_statement__ = 9;
      xi_sd = context__.vals_r("xi_sd")[(1 - 1)];
      out__.write_free_lb(0, xi_sd);
      local_scalar_t__ xi_mu_sd = DUMMY_VAR__;
      current_statement__ = 10;
      xi_mu_sd = context__.vals_r("xi_mu_sd")[(1 - 1)];
      out__.write_free_lb(0, xi_mu_sd);
      local_scalar_t__ xi_nu_sd = DUMMY_VAR__;
      current_statement__ = 11;
      xi_nu_sd = context__.vals_r("xi_nu_sd")[(1 - 1)];
      out__.write_free_lb(0, xi_nu_sd);
      Eigen::Matrix<local_scalar_t__,-1,-1> xi_centered =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_centered_1dim__,
          num_steps, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> xi_centered_flat__;
        current_statement__ = 12;
        xi_centered_flat__ = context__.vals_r("xi_centered");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= xi_centered_1dim__; ++sym2__) {
            current_statement__ = 12;
            stan::model::assign(xi_centered, xi_centered_flat__[(pos__ - 1)],
              "assigning variable xi_centered",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(xi_centered);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_mu_centered =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_mu_centered_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_mu_centered_2dim__,
            xi_mu_size, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> xi_mu_centered_flat__;
        current_statement__ = 13;
        xi_mu_centered_flat__ = context__.vals_r("xi_mu_centered");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= xi_mu_centered_2dim__; ++sym2__) {
            current_statement__ = 13;
            for (int sym3__ = 1; sym3__ <= xi_mu_centered_1dim__; ++sym3__) {
              current_statement__ = 13;
              stan::model::assign(xi_mu_centered,
                xi_mu_centered_flat__[(pos__ - 1)],
                "assigning variable xi_mu_centered",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 13;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(xi_mu_centered);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>> xi_nu_centered =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,-1>>(xi_nu_centered_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(xi_nu_centered_2dim__,
            xi_nu_size, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> xi_nu_centered_flat__;
        current_statement__ = 14;
        xi_nu_centered_flat__ = context__.vals_r("xi_nu_centered");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= xi_nu_centered_2dim__; ++sym2__) {
            current_statement__ = 14;
            for (int sym3__ = 1; sym3__ <= xi_nu_centered_1dim__; ++sym3__) {
              current_statement__ = 14;
              stan::model::assign(xi_nu_centered,
                xi_nu_centered_flat__[(pos__ - 1)],
                "assigning variable xi_nu_centered",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 14;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      out__.write(xi_nu_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 15;
        r_flat__ = context__.vals_r("r");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 15;
          stan::model::assign(r, r_flat__[(pos__ - 1)],
            "assigning variable r", stan::model::index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_0_centered", "nu_0_centered",
                "phi_AR", "theta_MA", "mu_0_mean", "nu_0_mean", "mu_0_sd",
                "nu_0_sd", "xi_sd", "xi_mu_sd", "xi_nu_sd", "xi_centered",
                "xi_mu_centered", "xi_nu_centered", "r"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"xi", "lambda", "lambda_mean", "lprior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    mu_0_centered_1dim__),
                                                 static_cast<size_t>(
                                                   mu_0_size)},
                std::vector<size_t>{static_cast<size_t>(nu_0_centered_1dim__),
                  static_cast<size_t>(nu_0_size)},
                std::vector<size_t>{static_cast<size_t>(p)},
                std::vector<size_t>{static_cast<size_t>(q)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(xi_centered_1dim__),
                  static_cast<size_t>(num_steps)},
                std::vector<size_t>{static_cast<size_t>(xi_mu_centered_1dim__),
                  static_cast<size_t>(xi_mu_centered_2dim__),
                  static_cast<size_t>(xi_mu_size)},
                std::vector<size_t>{static_cast<size_t>(xi_nu_centered_1dim__),
                  static_cast<size_t>(xi_nu_centered_2dim__),
                  static_cast<size_t>(xi_nu_size)},
                std::vector<size_t>{static_cast<size_t>(1)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(xi_1dim__),
               static_cast<size_t>(num_steps)},
             std::vector<size_t>{static_cast<size_t>(lambda_1dim__),
               static_cast<size_t>(num_steps)},
             std::vector<size_t>{static_cast<size_t>(n_rows)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= mu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "nu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_AR" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_MA" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_0_mean");
    param_names__.emplace_back(std::string() + "nu_0_mean");
    param_names__.emplace_back(std::string() + "mu_0_sd");
    param_names__.emplace_back(std::string() + "nu_0_sd");
    param_names__.emplace_back(std::string() + "xi_sd");
    param_names__.emplace_back(std::string() + "xi_mu_sd");
    param_names__.emplace_back(std::string() + "xi_nu_sd");
    for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_mu_centered_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_mu_centered_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_mu_centered" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_nu_centered_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_nu_centered_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_nu_centered" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "xi" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lambda_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_mean" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= mu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= mu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= nu_0_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= nu_0_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "nu_0_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi_AR" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "theta_MA" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_0_mean");
    param_names__.emplace_back(std::string() + "nu_0_mean");
    param_names__.emplace_back(std::string() + "mu_0_sd");
    param_names__.emplace_back(std::string() + "nu_0_sd");
    param_names__.emplace_back(std::string() + "xi_sd");
    param_names__.emplace_back(std::string() + "xi_mu_sd");
    param_names__.emplace_back(std::string() + "xi_nu_sd");
    for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_centered_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "xi_centered" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_mu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_mu_centered_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_mu_centered_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_mu_centered" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= xi_nu_size; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= xi_nu_centered_2dim__; ++sym2__) {
        for (int sym3__ = 1; sym3__ <= xi_nu_centered_1dim__; ++sym3__) {
          param_names__.emplace_back(std::string() + "xi_nu_centered" + '.' +
            std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
            std::to_string(sym1__));
        }
      }
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= xi_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "xi" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= num_steps; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lambda_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_rows; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_mean" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_0_centered_1dim__) + ",\"cols\":" + std::to_string(mu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"nu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nu_0_centered_1dim__) + ",\"cols\":" + std::to_string(nu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"phi_AR\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"theta_MA\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"mu_0_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_0_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_mu_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_nu_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_centered_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu_centered\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_mu_centered_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_mu_centered_2dim__) + ",\"cols\":" + std::to_string(xi_mu_size) + "}},\"block\":\"parameters\"},{\"name\":\"xi_nu_centered\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_nu_centered_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_nu_centered_2dim__) + ",\"cols\":" + std::to_string(xi_nu_size) + "}},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lambda_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rows) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(mu_0_centered_1dim__) + ",\"cols\":" + std::to_string(mu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"nu_0_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nu_0_centered_1dim__) + ",\"cols\":" + std::to_string(nu_0_size) + "},\"block\":\"parameters\"},{\"name\":\"phi_AR\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"theta_MA\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"mu_0_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_0_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_mu_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_nu_sd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi_centered\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_centered_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"parameters\"},{\"name\":\"xi_mu_centered\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_mu_centered_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_mu_centered_2dim__) + ",\"cols\":" + std::to_string(xi_mu_size) + "}},\"block\":\"parameters\"},{\"name\":\"xi_nu_centered\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(xi_nu_centered_1dim__) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_nu_centered_2dim__) + ",\"cols\":" + std::to_string(xi_nu_size) + "}},\"block\":\"parameters\"},{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(xi_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lambda_1dim__) + ",\"cols\":" + std::to_string(num_steps) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_rows) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((mu_0_centered_1dim__ *
      mu_0_size) + (nu_0_centered_1dim__ * nu_0_size)) + p) + q) + 1) + 1) +
      1) + 1) + 1) + 1) + 1) + (xi_centered_1dim__ * num_steps)) +
      ((xi_mu_centered_1dim__ * xi_mu_centered_2dim__) * xi_mu_size)) +
      ((xi_nu_centered_1dim__ * xi_nu_centered_2dim__) * xi_nu_size)) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((xi_1dim__ * num_steps) + (lambda_1dim__ * num_steps)) + n_rows) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((mu_0_centered_1dim__ *
      mu_0_size) + (nu_0_centered_1dim__ * nu_0_size)) + p) + q) + 1) + 1) +
      1) + 1) + 1) + 1) + 1) + (xi_centered_1dim__ * num_steps)) +
      ((xi_mu_centered_1dim__ * xi_mu_centered_2dim__) * xi_mu_size)) +
      ((xi_nu_centered_1dim__ * xi_nu_centered_2dim__) * xi_nu_size)) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((xi_1dim__ * num_steps) + (lambda_1dim__ * num_steps)) + n_rows) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nowcast_continuous_namespace::model_nowcast_continuous;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nowcast_continuous_namespace::profiles__;
}
#endif
#endif
