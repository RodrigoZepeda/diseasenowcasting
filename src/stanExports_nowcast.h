// Generated by rstantools.  Do not edit by hand.

/*
    hola is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    hola is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with hola.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.35.0
#include <stan/model/model_header.hpp>
namespace model_nowcast_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 74> locations_array__ =
  {" (found before start of program)",
  " (in 'nowcast', line 91, column 4 to column 52)",
  " (in 'nowcast', line 92, column 4 to column 36)",
  " (in 'nowcast', line 93, column 4 to column 41)",
  " (in 'nowcast', line 94, column 4 to column 32)",
  " (in 'nowcast', line 99, column 2 to column 25)",
  " (in 'nowcast', line 103, column 2 to column 30)",
  " (in 'nowcast', line 107, column 2 to column 42)",
  " (in 'nowcast', line 112, column 2 to column 18)",
  " (in 'nowcast', line 137, column 2 to column 51)",
  " (in 'nowcast', line 139, column 2 to column 32)",
  " (in 'nowcast', line 100, column 2 to column 65)",
  " (in 'nowcast', line 102, column 4 to column 62)",
  " (in 'nowcast', line 101, column 2 to line 102, column 62)",
  " (in 'nowcast', line 104, column 2 to column 55)",
  " (in 'nowcast', line 109, column 4 to column 33)",
  " (in 'nowcast', line 108, column 2 to line 109, column 33)",
  " (in 'nowcast', line 113, column 2 to column 43)",
  " (in 'nowcast', line 114, column 2 to column 44)",
  " (in 'nowcast', line 115, column 2 to column 82)",
  " (in 'nowcast', line 118, column 4 to column 76)",
  " (in 'nowcast', line 117, column 2 to line 118, column 76)",
  " (in 'nowcast', line 145, column 10 to column 59)",
  " (in 'nowcast', line 144, column 13 to line 146, column 7)",
  " (in 'nowcast', line 143, column 10 to column 100)",
  " (in 'nowcast', line 142, column 31 to line 144, column 7)",
  " (in 'nowcast', line 142, column 6 to line 146, column 7)",
  " (in 'nowcast', line 141, column 23 to line 147, column 3)",
  " (in 'nowcast', line 141, column 2 to line 147, column 3)",
  " (in 'nowcast', line 150, column 4 to column 55)",
  " (in 'nowcast', line 149, column 19 to line 151, column 3)",
  " (in 'nowcast', line 149, column 2 to line 151, column 3)",
  " (in 'nowcast', line 154, column 4 to column 42)",
  " (in 'nowcast', line 153, column 23 to line 155, column 3)",
  " (in 'nowcast', line 153, column 2 to line 155, column 3)",
  " (in 'nowcast', line 129, column 8 to column 85)",
  " (in 'nowcast', line 128, column 6 to line 129, column 85)",
  " (in 'nowcast', line 127, column 11 to line 130, column 5)",
  " (in 'nowcast', line 126, column 8 to column 94)",
  " (in 'nowcast', line 125, column 6 to line 126, column 94)",
  " (in 'nowcast', line 124, column 29 to line 127, column 5)",
  " (in 'nowcast', line 124, column 4 to line 130, column 5)",
  " (in 'nowcast', line 122, column 18 to line 131, column 3)",
  " (in 'nowcast', line 122, column 2 to line 131, column 3)",
  " (in 'nowcast', line 133, column 2 to column 19)",
  " (in 'nowcast', line 64, column 4 to column 26)",
  " (in 'nowcast', line 65, column 4 to column 28)",
  " (in 'nowcast', line 66, column 4 to column 28)",
  " (in 'nowcast', line 67, column 4 to column 32)",
  " (in 'nowcast', line 68, column 4 to column 22)",
  " (in 'nowcast', line 69, column 10 to column 14)",
  " (in 'nowcast', line 69, column 16 to column 34)",
  " (in 'nowcast', line 69, column 4 to column 45)",
  " (in 'nowcast', line 72, column 4 to column 47)",
  " (in 'nowcast', line 73, column 4 to column 37)",
  " (in 'nowcast', line 76, column 4 to column 41)",
  " (in 'nowcast', line 77, column 4 to column 40)",
  " (in 'nowcast', line 78, column 4 to column 26)",
  " (in 'nowcast', line 79, column 4 to column 33)",
  " (in 'nowcast', line 80, column 4 to column 37)",
  " (in 'nowcast', line 81, column 4 to column 36)",
  " (in 'nowcast', line 82, column 4 to column 25)",
  " (in 'nowcast', line 83, column 4 to column 32)",
  " (in 'nowcast', line 88, column 2 to column 33)",
  " (in 'nowcast', line 91, column 20 to column 48)",
  " (in 'nowcast', line 92, column 11 to column 19)",
  " (in 'nowcast', line 93, column 11 to column 25)",
  " (in 'nowcast', line 99, column 9 to column 17)",
  " (in 'nowcast', line 103, column 9 to column 23)",
  " (in 'nowcast', line 107, column 9 to column 17)",
  " (in 'nowcast', line 107, column 19 to column 33)",
  " (in 'nowcast', line 137, column 8 to column 16)",
  " (in 'nowcast', line 137, column 18 to column 32)",
  " (in 'nowcast', line 139, column 8 to column 16)"};
#include <stan_meta_header.hpp>
class model_nowcast final : public model_base_crtp<model_nowcast> {
private:
  int max_time;
  int max_delays;
  int num_strata;
  int num_covariates;
  int nobs;
  std::vector<std::vector<int>> Nmat;
  int is_negative_binomial;
  int prior_only;
  double dispersion_prior_shape;
  double dispersion_prior_rate;
  double alpha_mean_prior;
  double alpha_sd_prior;
  double alphat_shape_prior;
  double alphat_rate_prior;
  double beta_mean_prior;
  double beta_sd_prior;
  int ncovs;
  int r_1dim__;
  int beta_centered_1dim__;
  int beta_1dim__;
  int lambda_2dim__;
  int Nmat_predict_2dim__;
public:
  ~model_nowcast() {}
  model_nowcast(stan::io::var_context& context__, unsigned int
                random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nowcast_namespace::model_nowcast";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 45;
      context__.validate_dims("data initialization", "max_time", "int",
        std::vector<size_t>{});
      max_time = std::numeric_limits<int>::min();
      current_statement__ = 45;
      max_time = context__.vals_i("max_time")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "max_time", max_time, 1);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "max_delays", "int",
        std::vector<size_t>{});
      max_delays = std::numeric_limits<int>::min();
      current_statement__ = 46;
      max_delays = context__.vals_i("max_delays")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "max_delays",
        max_delays, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "num_strata", "int",
        std::vector<size_t>{});
      num_strata = std::numeric_limits<int>::min();
      current_statement__ = 47;
      num_strata = context__.vals_i("num_strata")[(1 - 1)];
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "num_strata",
        num_strata, 1);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "num_covariates", "int",
        std::vector<size_t>{});
      num_covariates = std::numeric_limits<int>::min();
      current_statement__ = 48;
      num_covariates = context__.vals_i("num_covariates")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "num_covariates",
        num_covariates, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "nobs", "int",
        std::vector<size_t>{});
      nobs = std::numeric_limits<int>::min();
      current_statement__ = 49;
      nobs = context__.vals_i("nobs")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "nobs", nobs, 0);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("Nmat", "nobs", nobs);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("Nmat", "3 + num_covariates",
        (3 + num_covariates));
      current_statement__ = 52;
      context__.validate_dims("data initialization", "Nmat", "int",
        std::vector<size_t>{static_cast<size_t>(nobs),
          static_cast<size_t>((3 + num_covariates))});
      Nmat = std::vector<std::vector<int>>(nobs,
               std::vector<int>((3 + num_covariates),
                 std::numeric_limits<int>::min()));
      {
        std::vector<int> Nmat_flat__;
        current_statement__ = 52;
        Nmat_flat__ = context__.vals_i("Nmat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (3 + num_covariates); ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nobs; ++sym2__) {
            stan::model::assign(Nmat, Nmat_flat__[(pos__ - 1)],
              "assigning variable Nmat", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 53;
      context__.validate_dims("data initialization", "is_negative_binomial",
        "int", std::vector<size_t>{});
      is_negative_binomial = std::numeric_limits<int>::min();
      current_statement__ = 53;
      is_negative_binomial = context__.vals_i("is_negative_binomial")[(1 -
        1)];
      current_statement__ = 53;
      stan::math::check_greater_or_equal(function__, "is_negative_binomial",
        is_negative_binomial, 0);
      current_statement__ = 53;
      stan::math::check_less_or_equal(function__, "is_negative_binomial",
        is_negative_binomial, 1);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 54;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "prior_only",
        prior_only, 0);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "prior_only", prior_only, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization",
        "dispersion_prior_shape", "double", std::vector<size_t>{});
      dispersion_prior_shape = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 55;
      dispersion_prior_shape = context__.vals_r("dispersion_prior_shape")[(1
        - 1)];
      current_statement__ = 55;
      stan::math::check_greater_or_equal(function__,
        "dispersion_prior_shape", dispersion_prior_shape, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "dispersion_prior_rate",
        "double", std::vector<size_t>{});
      dispersion_prior_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 56;
      dispersion_prior_rate = context__.vals_r("dispersion_prior_rate")[(1 -
        1)];
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "dispersion_prior_rate",
        dispersion_prior_rate, 0);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "alpha_mean_prior",
        "double", std::vector<size_t>{});
      alpha_mean_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 57;
      alpha_mean_prior = context__.vals_r("alpha_mean_prior")[(1 - 1)];
      current_statement__ = 58;
      context__.validate_dims("data initialization", "alpha_sd_prior",
        "double", std::vector<size_t>{});
      alpha_sd_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 58;
      alpha_sd_prior = context__.vals_r("alpha_sd_prior")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "alpha_sd_prior",
        alpha_sd_prior, 0);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "alphat_shape_prior",
        "double", std::vector<size_t>{});
      alphat_shape_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 59;
      alphat_shape_prior = context__.vals_r("alphat_shape_prior")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "alphat_shape_prior",
        alphat_shape_prior, 0);
      current_statement__ = 60;
      context__.validate_dims("data initialization", "alphat_rate_prior",
        "double", std::vector<size_t>{});
      alphat_rate_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 60;
      alphat_rate_prior = context__.vals_r("alphat_rate_prior")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "alphat_rate_prior",
        alphat_rate_prior, 0);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "beta_mean_prior",
        "double", std::vector<size_t>{});
      beta_mean_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 61;
      beta_mean_prior = context__.vals_r("beta_mean_prior")[(1 - 1)];
      current_statement__ = 62;
      context__.validate_dims("data initialization", "beta_sd_prior",
        "double", std::vector<size_t>{});
      beta_sd_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 62;
      beta_sd_prior = context__.vals_r("beta_sd_prior")[(1 - 1)];
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "beta_sd_prior",
        beta_sd_prior, 0);
      current_statement__ = 63;
      ncovs = std::numeric_limits<int>::min();
      current_statement__ = 63;
      ncovs = (3 + num_covariates);
      current_statement__ = 64;
      r_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      r_1dim__ = (is_negative_binomial ? 1 : 0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("r",
        "is_negative_binomial ? 1 : 0", r_1dim__);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("alpha_centered", "max_time",
        max_time);
      current_statement__ = 66;
      beta_centered_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 66;
      beta_centered_1dim__ = (max_delays + 1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("beta_centered",
        "max_delays + 1", beta_centered_1dim__);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("alpha", "max_time", max_time);
      current_statement__ = 68;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 68;
      beta_1dim__ = (max_delays + 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("beta", "max_delays + 1",
        beta_1dim__);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("lambda", "max_time", max_time);
      current_statement__ = 70;
      lambda_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 70;
      lambda_2dim__ = (max_delays + 1);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("lambda", "max_delays + 1",
        lambda_2dim__);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("Nmat_predict", "max_time",
        max_time);
      current_statement__ = 72;
      Nmat_predict_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 72;
      Nmat_predict_2dim__ = (max_delays + 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("Nmat_predict",
        "max_delays + 1", Nmat_predict_2dim__);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("N_predict", "max_time",
        max_time);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = r_1dim__ + max_time + beta_centered_1dim__ + 1;
  }
  inline std::string model_name() const final {
    return "model_nowcast";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.35.0",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcast_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            r_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_time, DUMMY_VAR__);
      current_statement__ = 2;
      alpha_centered = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(max_time);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      beta_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(beta_centered_1dim__);
      local_scalar_t__ sigma_alpha_t = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha_t = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_time, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(alpha, (alpha_mean_prior + (alpha_sd_prior *
        stan::model::rvalue(alpha_centered, "alpha_centered",
          stan::model::index_uni(1)))), "assigning variable alpha",
        stan::model::index_uni(1));
      current_statement__ = 13;
      for (int t = 2; t <= max_time; ++t) {
        current_statement__ = 12;
        stan::model::assign(alpha,
          (stan::model::rvalue(alpha, "alpha",
             stan::model::index_uni((t - 1))) + (sigma_alpha_t *
          stan::model::rvalue(alpha_centered, "alpha_centered",
            stan::model::index_uni(t)))), "assigning variable alpha",
          stan::model::index_uni(t));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(beta,
        stan::math::add(beta_mean_prior,
          stan::math::multiply(beta_sd_prior, beta_centered)),
        "assigning variable beta");
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(max_time,
          lambda_2dim__, DUMMY_VAR__);
      current_statement__ = 16;
      for (int d = 1; d <= (max_delays + 1); ++d) {
        current_statement__ = 15;
        stan::model::assign(lambda,
          stan::math::add(alpha,
            stan::model::rvalue(beta, "beta", stan::model::index_uni(d))),
          "assigning variable lambda", stan::model::index_omni(),
          stan::model::index_uni(d));
      }
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 8;
      lprior = 0;
      current_statement__ = 17;
      lprior = (lprior + stan::math::std_normal_lpdf<false>(beta_centered));
      current_statement__ = 18;
      lprior = (lprior + stan::math::std_normal_lpdf<false>(alpha_centered));
      current_statement__ = 19;
      lprior = (lprior +
        stan::math::inv_gamma_lpdf<false>(sigma_alpha_t, alphat_shape_prior,
          alphat_rate_prior));
      current_statement__ = 21;
      if (is_negative_binomial) {
        current_statement__ = 20;
        lprior = (lprior +
          stan::math::gamma_lpdf<false>(r, dispersion_prior_shape,
            dispersion_prior_rate));
      }
      {
        current_statement__ = 43;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 41;
          if (is_negative_binomial) {
            current_statement__ = 39;
            for (int k = 1; k <= nobs; ++k) {
              current_statement__ = 38;
              lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<false>(
                               stan::model::rvalue(Nmat, "Nmat",
                                 stan::model::index_uni(k),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(lambda, "lambda",
                                 stan::model::index_uni(
                                   stan::model::rvalue(Nmat, "Nmat",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(2))),
                                 stan::model::index_uni(
                                   (stan::model::rvalue(Nmat, "Nmat",
                                      stan::model::index_uni(k),
                                      stan::model::index_uni(3)) + 1))), r));
            }
          } else {
            current_statement__ = 36;
            for (int k = 1; k <= nobs; ++k) {
              current_statement__ = 35;
              lp_accum__.add(stan::math::poisson_log_lpmf<false>(
                               stan::model::rvalue(Nmat, "Nmat",
                                 stan::model::index_uni(k),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(lambda, "lambda",
                                 stan::model::index_uni(
                                   stan::model::rvalue(Nmat, "Nmat",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(2))),
                                 stan::model::index_uni(
                                   (stan::model::rvalue(Nmat, "Nmat",
                                      stan::model::index_uni(k),
                                      stan::model::index_uni(3)) + 1)))));
            }
          }
        }
        current_statement__ = 44;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nowcast_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            r_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_time, DUMMY_VAR__);
      current_statement__ = 2;
      alpha_centered = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(max_time);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      beta_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(beta_centered_1dim__);
      local_scalar_t__ sigma_alpha_t = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha_t = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_time, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(alpha, (alpha_mean_prior + (alpha_sd_prior *
        stan::model::rvalue(alpha_centered, "alpha_centered",
          stan::model::index_uni(1)))), "assigning variable alpha",
        stan::model::index_uni(1));
      current_statement__ = 13;
      for (int t = 2; t <= max_time; ++t) {
        current_statement__ = 12;
        stan::model::assign(alpha,
          (stan::model::rvalue(alpha, "alpha",
             stan::model::index_uni((t - 1))) + (sigma_alpha_t *
          stan::model::rvalue(alpha_centered, "alpha_centered",
            stan::model::index_uni(t)))), "assigning variable alpha",
          stan::model::index_uni(t));
      }
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(beta,
        stan::math::add(beta_mean_prior,
          stan::math::multiply(beta_sd_prior, beta_centered)),
        "assigning variable beta");
      Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(max_time,
          lambda_2dim__, DUMMY_VAR__);
      current_statement__ = 16;
      for (int d = 1; d <= (max_delays + 1); ++d) {
        current_statement__ = 15;
        stan::model::assign(lambda,
          stan::math::add(alpha,
            stan::model::rvalue(beta, "beta", stan::model::index_uni(d))),
          "assigning variable lambda", stan::model::index_omni(),
          stan::model::index_uni(d));
      }
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 8;
      lprior = 0;
      current_statement__ = 17;
      lprior = (lprior + stan::math::std_normal_lpdf<false>(beta_centered));
      current_statement__ = 18;
      lprior = (lprior + stan::math::std_normal_lpdf<false>(alpha_centered));
      current_statement__ = 19;
      lprior = (lprior +
        stan::math::inv_gamma_lpdf<false>(sigma_alpha_t, alphat_shape_prior,
          alphat_rate_prior));
      current_statement__ = 21;
      if (is_negative_binomial) {
        current_statement__ = 20;
        lprior = (lprior +
          stan::math::gamma_lpdf<false>(r, dispersion_prior_shape,
            dispersion_prior_rate));
      }
      {
        current_statement__ = 43;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 41;
          if (is_negative_binomial) {
            current_statement__ = 39;
            for (int k = 1; k <= nobs; ++k) {
              current_statement__ = 38;
              lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<false>(
                               stan::model::rvalue(Nmat, "Nmat",
                                 stan::model::index_uni(k),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(lambda, "lambda",
                                 stan::model::index_uni(
                                   stan::model::rvalue(Nmat, "Nmat",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(2))),
                                 stan::model::index_uni(
                                   (stan::model::rvalue(Nmat, "Nmat",
                                      stan::model::index_uni(k),
                                      stan::model::index_uni(3)) + 1))), r));
            }
          } else {
            current_statement__ = 36;
            for (int k = 1; k <= nobs; ++k) {
              current_statement__ = 35;
              lp_accum__.add(stan::math::poisson_log_lpmf<false>(
                               stan::model::rvalue(Nmat, "Nmat",
                                 stan::model::index_uni(k),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(lambda, "lambda",
                                 stan::model::index_uni(
                                   stan::model::rvalue(Nmat, "Nmat",
                                     stan::model::index_uni(k),
                                     stan::model::index_uni(2))),
                                 stan::model::index_uni(
                                   (stan::model::rvalue(Nmat, "Nmat",
                                      stan::model::index_uni(k),
                                      stan::model::index_uni(3)) + 1)))));
            }
          }
        }
        current_statement__ = 44;
        lp_accum__.add(lprior);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_nowcast_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> r =
        Eigen::Matrix<double,-1,1>::Constant(r_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      r = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
            r_1dim__);
      Eigen::Matrix<double,-1,1> alpha_centered =
        Eigen::Matrix<double,-1,1>::Constant(max_time,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha_centered = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(max_time);
      Eigen::Matrix<double,-1,1> beta_centered =
        Eigen::Matrix<double,-1,1>::Constant(beta_centered_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta_centered = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(beta_centered_1dim__);
      double sigma_alpha_t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_alpha_t = in__.template read_constrain_lb<local_scalar_t__,
                        jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(max_time,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lambda =
        Eigen::Matrix<double,-1,-1>::Constant(max_time, lambda_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(r);
      out__.write(alpha_centered);
      out__.write(beta_centered);
      out__.write(sigma_alpha_t);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(alpha, (alpha_mean_prior + (alpha_sd_prior *
        stan::model::rvalue(alpha_centered, "alpha_centered",
          stan::model::index_uni(1)))), "assigning variable alpha",
        stan::model::index_uni(1));
      current_statement__ = 13;
      for (int t = 2; t <= max_time; ++t) {
        current_statement__ = 12;
        stan::model::assign(alpha,
          (stan::model::rvalue(alpha, "alpha",
             stan::model::index_uni((t - 1))) + (sigma_alpha_t *
          stan::model::rvalue(alpha_centered, "alpha_centered",
            stan::model::index_uni(t)))), "assigning variable alpha",
          stan::model::index_uni(t));
      }
      current_statement__ = 14;
      stan::model::assign(beta,
        stan::math::add(beta_mean_prior,
          stan::math::multiply(beta_sd_prior, beta_centered)),
        "assigning variable beta");
      current_statement__ = 16;
      for (int d = 1; d <= (max_delays + 1); ++d) {
        current_statement__ = 15;
        stan::model::assign(lambda,
          stan::math::add(alpha,
            stan::model::rvalue(beta, "beta", stan::model::index_uni(d))),
          "assigning variable lambda", stan::model::index_omni(),
          stan::model::index_uni(d));
      }
      current_statement__ = 8;
      lprior = 0;
      current_statement__ = 17;
      lprior = (lprior + stan::math::std_normal_lpdf<false>(beta_centered));
      current_statement__ = 18;
      lprior = (lprior + stan::math::std_normal_lpdf<false>(alpha_centered));
      current_statement__ = 19;
      lprior = (lprior +
        stan::math::inv_gamma_lpdf<false>(sigma_alpha_t, alphat_shape_prior,
          alphat_rate_prior));
      current_statement__ = 21;
      if (is_negative_binomial) {
        current_statement__ = 20;
        lprior = (lprior +
          stan::math::gamma_lpdf<false>(r, dispersion_prior_shape,
            dispersion_prior_rate));
      }
      if (emit_transformed_parameters__) {
        out__.write(alpha);
        out__.write(beta);
        out__.write(lambda);
        out__.write(lprior);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<std::vector<int>> Nmat_predict =
        std::vector<std::vector<int>>(max_time,
          std::vector<int>(Nmat_predict_2dim__,
            std::numeric_limits<int>::min()));
      std::vector<int> N_predict =
        std::vector<int>(max_time, std::numeric_limits<int>::min());
      current_statement__ = 28;
      for (int t = 1; t <= max_time; ++t) {
        current_statement__ = 26;
        if (is_negative_binomial) {
          current_statement__ = 24;
          stan::model::assign(Nmat_predict,
            stan::math::neg_binomial_2_log_rng(
              stan::model::rvalue(lambda, "lambda",
                stan::model::index_uni(t), stan::model::index_omni()),
              stan::math::rep_vector(
                stan::model::rvalue(r, "r", stan::model::index_uni(1)),
                (max_delays + 1)), base_rng__),
            "assigning variable Nmat_predict", stan::model::index_uni(t),
            stan::model::index_omni());
        } else {
          current_statement__ = 22;
          stan::model::assign(Nmat_predict,
            stan::math::poisson_log_rng(
              stan::model::rvalue(lambda, "lambda",
                stan::model::index_uni(t), stan::model::index_omni()),
              base_rng__), "assigning variable Nmat_predict",
            stan::model::index_uni(t), stan::model::index_omni());
        }
      }
      current_statement__ = 31;
      for (int k = 1; k <= nobs; ++k) {
        current_statement__ = 29;
        stan::model::assign(Nmat_predict,
          stan::model::rvalue(Nmat, "Nmat", stan::model::index_uni(k),
            stan::model::index_uni(1)), "assigning variable Nmat_predict",
          stan::model::index_uni(
            stan::model::rvalue(Nmat, "Nmat", stan::model::index_uni(k),
              stan::model::index_uni(2))),
          stan::model::index_uni(
            (stan::model::rvalue(Nmat, "Nmat", stan::model::index_uni(k),
               stan::model::index_uni(3)) + 1)));
      }
      current_statement__ = 34;
      for (int t = 1; t <= max_time; ++t) {
        current_statement__ = 32;
        stan::model::assign(N_predict,
          stan::math::sum(
            stan::model::rvalue(Nmat_predict, "Nmat_predict",
              stan::model::index_uni(t), stan::model::index_omni())),
          "assigning variable N_predict", stan::model::index_uni(t));
      }
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Nmat_predict_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= max_time; ++sym2__) {
          out__.write(Nmat_predict[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(N_predict);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(r,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(r_1dim__),
        "assigning variable r");
      out__.write_free_lb(0, r);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_time, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(max_time),
        "assigning variable alpha_centered");
      out__.write(alpha_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_centered_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(beta_centered,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(beta_centered_1dim__),
        "assigning variable beta_centered");
      out__.write(beta_centered);
      local_scalar_t__ sigma_alpha_t = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha_t = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_alpha_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "r", "double",
        std::vector<size_t>{static_cast<size_t>(r_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha_centered",
        "double", std::vector<size_t>{static_cast<size_t>(max_time)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_centered",
        "double",
        std::vector<size_t>{static_cast<size_t>(beta_centered_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_alpha_t",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(r_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 1;
        r_flat__ = context__.vals_r("r");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
          stan::model::assign(r, r_flat__[(pos__ - 1)],
            "assigning variable r", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, r);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(max_time, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_centered_flat__;
        current_statement__ = 2;
        alpha_centered_flat__ = context__.vals_r("alpha_centered");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
          stan::model::assign(alpha_centered, alpha_centered_flat__[(pos__ -
            1)], "assigning variable alpha_centered",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_centered);
      Eigen::Matrix<local_scalar_t__,-1,1> beta_centered =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_centered_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_centered_flat__;
        current_statement__ = 3;
        beta_centered_flat__ = context__.vals_r("beta_centered");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= beta_centered_1dim__; ++sym1__) {
          stan::model::assign(beta_centered, beta_centered_flat__[(pos__ -
            1)], "assigning variable beta_centered",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta_centered);
      local_scalar_t__ sigma_alpha_t = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_alpha_t = context__.vals_r("sigma_alpha_t")[(1 - 1)];
      out__.write_free_lb(0, sigma_alpha_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"r", "alpha_centered",
                "beta_centered", "sigma_alpha_t"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"alpha", "beta", "lambda", "lprior"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"Nmat_predict", "N_predict"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    r_1dim__)},
                std::vector<size_t>{static_cast<size_t>(max_time)},
                std::vector<size_t>{static_cast<size_t>(beta_centered_1dim__)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(max_time)},
             std::vector<size_t>{static_cast<size_t>(beta_1dim__)},
             std::vector<size_t>{static_cast<size_t>(max_time),
               static_cast<size_t>(lambda_2dim__)}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(max_time),
               static_cast<size_t>(Nmat_predict_2dim__)},
             std::vector<size_t>{static_cast<size_t>(max_time)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_centered_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_centered" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_alpha_t");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= max_time; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Nmat_predict_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= max_time; ++sym2__) {
          param_names__.emplace_back(std::string() + "Nmat_predict" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
        param_names__.emplace_back(std::string() + "N_predict" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= r_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "r" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_centered" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= beta_centered_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta_centered" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma_alpha_t");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= max_time; ++sym2__) {
          param_names__.emplace_back(std::string() + "lambda" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Nmat_predict_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= max_time; ++sym2__) {
          param_names__.emplace_back(std::string() + "Nmat_predict" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= max_time; ++sym1__) {
        param_names__.emplace_back(std::string() + "N_predict" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alpha_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_time) + "},\"block\":\"parameters\"},{\"name\":\"beta_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_centered_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_time) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(max_time) + ",\"cols\":" + std::to_string(lambda_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Nmat_predict\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(max_time) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Nmat_predict_2dim__) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"},{\"name\":\"N_predict\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(max_time) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(r_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"alpha_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_time) + "},\"block\":\"parameters\"},{\"name\":\"beta_centered\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_centered_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha_t\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_time) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(max_time) + ",\"cols\":" + std::to_string(lambda_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Nmat_predict\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(max_time) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Nmat_predict_2dim__) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"},{\"name\":\"N_predict\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(max_time) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((r_1dim__ + max_time) +
      beta_centered_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((max_time
      + beta_1dim__) + (max_time * lambda_2dim__)) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (((max_time
      * Nmat_predict_2dim__) + max_time));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((r_1dim__ + max_time) +
      beta_centered_1dim__) + 1);
    const size_t num_transformed = emit_transformed_parameters * ((((max_time
      + beta_1dim__) + (max_time * lambda_2dim__)) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (((max_time
      * Nmat_predict_2dim__) + max_time));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nowcast_namespace::model_nowcast;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nowcast_namespace::profiles__;
}
#endif
#endif
