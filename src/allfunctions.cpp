// Generated by rstantools.  Do not edit by hand.

// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::plugins(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/fun/Eigen.hpp>
#include <stan/math/prim/meta.hpp>
#include <boost/integer/integer_log2.hpp>
#include <RcppEigen.h>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model27bec5bb8b1a0_User_defined_functions_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 156> locations_array__ =
  {" (found before start of program)",
  " (in 'User-defined functions', line 31, column 9 to column 26)",
  " (in 'User-defined functions', line 31, column 28 to column 45)",
  " (in 'User-defined functions', line 31, column 2 to column 103)",
  " (in 'User-defined functions', line 33, column 2 to column 29)",
  " (in 'User-defined functions', line 35, column 2 to column 53)",
  " (in 'User-defined functions', line 36, column 2 to column 11)",
  " (in 'User-defined functions', line 27, column 48 to line 37, column 1)",
  " (in 'User-defined functions', line 42, column 9 to column 18)",
  " (in 'User-defined functions', line 42, column 20 to column 29)",
  " (in 'User-defined functions', line 42, column 2 to column 71)",
  " (in 'User-defined functions', line 45, column 4 to column 76)",
  " (in 'User-defined functions', line 44, column 16 to line 46, column 3)",
  " (in 'User-defined functions', line 44, column 2 to line 46, column 3)",
  " (in 'User-defined functions', line 47, column 2 to column 11)",
  " (in 'User-defined functions', line 38, column 40 to line 48, column 1)",
  " (in 'User-defined functions', line 53, column 9 to column 26)",
  " (in 'User-defined functions', line 53, column 2 to column 30)",
  " (in 'User-defined functions', line 56, column 4 to column 59)",
  " (in 'User-defined functions', line 55, column 16 to line 57, column 3)",
  " (in 'User-defined functions', line 55, column 2 to line 57, column 3)",
  " (in 'User-defined functions', line 58, column 2 to column 11)",
  " (in 'User-defined functions', line 49, column 31 to line 59, column 1)",
  " (in 'User-defined functions', line 67, column 2 to column 26)",
  " (in 'User-defined functions', line 68, column 9 to column 12)",
  " (in 'User-defined functions', line 68, column 2 to column 16)",
  " (in 'User-defined functions', line 71, column 4 to column 51)",
  " (in 'User-defined functions', line 70, column 16 to line 72, column 3)",
  " (in 'User-defined functions', line 70, column 2 to line 72, column 3)",
  " (in 'User-defined functions', line 73, column 2 to column 11)",
  " (in 'User-defined functions', line 60, column 41 to line 74, column 1)",
  " (in 'User-defined functions', line 99, column 9 to column 15)",
  " (in 'User-defined functions', line 99, column 17 to column 23)",
  " (in 'User-defined functions', line 99, column 2 to column 59)",
  " (in 'User-defined functions', line 102, column 4 to column 45)",
  " (in 'User-defined functions', line 101, column 22 to line 103, column 3)",
  " (in 'User-defined functions', line 101, column 2 to line 103, column 3)",
  " (in 'User-defined functions', line 106, column 4 to column 20)",
  " (in 'User-defined functions', line 105, column 22 to line 107, column 3)",
  " (in 'User-defined functions', line 105, column 2 to line 107, column 3)",
  " (in 'User-defined functions', line 108, column 2 to column 11)",
  " (in 'User-defined functions', line 91, column 47 to line 109, column 1)",
  " (in 'User-defined functions', line 115, column 9 to column 15)",
  " (in 'User-defined functions', line 115, column 2 to column 45)",
  " (in 'User-defined functions', line 116, column 2 to column 13)",
  " (in 'User-defined functions', line 117, column 2 to column 11)",
  " (in 'User-defined functions', line 110, column 46 to line 118, column 1)",
  " (in 'User-defined functions', line 124, column 9 to column 15)",
  " (in 'User-defined functions', line 124, column 16 to column 22)",
  " (in 'User-defined functions', line 124, column 2 to column 60)",
  " (in 'User-defined functions', line 125, column 2 to column 29)",
  " (in 'User-defined functions', line 126, column 2 to column 11)",
  " (in 'User-defined functions', line 119, column 63 to line 127, column 1)",
  " (in 'User-defined functions', line 129, column 2 to column 22)",
  " (in 'User-defined functions', line 128, column 67 to line 130, column 1)",
  " (in 'User-defined functions', line 135, column 9 to column 15)",
  " (in 'User-defined functions', line 135, column 17 to column 23)",
  " (in 'User-defined functions', line 135, column 2 to column 65)",
  " (in 'User-defined functions', line 136, column 2 to column 41)",
  " (in 'User-defined functions', line 134, column 56 to line 137, column 1)",
  " (in 'User-defined functions', line 139, column 9 to column 15)",
  " (in 'User-defined functions', line 139, column 17 to column 23)",
  " (in 'User-defined functions', line 139, column 2 to column 78)",
  " (in 'User-defined functions', line 140, column 2 to column 41)",
  " (in 'User-defined functions', line 138, column 73 to line 141, column 1)",
  " (in 'User-defined functions', line 143, column 9 to column 15)",
  " (in 'User-defined functions', line 143, column 2 to column 57)",
  " (in 'User-defined functions', line 144, column 2 to column 32)",
  " (in 'User-defined functions', line 142, column 56 to line 145, column 1)",
  " (in 'User-defined functions', line 147, column 2 to column 22)",
  " (in 'User-defined functions', line 146, column 53 to line 148, column 1)",
  " (in 'User-defined functions', line 152, column 2 to column 27)",
  " (in 'User-defined functions', line 151, column 60 to line 153, column 1)",
  " (in 'User-defined functions', line 171, column 2 to column 42)",
  " (in 'User-defined functions', line 172, column 9 to column 10)",
  " (in 'User-defined functions', line 172, column 12 to column 13)",
  " (in 'User-defined functions', line 172, column 2 to column 41)",
  " (in 'User-defined functions', line 176, column 6 to column 20)",
  " (in 'User-defined functions', line 175, column 33 to line 177, column 5)",
  " (in 'User-defined functions', line 175, column 4 to line 177, column 5)",
  " (in 'User-defined functions', line 174, column 40 to line 178, column 3)",
  " (in 'User-defined functions', line 174, column 2 to line 178, column 3)",
  " (in 'User-defined functions', line 180, column 2 to column 15)",
  " (in 'User-defined functions', line 183, column 4 to column 20)",
  " (in 'User-defined functions', line 182, column 21 to line 184, column 3)",
  " (in 'User-defined functions', line 182, column 2 to line 184, column 3)",
  " (in 'User-defined functions', line 186, column 2 to column 15)",
  " (in 'User-defined functions', line 187, column 2 to column 11)",
  " (in 'User-defined functions', line 169, column 85 to line 188, column 1)",
  " (in 'User-defined functions', line 191, column 2 to column 42)",
  " (in 'User-defined functions', line 193, column 9 to column 10)",
  " (in 'User-defined functions', line 193, column 2 to column 35)",
  " (in 'User-defined functions', line 194, column 2 to column 13)",
  " (in 'User-defined functions', line 195, column 2 to column 11)",
  " (in 'User-defined functions', line 189, column 84 to line 196, column 1)",
  " (in 'User-defined functions', line 203, column 2 to column 42)",
  " (in 'User-defined functions', line 204, column 9 to column 10)",
  " (in 'User-defined functions', line 204, column 11 to column 12)",
  " (in 'User-defined functions', line 204, column 2 to column 40)",
  " (in 'User-defined functions', line 205, column 2 to column 79)",
  " (in 'User-defined functions', line 206, column 2 to column 26)",
  " (in 'User-defined functions', line 207, column 2 to column 11)",
  " (in 'User-defined functions', line 197, column 95 to line 208, column 1)",
  " (in 'User-defined functions', line 211, column 2 to column 58)",
  " (in 'User-defined functions', line 213, column 9 to column 10)",
  " (in 'User-defined functions', line 213, column 2 to column 18)",
  " (in 'User-defined functions', line 214, column 2 to column 69)",
  " (in 'User-defined functions', line 216, column 2 to column 24)",
  " (in 'User-defined functions', line 217, column 2 to column 15)",
  " (in 'User-defined functions', line 209, column 118 to line 218, column 1)",
  " (in 'User-defined functions', line 223, column 2 to column 42)",
  " (in 'User-defined functions', line 224, column 9 to column 10)",
  " (in 'User-defined functions', line 224, column 12 to column 13)",
  " (in 'User-defined functions', line 224, column 2 to column 89)",
  " (in 'User-defined functions', line 225, column 2 to column 41)",
  " (in 'User-defined functions', line 222, column 94 to line 226, column 1)",
  " (in 'User-defined functions', line 228, column 2 to column 42)",
  " (in 'User-defined functions', line 229, column 9 to column 10)",
  " (in 'User-defined functions', line 229, column 12 to column 13)",
  " (in 'User-defined functions', line 229, column 2 to column 95)",
  " (in 'User-defined functions', line 230, column 2 to column 41)",
  " (in 'User-defined functions', line 227, column 105 to line 231, column 1)",
  " (in 'User-defined functions', line 233, column 2 to column 42)",
  " (in 'User-defined functions', line 234, column 9 to column 10)",
  " (in 'User-defined functions', line 234, column 2 to column 86)",
  " (in 'User-defined functions', line 235, column 2 to column 32)",
  " (in 'User-defined functions', line 232, column 94 to line 236, column 1)",
  " (in 'User-defined functions', line 238, column 2 to column 22)",
  " (in 'User-defined functions', line 237, column 65 to line 239, column 1)",
  " (in 'User-defined functions', line 243, column 2 to column 50)",
  " (in 'User-defined functions', line 242, column 98 to line 244, column 1)",
  " (in 'User-defined functions', line 262, column 10 to column 19)",
  " (in 'User-defined functions', line 262, column 28 to column 33)",
  " (in 'User-defined functions', line 262, column 4 to column 37)",
  " (in 'User-defined functions', line 264, column 11 to column 22)",
  " (in 'User-defined functions', line 264, column 4 to column 52)",
  " (in 'User-defined functions', line 267, column 6 to column 79)",
  " (in 'User-defined functions', line 266, column 4 to line 267, column 79)",
  " (in 'User-defined functions', line 268, column 4 to column 13)",
  " (in 'User-defined functions', line 260, column 63 to line 269, column 1)",
  " (in 'User-defined functions', line 272, column 8 to column 17)",
  " (in 'User-defined functions', line 272, column 26 to column 44)",
  " (in 'User-defined functions', line 272, column 2 to column 49)",
  " (in 'User-defined functions', line 273, column 2 to column 15)",
  " (in 'User-defined functions', line 276, column 4 to column 41)",
  " (in 'User-defined functions', line 275, column 2 to line 276, column 41)",
  " (in 'User-defined functions', line 277, column 2 to column 12)",
  " (in 'User-defined functions', line 270, column 113 to line 278, column 1)",
  " (in 'User-defined functions', line 281, column 8 to column 17)",
  " (in 'User-defined functions', line 281, column 26 to column 44)",
  " (in 'User-defined functions', line 281, column 2 to column 49)",
  " (in 'User-defined functions', line 282, column 2 to column 15)",
  " (in 'User-defined functions', line 284, column 4 to column 41)",
  " (in 'User-defined functions', line 283, column 2 to line 284, column 41)",
  " (in 'User-defined functions', line 285, column 2 to column 12)",
  " (in 'User-defined functions', line 279, column 119 to line 286, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_A(const int& degree, std::ostream* pstream__);
Eigen::Matrix<double,-1,1>
create_trend_vector_block_L(const int& degree, std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_R(const int& degree, const int& is_constant,
                            std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_initial_trend_vector_block_alpha(const T0__& alpha_params_arg__,
                                        std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_trend_matrix_A(const int& degree, const int& num_delays, std::ostream*
                      pstream__);
Eigen::Matrix<double,-1,-1>
create_trend_matrix_R(const int& degree, const int& is_constant, const int&
                      num_delays, std::ostream* pstream__);
Eigen::Matrix<double,-1,1>
create_trend_vector_L(const int& degree, const int& num_delays, std::ostream*
                      pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_trend_vector_alpha(const T0__& alpha_params_arg__, std::ostream*
                          pstream__);
int
get_num_elements_alpha_trend(const int& degree, const int& num_delays,
                             std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_block_A(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__);
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_block_L(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__);
template <typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_block_R(const int& num_seasons, const int&
                                        season_duration, const T2__& time,
                                        std::ostream* pstream__);
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__>,-1,1>
create_initial_seasonal_discrete_vector_block_alpha(const T0__&
                                                    season_params_arg__,
                                                    const int&
                                                    season_duration,
                                                    const T2__& error_term,
                                                    std::ostream* pstream__);
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_A(const int& num_seasons, const int&
                                  season_duration, const int& num_delays,
                                  std::ostream* pstream__);
template <typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_R(const int& num_seasons, const int&
                                  season_duration, const T2__& time,
                                  const int& num_delays, std::ostream*
                                  pstream__);
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_L(const int& num_seasons, const int&
                                  season_duration, const int& num_delays,
                                  std::ostream* pstream__);
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_seasonal_discrete_vector_alpha(const T0__& alpha_params_arg__,
                                      std::ostream* pstream__);
int
get_num_elements_alpha_seasonal_discrete(const int& num_seasons, const int&
                                         season_duration, const int&
                                         num_delays, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>>* = nullptr>
std::vector<
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                  stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                  stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                  stan::promote_args_t<T7__, T8__, T9__, T10__>>,-1,1>>
state_space_process(const int& num_steps, const int& lsize, const T2__&
                    L_mu_arg__, const T3__& L_nu_arg__, const T4__&
                    B_cnt_arg__, const T5__& X_cnt_arg__, const T6__&
                    B_t_arg__, const std::vector<Eigen::Matrix<T7__,-1,-1>>&
                    X_t, const std::vector<Eigen::Matrix<T8__,-1,1>>& mu,
                    const std::vector<Eigen::Matrix<T9__,-1,1>>& nu,
                    const std::vector<Eigen::Matrix<T10__,-1,1>>& epsilon,
                    std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
std::vector<
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                  stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__>,-1,1>>
time_dependent_process(const int& num_steps, const T1__& A_mu_arg__,
                       const T2__& R_mu_arg__, const T3__& mu_0_arg__,
                       const std::vector<Eigen::Matrix<T4__,-1,1>>& xi_mu,
                       std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
std::vector<
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                  stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__>,-1,1>>
time_delay_dependent_process(const int& num_steps, const T1__& A_nu_arg__,
                             const T2__& R_nu_arg__, const T3__& nu_0_arg__,
                             const std::vector<Eigen::Matrix<T4__,-1,1>>&
                             xi_nu, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,-1>
create_block_diagonal(const T0__& A_arg__, const T1__& B_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  const auto& B = stan::math::to_ref(B_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 1;
    stan::math::validate_non_negative_index("C", "rows(A) + rows(B)",
      (stan::math::rows(A) + stan::math::rows(B)));
    current_statement__ = 2;
    stan::math::validate_non_negative_index("C", "cols(A) + cols(B)",
      (stan::math::cols(A) + stan::math::cols(B)));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) +
        stan::math::rows(B)), (stan::math::cols(A) + stan::math::cols(B)),
        DUMMY_VAR__);
    current_statement__ = 3;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) + stan::math::rows(B)),
        (stan::math::cols(A) + stan::math::cols(B))), "assigning variable C");
    current_statement__ = 4;
    stan::model::assign(C, A, "assigning variable C",
      stan::model::index_min_max(1, stan::math::rows(A)),
      stan::model::index_min_max(1, stan::math::cols(A)));
    current_statement__ = 5;
    stan::model::assign(C, B, "assigning variable C",
      stan::model::index_min_max((stan::math::rows(A) + 1),
        stan::math::rows(C)),
      stan::model::index_min_max((stan::math::cols(A) + 1),
        stan::math::cols(C)));
    current_statement__ = 6;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,-1>
rep_diagonal_mat(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 8;
    stan::math::validate_non_negative_index("C", "rows(A) * k",
      (stan::math::rows(A) * k));
    current_statement__ = 9;
    stan::math::validate_non_negative_index("C", "cols(A) * k",
      (stan::math::cols(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,-1> C =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant((stan::math::rows(A) *
        k), (stan::math::cols(A) * k), DUMMY_VAR__);
    current_statement__ = 10;
    stan::model::assign(C,
      stan::math::rep_matrix(0, (stan::math::rows(A) * k),
        (stan::math::cols(A) * k)), "assigning variable C");
    current_statement__ = 13;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 11;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::rows(A)) + 1), (l
          * stan::math::rows(A))),
        stan::model::index_min_max((((l - 1) * stan::math::cols(A)) + 1), (l
          * stan::math::cols(A))));
    }
    current_statement__ = 14;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 16;
    stan::math::validate_non_negative_index("C", "num_elements(A) * k",
      (stan::math::num_elements(A) * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::num_elements(
                                                        A) * k), DUMMY_VAR__);
    current_statement__ = 20;
    for (int l = 1; l <= k; ++l) {
      current_statement__ = 18;
      stan::model::assign(C, A, "assigning variable C",
        stan::model::index_min_max((((l - 1) * stan::math::num_elements(A)) +
          1), (l * stan::math::num_elements(A))));
    }
    current_statement__ = 21;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
rep_vec_piecewise(const T0__& A_arg__, const int& k, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& A = stan::math::to_ref(A_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int n = std::numeric_limits<int>::min();
    current_statement__ = 23;
    n = stan::math::num_elements(A);
    current_statement__ = 24;
    stan::math::validate_non_negative_index("C", "n * k", (n * k));
    Eigen::Matrix<local_scalar_t__,-1,1> C =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((n * k), DUMMY_VAR__);
    current_statement__ = 28;
    for (int j = 1; j <= n; ++j) {
      current_statement__ = 26;
      stan::model::assign(C,
        stan::math::rep_vector(
          stan::model::rvalue(A, "A", stan::model::index_uni(j)), k),
        "assigning variable C",
        stan::model::index_min_max((((j - 1) * k) + 1), (k * j)));
    }
    current_statement__ = 29;
    return C;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_A(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 31;
    stan::math::validate_non_negative_index("A", "degree", degree);
    current_statement__ = 32;
    stan::math::validate_non_negative_index("A", "degree", degree);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(degree, degree,
        DUMMY_VAR__);
    current_statement__ = 33;
    stan::model::assign(A, stan::math::rep_matrix(0, degree, degree),
      "assigning variable A");
    current_statement__ = 36;
    for (int j = 1; j <= degree; ++j) {
      current_statement__ = 34;
      stan::model::assign(A, (stan::math::pow(-1, (j + 1)) *
        stan::math::choose(degree, j)), "assigning variable A",
        stan::model::index_uni(1), stan::model::index_uni(j));
    }
    current_statement__ = 39;
    for (int i = 2; i <= degree; ++i) {
      current_statement__ = 37;
      stan::model::assign(A, 1.0, "assigning variable A",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
    }
    current_statement__ = 40;
    return A;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
create_trend_vector_block_L(const int& degree, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 42;
    stan::math::validate_non_negative_index("L", "degree", degree);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(degree, DUMMY_VAR__);
    current_statement__ = 43;
    stan::model::assign(L, stan::math::rep_vector(0.0, degree),
      "assigning variable L");
    current_statement__ = 44;
    stan::model::assign(L, 1.0, "assigning variable L",
      stan::model::index_uni(1));
    current_statement__ = 45;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_trend_matrix_block_R(const int& degree, const int& is_constant,
                            std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 47;
    stan::math::validate_non_negative_index("R", "degree", degree);
    current_statement__ = 48;
    stan::math::validate_non_negative_index("R", "degree", degree);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(degree, degree,
        DUMMY_VAR__);
    current_statement__ = 49;
    stan::model::assign(R, stan::math::rep_matrix(0.0, degree, degree),
      "assigning variable R");
    current_statement__ = 50;
    stan::model::assign(R, (1.0 - is_constant), "assigning variable R",
      stan::model::index_uni(1), stan::model::index_uni(1));
    current_statement__ = 51;
    return R;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_initial_trend_vector_block_alpha(const T0__& alpha_params_arg__,
                                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& alpha_params = stan::math::to_ref(alpha_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 53;
    return alpha_params;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_trend_matrix_A(const int& degree, const int& num_delays, std::ostream*
                      pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 55;
    stan::math::validate_non_negative_index("A", "degree", degree);
    current_statement__ = 56;
    stan::math::validate_non_negative_index("A", "degree", degree);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(degree, degree,
        DUMMY_VAR__);
    current_statement__ = 57;
    stan::model::assign(A, create_trend_matrix_block_A(degree, pstream__),
      "assigning variable A");
    current_statement__ = 58;
    return rep_diagonal_mat(A, num_delays, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_trend_matrix_R(const int& degree, const int& is_constant, const int&
                      num_delays, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 60;
    stan::math::validate_non_negative_index("R", "degree", degree);
    current_statement__ = 61;
    stan::math::validate_non_negative_index("R", "degree", degree);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(degree, degree,
        DUMMY_VAR__);
    current_statement__ = 62;
    stan::model::assign(R,
      create_trend_matrix_block_R(degree, is_constant, pstream__),
      "assigning variable R");
    current_statement__ = 63;
    return rep_diagonal_mat(R, num_delays, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
create_trend_vector_L(const int& degree, const int& num_delays, std::ostream*
                      pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 65;
    stan::math::validate_non_negative_index("L", "degree", degree);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(degree, DUMMY_VAR__);
    current_statement__ = 66;
    stan::model::assign(L, create_trend_vector_block_L(degree, pstream__),
      "assigning variable L");
    current_statement__ = 67;
    return rep_vec(L, num_delays, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_trend_vector_alpha(const T0__& alpha_params_arg__, std::ostream*
                          pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& alpha_params = stan::math::to_ref(alpha_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 69;
    return alpha_params;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
get_num_elements_alpha_trend(const int& degree, const int& num_delays,
                             std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 71;
    return (degree * num_delays);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_block_A(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 73;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 74;
    stan::math::validate_non_negative_index("A", "k", k);
    current_statement__ = 75;
    stan::math::validate_non_negative_index("A", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 76;
    stan::model::assign(A, stan::math::rep_matrix(0.0, k, k),
      "assigning variable A");
    current_statement__ = 81;
    for (int j = 1; j <= ((k - season_duration) - 1); ++j) {
      current_statement__ = 79;
      if (stan::math::logical_eq(stan::math::modulus(j, season_duration), 0)) {
        current_statement__ = 77;
        stan::model::assign(A, -1.0, "assigning variable A",
          stan::model::index_uni(1), stan::model::index_uni(j));
      }
    }
    current_statement__ = 82;
    stan::model::assign(A, 1.0, "assigning variable A",
      stan::model::index_uni(1), stan::model::index_uni(k));
    current_statement__ = 85;
    for (int i = 2; i <= (k - 1); ++i) {
      current_statement__ = 83;
      stan::model::assign(A, 1.0, "assigning variable A",
        stan::model::index_uni(i), stan::model::index_uni((i - 1)));
    }
    current_statement__ = 86;
    stan::model::assign(A, 1.0, "assigning variable A",
      stan::model::index_uni(k), stan::model::index_uni(k));
    current_statement__ = 87;
    return A;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_block_L(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 89;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 90;
    stan::math::validate_non_negative_index("L", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 91;
    stan::model::assign(L, stan::math::rep_vector(0.0, k),
      "assigning variable L");
    current_statement__ = 92;
    stan::model::assign(L, 1.0, "assigning variable L",
      stan::model::index_uni(1));
    current_statement__ = 93;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, stan::require_all_t<stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_block_R(const int& num_seasons, const int&
                                        season_duration, const T2__& time,
                                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 95;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 96;
    stan::math::validate_non_negative_index("R", "k", k);
    current_statement__ = 97;
    stan::math::validate_non_negative_index("R", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 98;
    stan::model::assign(R, stan::math::rep_matrix(0.0, k, k),
      "assigning variable R");
    local_scalar_t__ reminder = DUMMY_VAR__;
    current_statement__ = 99;
    reminder = (stan::math::ceil((time / season_duration)) -
      stan::math::floor((time / season_duration)));
    current_statement__ = 100;
    stan::model::assign(R, (1.0 - reminder), "assigning variable R",
      stan::model::index_uni(k), stan::model::index_uni(k));
    current_statement__ = 101;
    return R;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T2__>,-1,1>
create_initial_seasonal_discrete_vector_block_alpha(const T0__&
                                                    season_params_arg__,
                                                    const int&
                                                    season_duration,
                                                    const T2__& error_term,
                                                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T2__>;
  int current_statement__ = 0;
  const auto& season_params = stan::math::to_ref(season_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 103;
    k = ((stan::math::num_elements(season_params) * season_duration) + 1);
    current_statement__ = 104;
    stan::math::validate_non_negative_index("alpha", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> alpha =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 106;
    stan::model::assign(alpha,
      rep_vec_piecewise(season_params, season_duration, pstream__),
      "assigning variable alpha", stan::model::index_min_max(1, (k - 1)));
    current_statement__ = 107;
    stan::model::assign(alpha, error_term, "assigning variable alpha",
      stan::model::index_uni(k));
    current_statement__ = 108;
    return alpha;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,-1>
create_seasonal_discrete_matrix_A(const int& num_seasons, const int&
                                  season_duration, const int& num_delays,
                                  std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 110;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 111;
    stan::math::validate_non_negative_index("A", "k", k);
    current_statement__ = 112;
    stan::math::validate_non_negative_index("A", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> A =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 113;
    stan::model::assign(A,
      create_seasonal_discrete_matrix_block_A(num_seasons, season_duration,
        pstream__), "assigning variable A");
    current_statement__ = 114;
    return rep_diagonal_mat(A, num_delays, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, stan::require_all_t<stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<T2__>,-1,-1>
create_seasonal_discrete_matrix_R(const int& num_seasons, const int&
                                  season_duration, const T2__& time,
                                  const int& num_delays, std::ostream*
                                  pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 116;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 117;
    stan::math::validate_non_negative_index("R", "k", k);
    current_statement__ = 118;
    stan::math::validate_non_negative_index("R", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,-1> R =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(k, k, DUMMY_VAR__);
    current_statement__ = 119;
    stan::model::assign(R,
      create_seasonal_discrete_matrix_block_R(num_seasons, season_duration,
        time, pstream__), "assigning variable R");
    current_statement__ = 120;
    return rep_diagonal_mat(R, num_delays, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
Eigen::Matrix<double,-1,1>
create_seasonal_discrete_vector_L(const int& num_seasons, const int&
                                  season_duration, const int& num_delays,
                                  std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int k = std::numeric_limits<int>::min();
    current_statement__ = 122;
    k = ((num_seasons * season_duration) + 1);
    current_statement__ = 123;
    stan::math::validate_non_negative_index("L", "k", k);
    Eigen::Matrix<local_scalar_t__,-1,1> L =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
    current_statement__ = 124;
    stan::model::assign(L,
      create_seasonal_discrete_vector_block_L(num_seasons, season_duration,
        pstream__), "assigning variable L");
    current_statement__ = 125;
    return rep_vec(L, num_delays, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>,-1,1>
create_seasonal_discrete_vector_alpha(const T0__& alpha_params_arg__,
                                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
  int current_statement__ = 0;
  const auto& alpha_params = stan::math::to_ref(alpha_params_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 127;
    return alpha_params;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
get_num_elements_alpha_seasonal_discrete(const int& num_seasons, const int&
                                         season_duration, const int&
                                         num_delays, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 129;
    return ((season_duration * num_seasons) * num_delays);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_eigen_matrix_dynamic<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T9__>,
                              stan::is_stan_scalar<T10__>>*>
std::vector<
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                  stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                  stan::base_type_t<T5__>, stan::base_type_t<T6__>,
                  stan::promote_args_t<T7__, T8__, T9__, T10__>>,-1,1>>
state_space_process(const int& num_steps, const int& lsize, const T2__&
                    L_mu_arg__, const T3__& L_nu_arg__, const T4__&
                    B_cnt_arg__, const T5__& X_cnt_arg__, const T6__&
                    B_t_arg__, const std::vector<Eigen::Matrix<T7__,-1,-1>>&
                    X_t, const std::vector<Eigen::Matrix<T8__,-1,1>>& mu,
                    const std::vector<Eigen::Matrix<T9__,-1,1>>& nu,
                    const std::vector<Eigen::Matrix<T10__,-1,1>>& epsilon,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<T7__, T8__, T9__, T10__>>;
  int current_statement__ = 0;
  const auto& L_mu = stan::math::to_ref(L_mu_arg__);
  const auto& L_nu = stan::math::to_ref(L_nu_arg__);
  const auto& B_cnt = stan::math::to_ref(B_cnt_arg__);
  const auto& X_cnt = stan::math::to_ref(X_cnt_arg__);
  const auto& B_t = stan::math::to_ref(B_t_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 131;
    stan::math::validate_non_negative_index("l", "num_steps", num_steps);
    current_statement__ = 132;
    stan::math::validate_non_negative_index("l", "lsize", lsize);
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> l =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lsize, DUMMY_VAR__));
    current_statement__ = 134;
    stan::math::validate_non_negative_index("constant_coef", "cols(X_cnt)",
      stan::math::cols(X_cnt));
    Eigen::Matrix<local_scalar_t__,-1,1> constant_coef =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::cols(X_cnt),
        DUMMY_VAR__);
    current_statement__ = 135;
    stan::model::assign(constant_coef, stan::math::multiply(X_cnt, B_cnt),
      "assigning variable constant_coef");
    current_statement__ = 137;
    for (int t = 1; t <= num_steps; ++t) {
      current_statement__ = 136;
      stan::model::assign(l,
        stan::math::add(
          stan::math::add(
            stan::math::add(
              stan::math::add(
                stan::math::multiply(L_mu,
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(t))),
                stan::math::multiply(L_nu,
                  stan::model::rvalue(nu, "nu", stan::model::index_uni(t)))),
              constant_coef),
            stan::math::multiply(
              stan::model::rvalue(X_t, "X_t", stan::model::index_uni(t)), B_t)),
          stan::model::rvalue(epsilon, "epsilon", stan::model::index_uni(t))),
        "assigning variable l", stan::model::index_uni(t));
    }
    current_statement__ = 138;
    return l;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
std::vector<
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                  stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__>,-1,1>>
time_dependent_process(const int& num_steps, const T1__& A_mu_arg__,
                       const T2__& R_mu_arg__, const T3__& mu_0_arg__,
                       const std::vector<Eigen::Matrix<T4__,-1,1>>& xi_mu,
                       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& A_mu = stan::math::to_ref(A_mu_arg__);
  const auto& R_mu = stan::math::to_ref(R_mu_arg__);
  const auto& mu_0 = stan::math::to_ref(mu_0_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 140;
    stan::math::validate_non_negative_index("mu", "num_steps", num_steps);
    current_statement__ = 141;
    stan::math::validate_non_negative_index("mu", "num_elements(mu_0)",
      stan::math::num_elements(mu_0));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> mu =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                         mu_0), DUMMY_VAR__));
    current_statement__ = 143;
    stan::model::assign(mu, mu_0, "assigning variable mu",
      stan::model::index_uni(1));
    current_statement__ = 145;
    for (int t = 2; t <= num_steps; ++t) {
      current_statement__ = 144;
      stan::model::assign(mu,
        stan::math::add(
          stan::math::multiply(A_mu,
            stan::model::deep_copy(
              stan::model::rvalue(mu, "mu", stan::model::index_uni((t - 1))))),
          stan::math::multiply(R_mu,
            stan::model::rvalue(xi_mu, "xi_mu", stan::model::index_uni(t)))),
        "assigning variable mu", stan::model::index_uni(t));
    }
    current_statement__ = 146;
    return mu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>>*>
std::vector<
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T1__>,
                  stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__>,-1,1>>
time_delay_dependent_process(const int& num_steps, const T1__& A_nu_arg__,
                             const T2__& R_nu_arg__, const T3__& nu_0_arg__,
                             const std::vector<Eigen::Matrix<T4__,-1,1>>&
                             xi_nu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__>;
  int current_statement__ = 0;
  const auto& A_nu = stan::math::to_ref(A_nu_arg__);
  const auto& R_nu = stan::math::to_ref(R_nu_arg__);
  const auto& nu_0 = stan::math::to_ref(nu_0_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 148;
    stan::math::validate_non_negative_index("nu", "num_steps", num_steps);
    current_statement__ = 149;
    stan::math::validate_non_negative_index("nu", "num_elements(nu_0)",
      stan::math::num_elements(nu_0));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> nu =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(num_steps,
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::num_elements(
                                                         nu_0), DUMMY_VAR__));
    current_statement__ = 151;
    stan::model::assign(nu, nu_0, "assigning variable nu",
      stan::model::index_uni(1));
    current_statement__ = 153;
    for (int t = 2; t <= num_steps; ++t) {
      current_statement__ = 152;
      stan::model::assign(nu,
        stan::math::add(
          stan::math::multiply(A_nu,
            stan::model::deep_copy(
              stan::model::rvalue(nu, "nu", stan::model::index_uni((t - 1))))),
          stan::math::multiply(R_nu,
            stan::model::rvalue(xi_nu, "xi_nu", stan::model::index_uni(t)))),
        "assigning variable nu", stan::model::index_uni(t));
    }
    current_statement__ = 154;
    return nu;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>,                 stan::base_type_t<double>>,-1,-1> 
create_block_diagonal(const Eigen::Matrix<double,-1,-1>& A,
                      const Eigen::Matrix<double,-1,-1>& B, std::ostream*
                      pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_block_diagonal(
           A, B, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,-1> 
rep_diagonal_mat(const Eigen::Matrix<double,-1,-1>& A, const int& k,
                 std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::rep_diagonal_mat(
           A, k, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> 
rep_vec(const Eigen::Matrix<double,-1,1>& A, const int& k, std::ostream*
        pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::rep_vec(A, k,
           pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> 
rep_vec_piecewise(const Eigen::Matrix<double,-1,1>& A, const int& k,
                  std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::rep_vec_piecewise(
           A, k, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,-1> 
create_trend_matrix_block_A(const int& degree, std::ostream*
                            pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_matrix_block_A(
           degree, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,1> 
create_trend_vector_block_L(const int& degree, std::ostream*
                            pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_vector_block_L(
           degree, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,-1> 
create_trend_matrix_block_R(const int& degree, const int& is_constant,
                            std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_matrix_block_R(
           degree, is_constant, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> 
create_initial_trend_vector_block_alpha(const Eigen::Matrix<double,-1,1>&
                                        alpha_params, std::ostream*
                                        pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_initial_trend_vector_block_alpha(
           alpha_params, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,-1> 
create_trend_matrix_A(const int& degree, const int& num_delays, std::ostream*
                      pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_matrix_A(
           degree, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,-1> 
create_trend_matrix_R(const int& degree, const int& is_constant, const int&
                      num_delays, std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_matrix_R(
           degree, is_constant, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,1> 
create_trend_vector_L(const int& degree, const int& num_delays, std::ostream*
                      pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_vector_L(
           degree, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> 
create_trend_vector_alpha(const Eigen::Matrix<double,-1,1>& alpha_params,
                          std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_trend_vector_alpha(
           alpha_params, pstream__);
}
// [[Rcpp::export]]
 int 
get_num_elements_alpha_trend(const int& degree, const int& num_delays,
                             std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::get_num_elements_alpha_trend(
           degree, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,-1> 
create_seasonal_discrete_matrix_block_A(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_matrix_block_A(
           num_seasons, season_duration, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,1> 
create_seasonal_discrete_vector_block_L(const int& num_seasons, const int&
                                        season_duration, std::ostream*
                                        pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_vector_block_L(
           num_seasons, season_duration, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double>,-1,-1> 
create_seasonal_discrete_matrix_block_R(const int& num_seasons, const int&
                                        season_duration, const double& time,
                                        std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_matrix_block_R(
           num_seasons, season_duration, time, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>, double>,-1,1> 
create_initial_seasonal_discrete_vector_block_alpha(const Eigen::Matrix<double,-1,1>&
                                                    season_params, const int&
                                                    season_duration,
                                                    const double& error_term,
                                                    std::ostream*
                                                    pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_initial_seasonal_discrete_vector_block_alpha(
           season_params, season_duration, error_term, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,-1> 
create_seasonal_discrete_matrix_A(const int& num_seasons, const int&
                                  season_duration, const int& num_delays,
                                  std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_matrix_A(
           num_seasons, season_duration, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double>,-1,-1> 
create_seasonal_discrete_matrix_R(const int& num_seasons, const int&
                                  season_duration, const double& time,
                                  const int& num_delays, std::ostream*
                                  pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_matrix_R(
           num_seasons, season_duration, time, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double,-1,1> 
create_seasonal_discrete_vector_L(const int& num_seasons, const int&
                                  season_duration, const int& num_delays,
                                  std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_vector_L(
           num_seasons, season_duration, num_delays, pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>>,-1,1> 
create_seasonal_discrete_vector_alpha(const Eigen::Matrix<double,-1,1>&
                                      alpha_params, std::ostream*
                                      pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::create_seasonal_discrete_vector_alpha(
           alpha_params, pstream__);
}
// [[Rcpp::export]]
 int 
get_num_elements_alpha_seasonal_discrete(const int& num_seasons, const int&
                                         season_duration, const int&
                                         num_delays, std::ostream*
                                         pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::get_num_elements_alpha_seasonal_discrete(
           num_seasons, season_duration, num_delays, pstream__);
}
// [[Rcpp::export]]
 std::vector<   Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>,                   stan::base_type_t<double>, stan::base_type_t<double>,                   stan::base_type_t<double>, stan::base_type_t<double>,                   stan::promote_args_t<double, double, double, double>>,-1,1>> 
state_space_process(const int& num_steps, const int& lsize,
                    const Eigen::Matrix<double,-1,-1>& L_mu,
                    const Eigen::Matrix<double,-1,-1>& L_nu,
                    const Eigen::Matrix<double,-1,1>& B_cnt,
                    const Eigen::Matrix<double,-1,-1>& X_cnt,
                    const Eigen::Matrix<double,-1,1>& B_t,
                    const std::vector<Eigen::Matrix<double,-1,-1>>& X_t,
                    const std::vector<Eigen::Matrix<double,-1,1>>& mu,
                    const std::vector<Eigen::Matrix<double,-1,1>>& nu,
                    const std::vector<Eigen::Matrix<double,-1,1>>& epsilon,
                    std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::state_space_process(
           num_steps, lsize, L_mu, L_nu, B_cnt, X_cnt, B_t, X_t, mu, nu,
           epsilon, pstream__);
}
// [[Rcpp::export]]
 std::vector<   Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>,                   stan::base_type_t<double>, stan::base_type_t<double>, double>,-1,1>> 
time_dependent_process(const int& num_steps,
                       const Eigen::Matrix<double,-1,-1>& A_mu,
                       const Eigen::Matrix<double,-1,-1>& R_mu,
                       const Eigen::Matrix<double,-1,1>& mu_0,
                       const std::vector<Eigen::Matrix<double,-1,1>>& xi_mu,
                       std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::time_dependent_process(
           num_steps, A_mu, R_mu, mu_0, xi_mu, pstream__);
}
// [[Rcpp::export]]
 std::vector<   Eigen::Matrix<stan::promote_args_t<stan::base_type_t<double>,                   stan::base_type_t<double>, stan::base_type_t<double>, double>,-1,1>> 
time_delay_dependent_process(const int& num_steps,
                             const Eigen::Matrix<double,-1,-1>& A_nu,
                             const Eigen::Matrix<double,-1,-1>& R_nu,
                             const Eigen::Matrix<double,-1,1>& nu_0,
                             const std::vector<Eigen::Matrix<double,-1,1>>&
                             xi_nu, std::ostream* pstream__ = 0) {
  return model27bec5bb8b1a0_User_defined_functions_namespace::time_delay_dependent_process(
           num_steps, A_nu, R_nu, nu_0, xi_nu, pstream__);
}
