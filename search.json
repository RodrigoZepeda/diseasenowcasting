[{"path":"https://rodrigozepeda.github.io/diseasenowcasting/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Columbia University City New York Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2024). diseasenowcasting: Package (Title Case). R package version 0.1.0, https://rodrigozepeda.github.io/diseasenowcasting/.","code":"@Manual{,   title = {diseasenowcasting: What the Package Does (Title Case)},   author = {Who wrote it},   year = {2024},   note = {R package version 0.1.0},   url = {https://rodrigozepeda.github.io/diseasenowcasting/}, }"},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (Title Case)","text":"","code":"library(diseasenowcasting)  data(denguedat)  #Might need to run again if it gives an unserialized error. Working on it.  predictions <- nowcast(denguedat, \"onset_week\", \"report_week\",                         now = as.Date(\"1990-10-01\"),                         dist = \"NegativeBinomial\", cores = 4, iter = 1000) #> ℹ Computing a nowcast for 1990-10-01 per weeks #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"`"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the onset and report dates — check_date_columns","title":"Check the onset and report dates — check_date_columns","text":"Check onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the onset and report dates — check_date_columns","text":"","code":"check_date_columns(.disease_data, onset_date, report_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the onset and report dates — check_date_columns","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the `now` argument to be date — check_now","title":"Check the `now` argument to be date — check_now","text":"Check `now` argument date","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the `now` argument to be date — check_now","text":"","code":"check_now(.disease_data, now, onset_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the `now` argument to be date — check_now","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, now object datatype Date indicating date perform nowcast. onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the `proportion_reported` argument — check_proportion_reported","title":"Check the `proportion_reported` argument — check_proportion_reported","text":"Check `proportion_reported` argument","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the `proportion_reported` argument — check_proportion_reported","text":"","code":"check_proportion_reported(proportion_reported)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the `proportion_reported` argument — check_proportion_reported","text":"proportion_reported decimal greater 0 less equal 1 representing proportion cases expected reported. Default: 1, e.g. 100 percent cases eventually reported. asymptomatic diseases cases ever reported, outbreaks severe -reporting expected, change  less 1.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the `units` argument among the options — check_units","title":"Check the `units` argument among the options — check_units","text":"Check `units` argument among options","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the `units` argument among the options — check_units","text":"","code":"check_units(units)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the `units` argument among the options — check_units","text":"units Time scale reporting. Options: \"1 day\", \"1 week\".","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":null,"dir":"Reference","previous_headings":"","what":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","title":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","text":"Surveillance data CDC Division Vector-Borne Diseases. 1990-2010 case reporting data included.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","text":"","code":"data(denguedat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","text":"data frame.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","text":"first column, `onset_week`, indicates week symptom onset. second column, `report_week`, indicates week case report. third column, `gender`, indicates gender infected individual (randomly assigned 0.5:0.5 probability \"Male\"/\"Female\").","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","text":"Data originally `NobBS` package.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"denguedat: Dengue fever reporting data from Puerto Rico — denguedat","text":"","code":"data(denguedat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/diseasenowcasting-package.html","id":null,"dir":"Reference","previous_headings":"","what":"diseasenowcasting: What the Package Does (Title Case) — diseasenowcasting-package","title":"diseasenowcasting: What the Package Does (Title Case) — diseasenowcasting-package","text":"(maybe one line) Use four spaces indenting paragraphs within Description.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer the `data_type` — infer_data_type","title":"Automatically infer the `data_type` — infer_data_type","text":"Infers whether data line-data count-data whether () column named `n`","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer the `data_type` — infer_data_type","text":"","code":"infer_data_type(.disease_data, data_type)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer the `data_type` — infer_data_type","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, data_type Either `linedata` row represents test `counts` column named `n` counts many tests onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer which value is `now`. — infer_now","title":"Automatically infer which value is `now`. — infer_now","text":"Function returns maximum onset date `.disease_data` `now = NULL`. Else check whether now possible data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer which value is `now`. — infer_now","text":"","code":"infer_now(.disease_data, now, onset_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer which value is `now`. — infer_now","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, now object datatype Date indicating date perform nowcast. onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer which value is `units`. — infer_units","title":"Automatically infer which value is `units`. — infer_units","text":"Function returns whether data daily, weekly, monthly yearly `date_column`.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer which value is `units`. — infer_units","text":"","code":"infer_units(.disease_data, units, date_column)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer which value is `units`. — infer_units","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, units Time scale reporting. Options: \"1 day\", \"1 week\". date_column Name column `.disease_data` contains dates.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcasting — nowcast","title":"Nowcasting — nowcast","text":"Function uses [rstan::sampling()] engine generate nowcasts.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcasting — nowcast","text":"","code":"nowcast(   .disease_data,   onset_date,   report_date,   strata = NULL,   dist = c(\"NegativeBinomial\", \"Poisson\"),   now = NULL,   units = NULL,   max_delay = Inf,   prior_only = FALSE,   init = 0,   proportion_reported = 1,   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcasting — nowcast","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. dist Distribution. Either \"NegativeBinomial\"  \"Poisson\" now object datatype Date indicating date perform nowcast. units Time scale reporting. Options: \"1 day\", \"1 week\". max_delay Maximum possible delay observed considered estimation delay distribution (numeric). Default: `Inf` prior_only Boolean variable indicating whether compute prior init Initial values [rstan::sampling()] proportion_reported decimal greater 0 less equal 1 representing proportion cases expected reported. Default: 1, e.g. 100 percent cases eventually reported. asymptomatic diseases cases ever reported, outbreaks severe -reporting expected, change  less 1. ... Additional arguments pass [rstan::sampling()]","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nowcasting — nowcast","text":"","code":"# Load the data data(denguedat) now <- as.Date(\"1990-10-01\")  # Run a nowcast with very few iterations nowcast(denguedat, \"onset_week\", \"report_week\", iter = 10) #> ℹ Computing a nowcast for 2010-11-29 per weeks #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #>  #> SAMPLING FOR MODEL 'nowcast' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.010311 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 103.11 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: No variance estimation is #> Chain 1:          performed for num_warmup < 20 #> Chain 1:  #> Chain 1: Iteration: 1 / 10 [ 10%]  (Warmup) #> Chain 1: Iteration: 2 / 10 [ 20%]  (Warmup) #> Chain 1: Iteration: 3 / 10 [ 30%]  (Warmup) #> Chain 1: Iteration: 4 / 10 [ 40%]  (Warmup) #> Chain 1: Iteration: 5 / 10 [ 50%]  (Warmup) #> Chain 1: Iteration: 6 / 10 [ 60%]  (Sampling) #> Chain 1: Iteration: 7 / 10 [ 70%]  (Sampling) #> Chain 1: Iteration: 8 / 10 [ 80%]  (Sampling) #> Chain 1: Iteration: 9 / 10 [ 90%]  (Sampling) #> Chain 1: Iteration: 10 / 10 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.121 seconds (Warm-up) #> Chain 1:                0.129 seconds (Sampling) #> Chain 1:                0.25 seconds (Total) #> Chain 1:  #> Error : Exception: neg_binomial_2_log_rng: Random number that came from gamma distribution is 1.84932e+09, but must be less than 1073741824.000000 (in 'nowcast', line 143, column 10 to column 100) #>  [1] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #>  [2] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #>  [3] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #>  [4] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #>  [5] \"Chain 1: \"                                                                                                                                       #>  [6] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #>  [7] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #>  [8] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #>  [9] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [10] \"Chain 1: \"                                                                                                                                       #> [11] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [12] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [13] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [14] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [15] \"Chain 1: \"                                                                                                                                       #> [16] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [17] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [18] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [19] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [20] \"Chain 1: \"                                                                                                                                       #> [21] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [22] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [23] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [24] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [25] \"Chain 1: \"                                                                                                                                       #> [26] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [27] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [28] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [29] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [30] \"Chain 1: \"                                                                                                                                       #> [31] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [32] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [33] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [34] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [35] \"Chain 1: \"                                                                                                                                       #> [36] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [37] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [38] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [39] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [40] \"Chain 1: \"                                                                                                                                       #> [41] \"Chain 1: Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:\"                         #> [42] \"Chain 1: Exception: gamma_lpdf: Random variable[1] is 0, but must be positive finite! (in 'nowcast', line 118, column 4 to column 76)\"           #> [43] \"Chain 1: If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,\" #> [44] \"Chain 1: but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.\"                               #> [45] \"Chain 1: \"                                                                                                                                       #> error occurred during calling the sampler; sampling not done #> Stan model 'nowcast' does not contain samples."},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcasting with the `rstan` engine — nowcast.rstan","title":"Nowcasting with the `rstan` engine — nowcast.rstan","text":"Nowcasting `rstan` engine","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcasting with the `rstan` engine — nowcast.rstan","text":"","code":"nowcast.rstan(   .disease_data,   onset_date,   report_date,   strata = NULL,   dist = c(\"NegativeBinomial\", \"Poisson\"),   prior_only = FALSE,   init = 0,   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcasting with the `rstan` engine — nowcast.rstan","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. dist Distribution. Either \"NegativeBinomial\"  \"Poisson\" prior_only Boolean variable indicating whether compute prior init Initial values [rstan::sampling()] ... Additional arguments pass [rstan::sample()]","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"Function takes data frame `onset_date` `report_date` generates possible combinations onset_dates report_dates observable controlling covariates specified `...`","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"","code":"preprocess_for_nowcast(   .disease_data,   onset_date,   report_date,   ...,   now,   units,   max_delay = Inf,   data_type = c(\"auto\", \"linelist\", \"count\") )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" ... Additional covariates involve count. now object datatype Date indicating date perform nowcast. units Time scale reporting. Options: \"1 day\", \"1 week\". max_delay Maximum possible delay observed considered estimation delay distribution (numeric). Default: `Inf` data_type Either `linedata` row represents test `counts` column named `n` counts many tests onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"`data.frame` possible counts delay-onset combinations. new column counts named `n`. Additional columns `.tval` `.delay` added `.tval` codifies dates numbers (starting 0) delay codifies difference onset report.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"","code":"data(denguedat)  # Get counts by onset date and report week consider all possible delays preprocess_for_nowcast(denguedat, \"onset_week\", \"report_week\",   units = \"weeks\", now = as.Date(\"1990-03-05\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 55 × 5 #>    onset_week .delay report_week     n .tval #>    <date>      <dbl> <date>      <int> <dbl> #>  1 1990-01-01      0 1990-01-01      3     1 #>  2 1990-01-01      1 1990-01-08     24     1 #>  3 1990-01-01      2 1990-01-15     23     1 #>  4 1990-01-01      3 1990-01-22      8     1 #>  5 1990-01-01      4 1990-01-29      1     1 #>  6 1990-01-01      5 1990-02-05      0     1 #>  7 1990-01-01      6 1990-02-12      1     1 #>  8 1990-01-01      7 1990-02-19      0     1 #>  9 1990-01-01      8 1990-02-26      0     1 #> 10 1990-01-01      9 1990-03-05      1     1 #> # ℹ 45 more rows  # Complete one date when there was no onset week df <- data.frame(   onset_week  = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-03\", \"1994-10-10\")),   report_week = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-10\", \"1994-10-10\")) ) preprocess_for_nowcast(df, \"onset_week\", \"report_week\",   units = \"weeks\",   now = as.Date(\"1994-10-10\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 7 × 5 #>   onset_week .delay report_week     n .tval #>   <date>      <dbl> <date>      <int> <dbl> #> 1 1994-09-19      0 1994-09-19      1     1 #> 2 1994-09-19      1 1994-09-26      0     1 #> 3 1994-09-26      0 1994-09-26      0     2 #> 4 1994-09-26      1 1994-10-03      0     2 #> 5 1994-10-03      0 1994-10-03      1     3 #> 6 1994-10-03      1 1994-10-10      1     3 #> 7 1994-10-10      0 1994-10-10      1     4  # Complete one date when there was no report of delay 3 mostly df <- data.frame(   onset_week  = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-03\", \"1994-10-10\")),   report_week = as.Date(c(\"1994-10-10\", \"1994-10-03\", \"1994-10-10\", \"1994-10-10\")) ) preprocess_for_nowcast(df, \"onset_week\", \"report_week\",   units = \"weeks\",   now = as.Date(\"1994-10-10\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 10 × 5 #>    onset_week .delay report_week     n .tval #>    <date>      <dbl> <date>      <int> <dbl> #>  1 1994-09-19      0 1994-09-19      0     1 #>  2 1994-09-19      1 1994-09-26      0     1 #>  3 1994-09-19      2 1994-10-03      0     1 #>  4 1994-09-19      3 1994-10-10      1     1 #>  5 1994-09-26      0 1994-09-26      0     2 #>  6 1994-09-26      1 1994-10-03      0     2 #>  7 1994-09-26      2 1994-10-10      0     2 #>  8 1994-10-03      0 1994-10-03      1     3 #>  9 1994-10-03      1 1994-10-10      1     3 #> 10 1994-10-10      0 1994-10-10      1     4  # Get counts by onset date and report week stratifying by gender and state df <- data.frame(   onset_week = sample(as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-10\")), 100, replace = TRUE),   gender = sample(c(\"Male\", \"Female\"), 100, replace = TRUE),   state = sample(c(\"A\", \"B\", \"C\", \"D\"), prob = c(0.5, 0.2, 0.2, 0.1), size = 100, replace = TRUE) ) df$report_week <- df$onset_week +   sample(c(lubridate::weeks(1), lubridate::weeks(2)), 100, replace = TRUE) preprocess_for_nowcast(df, \"onset_week\", \"report_week\", \"gender\", \"state\",   units = \"weeks\",   now = as.Date(\"1994-09-26\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 100 × 7 #>    onset_week .delay gender state report_week     n .tval #>    <date>      <dbl> <chr>  <chr> <date>      <int> <dbl> #>  1 1994-09-19      1 Male   B     1994-09-26      0     1 #>  2 1994-09-19      1 Female B     1994-09-26      2     1 #>  3 1994-09-19      1 Female D     1994-09-26      0     1 #>  4 1994-09-19      1 Female A     1994-09-26      3     1 #>  5 1994-09-19      1 Male   C     1994-09-26      2     1 #>  6 1994-09-19      1 Male   A     1994-09-26      5     1 #>  7 1994-09-19      1 Male   A     1994-09-26      5     1 #>  8 1994-09-19      1 Male   C     1994-09-26      2     1 #>  9 1994-09-19      1 Male   C     1994-09-26      2     1 #> 10 1994-09-19      1 Female A     1994-09-26      3     1 #> # ℹ 90 more rows"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/news/index.html","id":"diseasenowcasting-010","dir":"Changelog","previous_headings":"","what":"diseasenowcasting 0.1.0","title":"diseasenowcasting 0.1.0","text":"Initial creation.","code":""}]
