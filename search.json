[{"path":"https://rodrigozepeda.github.io/diseasenowcasting/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Columbia University City New York Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"using-strata","dir":"Articles","previous_headings":"","what":"Using strata","title":"Advanced nowcast options","text":"nowcast can generated stratified covariates specifying column (columns) correspond strata. case can specify race obtain nowcast stratified race: subsequent operations including summary, plots:  well backtesting: calculating metrics strata: remaining examples estimated without covariates without backtesting just improve speed tutorial.","code":"ncast_race <- nowcast(mpox_reduced, true_date = \"dx_date\",                        report_date = \"dx_report_date\", strata = \"race\", refresh = 0,                       method = \"variational\") plot(ncast_race, datesbrakes = \"1 week\", rowsfacet = 3, casesbrakes = 3) #Backtesting for a random date in the past: btest <- backtest(ncast_race, dates_to_test = as.Date(\"2022/08/04\"), refresh = 0) backtest_metrics(btest) #> # A tibble: 5 × 15 #>   model             now        horizon Strata_unified   mse se_point   ape   wis #>   <chr>             <date>       <dbl> <chr>          <dbl>    <dbl> <dbl> <dbl> #> 1 model_2025-02-20… 2022-08-04       0 Asian          14.8     219.   2.96  5.91 #> 2 model_2025-02-20… 2022-08-04       0 Black          22.8     518.   3.79  9.81 #> 3 model_2025-02-20… 2022-08-04       0 Hispanic       33.4    1115.   5.57 16.1  #> 4 model_2025-02-20… 2022-08-04       0 Non-Hispanic … 31.1     969.   4.45 14.2  #> 5 model_2025-02-20… 2022-08-04       0 Other           8.56     73.3  4.28  3.25 #> # ℹ 7 more variables: overprediction <dbl>, underprediction <dbl>, #> #   dispersion <dbl>, bias <dbl>, interval_coverage_50 <dbl>, #> #   interval_coverage_90 <dbl>, ae_median <dbl>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"adding-temporal-effects","dir":"Articles","previous_headings":"","what":"Adding temporal effects","title":"Advanced nowcast options","text":"Time covariates (called temporal effects) can added epidemic process delay process. Simple time covariates include day_of_week (codifying days Monday Sunday), weekend (codifying Saturday Sunday), day_of_month (codifying day 1 30 31 depending month), month_of_year (codifying January December), week_of_year (codifying epidemiological week year according CDC) holidays explained later section. Temporal effects can added temporal_effects() function covariates can set either TRUE FALSE: default, model tries infer best temporal effects given data throw warning don’t make sense (example adding day week effects weekly data). difference epidemic delay effects follows: epidemic_effects Refer time-covariates affect epidemic process. example, epidemic process might affected epidemiological week due yearly seasonality disease case influenza dengue. delay_effects Refer time-covariates affect reporting process. example, reporting process might affected laboratories working full capacity weekend holidays thus making report slower thus dates.","code":"temporal_effects(day_of_week = TRUE, week_of_year = TRUE) #>  #> ── Temporal effect object ── #>  #> The following effects are in place: #> • day_of_week #> • week_of_year #> #Add temporal effects for epidemic process epidemic_effects <- temporal_effects(day_of_week = TRUE, week_of_year = TRUE)  #Add temporal effects for delay process to have an effect on delay if weekend delay_effects   <- temporal_effects(weekend = TRUE)  ncast_temp <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                        temporal_effects_epidemic = epidemic_effects,                       temporal_effects_delay = delay_effects,                       refresh = FALSE,                       method = \"variational\", #<- Change to sampling when in production                       seed = 87245)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"adding-holidays","dir":"Articles","previous_headings":"Adding temporal effects","what":"Adding holidays","title":"Advanced nowcast options","text":"Holidays can added using almanac::rcalendar() alamanc package. calendar created can integrated holidays temporal effect. example use US Federal Calendar (almanac::cal_us_federal()) already included almanac package: Thus can run new model accounting holiday effects reporting (due labs working full capacity) epidemic (due individuals behaving differently holidays thus changing epidemic process): model looks like: Interested users can consult almanac package’s documentation create calendar.","code":"library(almanac)  #Add temporal effects for epidemic process temporal_effects(day_of_week = TRUE, week_of_year = TRUE, holidays = cal_us_federal()) #> ── Temporal effect object ── #>  #> The following effects are in place: #> • day_of_week #> • week_of_year #> • holidays #> #Add temporal effects for epidemic process epidemic_effects <- temporal_effects(day_of_week = TRUE, week_of_year = TRUE,                                       holidays = cal_us_federal())  #Add temporal effects for delay process to have an effect on delay if weekend delay_effects   <- temporal_effects(weekend = TRUE, holidays = cal_us_federal())  ncast_temp <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                        temporal_effects_epidemic = epidemic_effects,                       temporal_effects_delay = delay_effects,                       refresh = FALSE,                       method = \"variational\", #<- Change to sampling when in production                       seed = 87245) plot(ncast_temp, datesbrakes = \"1 week\") +   ggtitle(\"Model with temporal effects\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"adding-cycles","dir":"Articles","previous_headings":"","what":"Adding cycles","title":"Advanced nowcast options","text":"Cycles correspond increases/decreases epidemic process accounted seasonality. seasonality increases/decreases usually specific periods time (say increase dengue cases rainy season), cycles correspond stochastic increases/decreases season (say dengue cases one year rose rainy season following year dry season). Cycles can added model setting has_cycle option TRUE.","code":"ncast_cycle <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                         temporal_effects_epidemic = epidemic_effects,                        temporal_effects_delay = delay_effects,                        has_cycle = TRUE,                        refresh = FALSE,                        method = \"variational\", #<- Change to sampling when in production                        seed = 87245) plot(ncast_cycle, datesbrakes = \"1 week\") +   ggtitle(\"Model with temporal effects and cycle\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"changing-the-autorregresive-components","dir":"Articles","previous_headings":"","what":"Changing the autorregresive components","title":"Advanced nowcast options","text":"nowcast includes autorregresive moving average components delay epidemic process. autorregresive components can setup AR() function. interpreted much epidemic process current observation depends cases previous observations. example, AR(epidemic_trend = 2) can interpreted epidemic trend depending upon previous two observations (idea lower higher previous cases imply different things current prediction). : epidemic_trend Refers trend epidemic (disease) process independently report date. delay_trend Refers dependency delay reporting. idea cases delayed previous observation, cases delayed current observation. plot:","code":"ncast_arma <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                        temporal_effects_epidemic = epidemic_effects,                       temporal_effects_delay    = delay_effects,                       has_cycle = TRUE,                       autoregresive  = AR(epidemic_trend = 2, delay_trend = 2),                       moving_average = MA(2),                       refresh = FALSE,                       method = \"variational\", #<- Change to sampling when in production                       seed = 87245) plot(ncast_arma, datesbrakes = \"1 week\") +   ggtitle(\"Model with temporal effects, cycle, and custom ARMA\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"changing-the-distribution","dir":"Articles","previous_headings":"","what":"Changing the distribution","title":"Advanced nowcast options","text":"default nowcast() uses Negative Binomial distribution. However can changed dist parameter either Poisson, Normal Student. generate slightly different model greatest effect seen variance. predictions look like","code":"ncast_student <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                           temporal_effects_epidemic = epidemic_effects,                          temporal_effects_delay    = delay_effects,                          has_cycle = TRUE,                          dist = \"Student\", #<- Changed the distribution                          refresh = FALSE,                          method = \"variational\", #<- Change to sampling when in production                          seed = 87245) plot(ncast_student, datesbrakes = \"1 week\") +   ggtitle(\"Student model with temporal effects, cycle, and custom ARMA\")"},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"getting-a-sample-from-the-priors","dir":"Articles","previous_headings":"","what":"Getting a sample from the priors","title":"Advanced nowcast options","text":"bayesian scenario, priors establish previously expected behaviour epidemic process acquiring information. cases enough information present (example start outbreak) prior dictate expected behaviour model. visualize prior epidemic process can set prior_only option nowcast TRUE:","code":"ncast_prior <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                           temporal_effects_epidemic = epidemic_effects,                          temporal_effects_delay    = delay_effects,                          has_cycle = TRUE,                          refresh = FALSE,                          prior_only = TRUE,                          method = \"variational\", #<- Change to sampling when in production                          seed = 87245) plot(ncast_prior, datesbrakes = \"1 week\") +   ggtitle(\"Default prior for model with temporal effects, cycle, and custom ARMA\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"changing-the-priors","dir":"Articles","previous_headings":"","what":"Changing the priors","title":"Advanced nowcast options","text":"Hyperparameters distribution’s priors can changed set_priors() function. function included list hyperparameters used model well values. One can change, example, hyperprior variance delay part process changing sd_nu_param_1 sd_nu_param_2. following example, add variance delay:","code":"ncast_prior_2 <- nowcast(mpox_reduced, true_date = \"dx_date\", report_date = \"dx_report_date\",                           temporal_effects_epidemic = epidemic_effects,                          temporal_effects_delay    = delay_effects,                          has_cycle = TRUE,                          refresh = FALSE,                          prior_only = TRUE,                          priors = set_priors(sd_nu_param_1 = 0.0, sd_nu_param_2 = 100),                          method = \"variational\", #<- Change to sampling when in production                          seed = 87245) plot(ncast_prior_2, datesbrakes = \"1 week\") +   ggtitle(\"Custom prior for model with temporal effects, cycle, and custom ARMA\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Advanced-nowcast-options.html","id":"changing-the-method","dir":"Articles","previous_headings":"","what":"Changing the method","title":"Advanced nowcast options","text":"currently three methods fitting model: sampling, variational optimization. Sampling precise slowest. Performs MCMC sampling following Stan’s sampling routine. Internally uses [rstan::sampling()]. 2.Variational method less precise sampling faster. can oftentimes yield results good (terms prediction power) sampling reduced time cost. uses [rstan::vb()] get approximate posterior. Optimization least accurate fastest used prototyping. Performs maximum likelihood optimization [rstan::optimizing()] get approximate point estimate. method used developers fast testing [nowcast()] object. method can changed method option. example perform optimization:","code":"ncast_optim <-  nowcast(mpox_reduced, true_date = \"dx_date\",                           report_date = \"dx_report_date\", strata = \"race\",                          refresh = 0, method = \"optimization\")  plot(ncast_optim)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Comparison-to-other-methods.html","id":"diseasenowcasting","dir":"Articles","previous_headings":"","what":"diseasenowcasting","title":"Comparison to other methods","text":"section generate estimates compared packages. operate following baseline model: use 10 different dates time series codified dates_to_test: finally compute nowcasts moments save object: looks like:","code":"data(denguedat) now   <- as.Date(\"1990-10-15\") ncast <- nowcast(denguedat, true_date = \"onset_week\", now = now,                  report_date = \"report_week\", refresh = 0,                  method = \"sampling\", iter = 1000,                  seed = 27549, cores = 4, chains = 4) set.seed(645287) dates_possible <- seq(min(denguedat$onset_week), max(denguedat$onset_week), by = \"1 week\") dates_to_test  <- sample(dates_possible, size = 10) |> sort()  #We will consider only periods of at most 3 years else it makes it really slow mindate <- min(denguedat$onset_week) #To save the results in  ncast_wis_table <- NULL  #The diseasenowcasting version for (now in dates_to_test){    #Get current date as date   now <- as.Date(now)    #Get new data   new_data <- denguedat |> filter(report_week <= now & report_week >= max(now - years(3), mindate))    #Update the model   ncast_update  <- update(ncast, new_data = new_data, now = now)    #Get summary   ncast_summary <- summary(ncast_update, quantiles = c(0.025, 0.05, 0.25, 0.50, 0.75, 0.95, 0.975))    #Save summary   ncast_summary <- tibble(now = now, ncast_summary)    #Keep only last observation (nowcast)   ncast_summary <- ncast_summary |>     mutate(horizon = as.numeric(difftime(onset_week, !!now, units=\"weeks\"))) |>     filter(horizon > -1)    #Update the table   ncast_wis_table <- rbind(ncast_wis_table, ncast_summary)  }  #Remove other columns ncast_wis_table <- ncast_wis_table |>   select(-sd, -median, -`50%`, -Strata_unified) ncast_wis_table #> # A tibble: 10 × 10 #>    now        onset_week `2.5%`  `5%` `25%` `50%` `75%` `95%` `97.5%` horizon #>    <date>     <date>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>   <dbl> #>  1 1990-11-12 1990-11-12   53    58    73    86.5   102  128    138         0 #>  2 1991-11-04 1991-11-04   81.0  87   109   125     142  171    182         0 #>  3 1994-06-20 1994-06-20   29.0  32    42    50      58   75     79.0       0 #>  4 1995-10-16 1995-10-16   28    32    46    56      69   88     95         0 #>  5 1999-03-08 1999-03-08   30    33    46    57      70   93    102         0 #>  6 2002-07-01 2002-07-01    1     2     4     7      12   19     23         0 #>  7 2004-02-09 2004-02-09   11    13    19    25      31   42     46         0 #>  8 2008-01-21 2008-01-21    9    11    22    31      42   63     71.0       0 #>  9 2010-05-31 2010-05-31   25    31.0  48.8  63      81  115    129         0 #> 10 2010-08-02 2010-08-02   73.0  85   131   171     223  313.   343.        0"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Comparison-to-other-methods.html","id":"nobbs","dir":"Articles","previous_headings":"","what":"NobBS","title":"Comparison to other methods","text":"usual call NobBS follows: repeat process analyzing multiple dates calculate prediction’s accuracy: looks like:","code":"library(NobBS) nbbs_cast <- NobBS(data = denguedat, units = \"1 week\", now = now,                    onset_date = \"onset_week\", report_date = \"report_week\") set.seed(2507284)  nobbs_wis_table <- NULL for (now in dates_to_test){    now <- as.Date(now)    #Get new data   new_data <- denguedat |> filter(report_week <= now & report_week >= max(now - years(3), mindate))    #Update the model calculating the quantiles at 95, 90 and 50%.   #The new Nobbs version doesn't require you to estimate three times to get quantiles   #but I am assuming the user has the CRAN version   nbbs_cast_95 <- NobBS(data = new_data, units = \"1 week\", now = now,                      onset_date = \"onset_week\", report_date = \"report_week\",                      specs = list(conf = 0.95))    nbbs_cast_90 <- NobBS(data = new_data, units = \"1 week\", now = now,                         onset_date = \"onset_week\", report_date = \"report_week\",                         specs = list(conf = 0.9))    nbbs_cast_50 <- NobBS(data = new_data, units = \"1 week\", now = now,                         onset_date = \"onset_week\", report_date = \"report_week\",                         specs = list(conf = 0.5))    #Bind all into a single table   nbbs_cast <- nbbs_cast_95[[\"estimates\"]] |>     select(estimate, lower, upper, onset_date, n.reported) |>     rename(`97.5%` = upper, `2.5%` = lower, mean = estimate, observed = n.reported) |>     left_join(       nbbs_cast_50[[\"estimates\"]] |>       select(lower, upper, onset_date) |>       rename(`75%` = upper, `25%` = lower), by = \"onset_date\"     ) |>     left_join(       nbbs_cast_90[[\"estimates\"]] |>         select(lower, upper, onset_date) |>         rename(`95%` = upper, `5%` = lower), by = \"onset_date\"     ) |>     mutate(horizon = as.numeric(difftime(onset_date, !!now, units=\"weeks\"))) |>     filter(horizon > -1) |>     mutate(now = !!now) |>     rename(onset_week = onset_date)    nobbs_wis_table <- rbind(nobbs_wis_table, nbbs_cast)  } nobbs_wis_table #>    mean    2.5% 97.5% onset_week observed 25% 75%     5% 95% horizon        now #> 1   175 114.000   267 1990-11-12       16 152 203 122.00 249       0 1990-11-12 #> 2   206 141.000   293 1991-11-04       18 182 233 150.95 277       0 1991-11-04 #> 3    72  43.000   114 1994-06-20        5  61  84  47.00 107       0 1994-06-20 #> 4    51  26.975    93 1995-10-16        3  41  63  30.00  84       0 1995-10-16 #> 5    47  25.000    81 1999-03-08        1  38  57  28.00  74       0 1999-03-08 #> 6     5   1.000    14 2002-07-01       NA   3   8   1.00  12       0 2002-07-01 #> 7    28  13.000    52 2004-02-09        2  22  35  15.00  47       0 2004-02-09 #> 8    21   8.000    44 2008-01-21       NA  15  27   9.00  39       0 2008-01-21 #> 9    66  34.000   117 2010-05-31        1  53  81  38.00 108       0 2010-05-31 #> 10  477 278.000   787 2010-08-02        6 399 566 305.00 727       0 2010-08-02"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Comparison-to-other-methods.html","id":"comparison","dir":"Articles","previous_headings":"","what":"Comparison","title":"Comparison to other methods","text":"use scoringutils library calculate weighted interval scoring: format presenting Finally results show diseasenowcasting either close NoBbs performs better NoBbs:","code":"model_table <- nobbs_wis_table |>    mutate(method = \"NoBbs\") |>    rename(`50%` = mean) |>  #The point estimate for scoring utils   bind_rows(ncast_wis_table |> mutate(method = \"diseasenowcasting\")) library(scoringutils, quietly = TRUE) library(tidyr) library(stringr)  summary_table <- model_table |>      mutate(observed = replace_na(observed, 0)) |>      pivot_longer(cols = ends_with(\"%\"), names_to = 'quantile_level', values_to = 'predicted') |>     mutate(quantile_level = as.numeric(str_remove_all(quantile_level, \"\\\\%\"))/100)  |>     as_forecast_quantile() |>     score() |>     summarise_scores(by = c(\"horizon\",\"method\",\"now\")) wis_table <- summary_table |>    pivot_wider(id_cols = c(\"horizon\",\"now\"), names_from = \"method\", values_from = \"wis\") |>    mutate(nowcat = factor(now, ordered = TRUE)) ggplot(wis_table) +   geom_point(aes(x = nowcat, y = diseasenowcasting, color = \"diseasenowcasting\")) +    geom_point(aes(x = nowcat, y = NoBbs, color = \"NoBbs\")) +    geom_hline(aes(yintercept = mean(NoBbs), color = \"NoBbs\"), linetype = \"dashed\") +   geom_hline(aes(yintercept = mean(diseasenowcasting), color = \"diseasenowcasting\"), linetype = \"dashed\") +   theme_bw() +   labs(     x = \"Nowcasted date\",     y = \"Weighted interval scoring\",     title = \"Weighted interval scoring for the nowcast\"   ) +   theme(     legend.position = \"bottom\",     axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 1)   ) +   scale_color_manual(\"package\", values = c(\"deepskyblue3\",\"tomato3\"))"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"what-is-nowcasting","dir":"Articles","previous_headings":"","what":"What is nowcasting?","title":"Introduction to diseasenowcasting","text":"many applications, interest predict current number cases might lag registry. Examples lags can administrative tests taking time yield results, sociological patients taking time report healthcare facility symptom onset biological: symptoms happening time colonization. cases might end registries looking like one Figure 1: number cases observed today incomplete fraction overall number cases eventually registered. Current number cases certain disease (left) vs eventual number registered cases disease (right) difference current observed number cases final number cases eventually reported accounted model. nowcasting, refer predicting number cases specific disease date already happened (currently happening) incomplete information. basic example involves predicting number cases now given already seen today’s cases arrive system yet. Hence nowcast refers number cases eventually observe certain time frame depicted Figure 2: Nowcasted number cases disease previous image given observed fraction vignette give overview basics diseasenowcasting package. typical workflow involves following steps: Getting data. Fitting model. Evaluating model. Updating new data. tutorial focus steps reproducible manner refer specific vignettes advanced usage steps.","code":"set.seed(26758) library(diseasenowcasting) library(dplyr)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"getting-the-data","dir":"Articles","previous_headings":"","what":"1. Getting the data","title":"Introduction to diseasenowcasting","text":"Data nowcasting function either individual-level data line-list data. case least two columns Date format required: true_date report_date. true_date Refers date case happened. report_date Refers date case reported. general assume true_date always happened report_date report something hasn’t already happened.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"individual-level-data","dir":"Articles","previous_headings":"1. Getting the data > Types of data","what":"Individual-level data","title":"Introduction to diseasenowcasting","text":"individual-level data mean dataset row represents case. example, denguedat dataset included package contains individual-level data: Notice beyond two dates (true_date = \"onset_week\" report_date = \"report_week\") can additional covariates data (gender example).","code":"#Call the dataset data(\"denguedat\")  #Preview  denguedat |> head() #>   onset_week report_week gender #> 1 1990-01-01  1990-01-01   Male #> 2 1990-01-01  1990-01-01 Female #> 3 1990-01-01  1990-01-01 Female #> 4 1990-01-01  1990-01-08 Female #> 5 1990-01-01  1990-01-08   Male #> 6 1990-01-01  1990-01-15 Female"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"line-list-data","dir":"Articles","previous_headings":"1. Getting the data > Types of data","what":"Line-list data","title":"Introduction to diseasenowcasting","text":"line-list data mean dataset row represents count cases example, mpoxdat dataset included package contains line-list data: line-list individual-level data can used package. Also, package allows different time granularity. denguedat contains counts per week mpoxdat counts per day. weekly daily time frames usable diseasenowcasting.","code":"#Call the dataset data(\"mpoxdat\")  #Preview  mpoxdat |> head() #> # A tibble: 6 × 4 #> # Rowwise:  #>   dx_date    dx_report_date race                   n #>   <date>     <date>         <chr>              <int> #> 1 2022-07-08 2022-07-12     Asian                  4 #> 2 2022-07-08 2022-07-12     Black                  6 #> 3 2022-07-08 2022-07-12     Hispanic               6 #> 4 2022-07-08 2022-07-12     Non-Hispanic White     6 #> 5 2022-07-08 2022-07-13     Asian                  2 #> 6 2022-07-08 2022-07-13     Black                  3"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"fitting-the-nowcast","dir":"Articles","previous_headings":"","what":"2. Fitting the nowcast","title":"Introduction to diseasenowcasting","text":"can use nowcast() function generate nowcasts data. following example use fraction denguedat: October 1990 speed things (can use whole denguedat want): nowcast specify one true_date one corresponds report_date. Remember true_date always smaller equal report_date assumption cases can reported happening: Note example setting method variational just improve speed example. sampling method always prefered. ncast object shows characteristics fitted model: can generate plots nowcast plot function:  get predictions summary function can see add holiday effects, change priors, add options model, Advanced nowcast options. now show evaluate nowcast prepared:","code":"#Reduce the dataset denguedat_fraction <- denguedat |>    filter(report_week <= as.Date(\"1990/10/01\", format = \"%Y/%m/%d\")) #Generate the nowcast. Set verbose option t ncast <- nowcast(denguedat_fraction, true_date = \"onset_week\",                   report_date = \"report_week\",                  method = \"variational\") #<- Change to sampling when in production ncast #>  #> ── Nowcast for 1990-10-01 ── #>  #> • Column with `true_date` = \"onset_week\" #> • Column with `report_date` = \"report_week\" #> • units = \"weeks\" #>  #> ── Epidemic effects: #> The following effects are in place: #>   • week_of_year #>  #> ── Delay effects: #> No temporal effects are considered #>  #> Use the `summary` function to obtain the summary of predictions or `plot` to #> generate an image #> plot(ncast) summary(ncast) #> # A tibble: 40 × 7 #>    onset_week  mean    sd median  `5%` `95%` Strata_unified #>    <date>     <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>          #>  1 1990-01-01    61     0     61    61    61 No strata      #>  2 1990-01-08    50     0     50    50    50 No strata      #>  3 1990-01-15    44     0     44    44    44 No strata      #>  4 1990-01-22    46     0     46    46    46 No strata      #>  5 1990-01-29    39     0     39    39    39 No strata      #>  6 1990-02-05    34     0     34    34    34 No strata      #>  7 1990-02-12    24     0     24    24    24 No strata      #>  8 1990-02-19    17     0     17    17    17 No strata      #>  9 1990-02-26    17     0     17    17    17 No strata      #> 10 1990-03-05    16     0     16    16    16 No strata      #> # ℹ 30 more rows"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"evaluating-the-model","dir":"Articles","previous_headings":"","what":"3. Evaluating the model","title":"Introduction to diseasenowcasting","text":"nowcast constructed can use [backtest()] function evaluate current model predicted past vs actually observed. , example, evaluating model predicted May, June July: backtest_metrics() function calculates mean absolute error (mae), root mean squared error (rmse) weighted interval scoring (wis): can run backtest_metrics multiple nowcasts plot comparison plot","code":"#This will take a while as it refits the model several times btest <- backtest(ncast, start_date = as.Date(\"1990/05/01\"), end_date = as.Date(\"1990/07/31\"), refresh = 0) #This will take a while as it refits the model several times backtest_metrics(btest) #> # A tibble: 13 × 15 #>    model           now        horizon Strata_unified   mse se_point    ape   wis #>    <chr>           <date>       <dbl> <chr>          <dbl>    <dbl>  <dbl> <dbl> #>  1 model_2025-02-… 1990-05-07       0 No strata      15.2    231.   3.04    6.66 #>  2 model_2025-02-… 1990-05-14       0 No strata      13.8    191.   1.97    5.30 #>  3 model_2025-02-… 1990-05-21       0 No strata      16.0    255.   5.33    7.10 #>  4 model_2025-02-… 1990-05-28       0 No strata      14.6    212.   2.91    5.84 #>  5 model_2025-02-… 1990-06-04       0 No strata      15.8    251.   5.28    6.87 #>  6 model_2025-02-… 1990-06-11       0 No strata      10.6    112.   1.76    3.72 #>  7 model_2025-02-… 1990-06-18       0 No strata      13.9    195.   2.32    5.63 #>  8 model_2025-02-… 1990-06-25       0 No strata       6.21    38.5  0.564   2.04 #>  9 model_2025-02-… 1990-07-02       0 No strata      10.0    101.   1.67    3.63 #> 10 model_2025-02-… 1990-07-09       0 No strata       6.70    44.8  0.837   2.14 #> 11 model_2025-02-… 1990-07-16       0 No strata       9.60    92.1  1.60    3.47 #> 12 model_2025-02-… 1990-07-23       0 No strata       7.48    55.9  1.07    2.44 #> 13 model_2025-02-… 1990-07-30       0 No strata       1.40     1.97 0.0826  1.86 #> # ℹ 7 more variables: overprediction <dbl>, underprediction <dbl>, #> #   dispersion <dbl>, bias <dbl>, interval_coverage_50 <dbl>, #> #   interval_coverage_90 <dbl>, ae_median <dbl> #p<-backtest_metrics(btest) #plot(p)  #ncast2 <- nowcast(denguedat_fraction, true_date = \"onset_week\",  #                 report_date = \"report_week\", #                method = \"variational\", dist = \"Normal\")  #btest2 <- backtest(ncast2, dates_to_test = as.Date(\"1990-06-11\"), # #comparison <- backtest_metrics(btest, btest2) #plot(comparison)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/diseasenowcasting.html","id":"updating-with-new-data","dir":"Articles","previous_headings":"","what":"4. Updating with new data","title":"Introduction to diseasenowcasting","text":"update() function takes existing nowcast updates new_data generate predictions recent now. example, consider now denguedat information one additional new week: can update nowcast new data: operations :","code":"#This new dataset contains a new additional week denguedat_fraction_updated <- denguedat |>    filter(report_week <= as.Date(\"1990/10/08\", format = \"%Y/%m/%d\")) ncast_2 <- update(ncast, new_data = denguedat_fraction_updated) plot(ncast_2)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rodrigo Zepeda-Tello. Author, maintainer. Rami Yaari. Author. Matteo Perini. Author. Tal Robin. Contributor. Teresa Yamana. Contributor. Jeffrey Shaman. Contributor. Columbia University City New York. Copyright holder, funder.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zepeda-Tello R, Yaari R, Perini M (2025). diseasenowcasting: Nowcasting disease onset cases given report dates.","code":"@Manual{,   title = {{diseasenowcasting}: Nowcasting disease onset cases given report dates},   author = {Rodrigo Zepeda-Tello and Rami Yaari and Matteo Perini},   year = {2025}, }"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"diseasenowcasting-","dir":"","previous_headings":"","what":"diseasenowcasting package","title":"diseasenowcasting package","text":"diseasenowcasting R package nowcasting time series epidemiological cases. Epidemiologic surveillance tools usually intrinsic delay true date event report date event. examples include true date symptom onset testing time report date corresponds case registered system. diseasenowcasting uses Bayesian structural time series models (via probabilistic programming language Stan) infer cases yet reported thus providing prediction final number cases. ⚠️ diseasenowcasting currently active development interface might change final version.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"diseasenowcasting package","text":"install diseasenowcasting need use remotes package.","code":"#install.packages(\"remotes\") # <- Uncomment if you have not installed the `remotes` package remotes::install_github(\"RodrigoZepeda/diseasenowcasting\", dependencies = c(\"Imports\",\"Suggests\"))"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"diseasenowcasting package","text":"example use denguedat dataset comes package. [nowcast()] function performs nowcast. things required true_date report_date strata (exists). summary plot options allow use predictions:","code":"set.seed(6728) library(diseasenowcasting) library(dplyr) #Load example dataset data(denguedat) #Use just a subsample of the data for the example denguedat <- denguedat |>    filter(report_week <= as.Date(\"1990/08/01\", format = \"%Y/%m/%d\"))  #Run the nowcast model stratified by gender. Refresh = 0 makes it quiet ncast <- nowcast(denguedat, true_date = \"onset_week\", report_date = \"report_week\",                         strata = \"gender\", refresh = 0) #Create a nice plot for the predictions plot(ncast, datesbrakes = \"1 month\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"diseasenowcasting package","text":"can read following articles -depth introduction package: introduction package: provides overview main functions. Advanced nowcast options: provides -depth look nowcast() function options. Comparison methods: provides comparison terms metrics nowcasting packages.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"developing","dir":"","previous_headings":"","what":"Developing","title":"diseasenowcasting package","text":"interested developing package, downloading repository might need run order C++ files generated specific system.","code":"rstantools::rstan_config() devtools::load_all(\".\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"developing-issues-with-rstudio","dir":"","previous_headings":"Developing","what":"Developing issues with RStudio","title":"diseasenowcasting package","text":"RStudio might error message loading package workaround include following line configure configure.win files: , use R terminal run: Afterwards, new R session RStudio can finally load:","code":"Error file too big echo \"PKG_CXXFLAGS += -Wa,-mbig-obj\" >> ./src/Makevars echo \"PKG_CXXFLAGS += -Wa,-mbig-obj\" >> ./src/Makevars.win ⁠pkgbuild::compile_dll(debug = FALSE) devtools::load_all(\".\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/aggregate_backtest_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"aggregate_backtest_summary — aggregate_backtest_summary","title":"aggregate_backtest_summary — aggregate_backtest_summary","text":"Aggregate backtest summary removing stratas. utility function comparing results stratified model non stratified model. results stratified model backtest summary aggregated calling backtest_metrics together backtest summary non-stratified model.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/aggregate_backtest_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aggregate_backtest_summary — aggregate_backtest_summary","text":"","code":"aggregate_backtest_summary(backtest_summary, remove_strata)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/aggregate_backtest_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aggregate_backtest_summary — aggregate_backtest_summary","text":"backtest_summary results backtest() remove_strata vector strata columns found inside backtest_summary remove","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/aggregate_backtest_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aggregate_backtest_summary — aggregate_backtest_summary","text":"aggregated backtest_summary","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/aggregate_backtest_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aggregate_backtest_summary — aggregate_backtest_summary","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the model checking the model fit for two dates: btest <- backtest(ncast, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")), model_name=\"model_global\")  # Run a nowcast stratified by gender ncast_strat <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now, strata = c(\"gender\"),   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the stratified model btest_strat <- backtest(ncast_strat, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")), model_name=\"model_strat\")  # Aggregates the backtest results for the stratified model btest_strat_agg <- aggregate_backtest_summary(btest_strat, \"gender\")  # Compare the metrics of the non-stratified model with the aggregated stratified model metrics = backtest_metrics(btest, btest_strat_agg)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/arma.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the autorregresive and moving average components — arma","title":"Control the autorregresive and moving average components — arma","text":"Controls either autoregresive AR() moving-average MA() components epidemic delay process","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/arma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control the autorregresive and moving average components — arma","text":"","code":"AR(epidemic_trend = 1, delay_trend = 1)  MA(epidemic_errors = 1)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/arma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control the autorregresive and moving average components — arma","text":"epidemic_trend Integer. Degree epidemic trend. Refers p parameter ARMA(p,q) epidemic process. delay_trend Integer. Degree delay trend. Refers q parameter ARMA(p,q) delay process. epidemic_errors Integer. Degree errors epidemic trend. Refers q parameter ARMA(p,q) epidemic process.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/arma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the autorregresive and moving average components — arma","text":"","code":"AR(2,2) #> $mu_p #> [1] 2 #>  #> $nu_p #> [1] 2 #>  MA(1) #> $mu_q #> [1] 1 #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms an array into a list of lists — array_to_list","title":"Transforms an array into a list of lists — array_to_list","text":"Function takes array transforms lists lists mainly interacting Rcpp::cppFunction().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms an array into a list of lists — array_to_list","text":"","code":"array_to_list(my_array, last_dim_as = \"vector\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms an array into a list of lists — array_to_list","text":"my_array array transform last_dim_as Either 'vector', 'matrix'  'scalar'  depending want last dimension","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms an array into a list of lists — array_to_list","text":"list lists structure array","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Backtest — backtest","title":"Backtest — backtest","text":"Compute historical nowcasts given time period","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Backtest — backtest","text":"","code":"backtest(   ncast,   start_date = infer_start_date(ncast),   end_date = infer_end_date(ncast, start_date = start_date),   stride = 1,   subsample = NULL,   dates_to_test = generate_nowcast_dates(start_date, end_date, ncast, stride, subsample =     subsample),   retrain = 1,   quantiles = c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975),   min_horizon = 0,   model_name = NULL,   refresh = 250 * rlang::is_interactive(),   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Backtest — backtest","text":"ncast nowcaster object generated nowcast() start_date object datatype Date indicating date start historical nowcasting (first 'now' date nowcast). end_date object datatype Date indicating date end historical nowcasting (last 'now' date nowcast). stride Integer variable indicating number time steps two consecutive nowcasts. Default 1 means nowcasting date start end, subsample Either NULL integer specifying large subsample dates_to_test use backtest. NULL (default) uses dates. dates_to_test Specific values moments now test nowcast. dates_to_test given overrides start_date, end_date stride. retrain Integer variable indicating number iterations retrain model. Default 1 means retraining model nowcast. IMPLEMENTED YET - currently retrained time step. quantiles list quantiles 0 1 defining quantile estimates returned min_horizon minimum horizon (value <= 0) keep nowcast estimates (e.g. min_horizon=-5 means estimates previous 5 time steps now kept) model_name model name used identify results backtest given parameters subsequent call backtest_metrics() refresh Refresh parameter rstan::sampling() ... Additional arguments pass update.nowcaster()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Backtest — backtest","text":"tibble many rows dates_to_test given. row represents different now following columns: now: date nowcasted true_date: column corresponding true_date (true_date's name). mean: mean estimate nowcast. sd: standard deviation estimate nowcast. median: median estimate nowcast. x%: Quantile columns corresponding estimated xth quantile. Strata_unified: column containing strata modeled. observed: value actually obnserved date model: name fitted model","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Backtest — backtest","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the model checking the model fit for two dates: btest <- backtest(ncast, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")))  #The following examples are slow: if (FALSE) { # \\dontrun{ # Run a backtest for the model automatically selecting 3 possible dates at random btest2 <- backtest(ncast, subsample = 3)  # Run a backtest for the model using all possible dates btest3 <- backtest(ncast) } # }"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"backtest_metrics — backtest_metrics","title":"backtest_metrics — backtest_metrics","text":"Compute metrics given backtest results","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"backtest_metrics — backtest_metrics","text":"","code":"backtest_metrics(..., metrics = c(\"mae\", \"rmse\", \"ape\", \"wis\"), horizons = 0)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"backtest_metrics — backtest_metrics","text":"... Results calls backtest. metrics list metrics calculated. Currently supporting: 'mae' (mean absolute error), 'rmse' (root mean squared error), 'ape' (absolute percent error) 'wis' (weighted interval score) horizons vector horizons metrics calculated. Default calculate metrics horizon 0 (nowcast).","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/backtest_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"backtest_metrics — backtest_metrics","text":"","code":"#These examples require the `scoringutils` function if (requireNamespace(\"scoringutils\", quietly = TRUE)){  # Load the data data(denguedat)  # In this example we will test two models now    <- as.Date(\"1990-10-01\") ncast1 <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  ncast2 <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10, dist = \"Normal\")  # Run a backtest for each of the models btest1 <- backtest(ncast1, dates_to_test = as.Date(\"1990-06-11\"), model_name = \"Classic\") btest2 <- backtest(ncast2, dates_to_test = as.Date(\"1990-06-11\"), model_name = \"Normal\")  # Compare the models to select the best model backtest_metrics(btest1, btest2) } #> # A tibble: 2 × 15 #>   model   now        horizon Strata_unified   mse se_point   ape   wis #>   <chr>   <date>       <dbl> <chr>          <dbl>    <dbl> <dbl> <dbl> #> 1 Classic 1990-06-11       0 No strata       24.2     587.  4.04 13.2  #> 2 Normal  1990-06-11       0 No strata       13.2     174.  2.20  5.52 #> # ℹ 7 more variables: overprediction <dbl>, underprediction <dbl>, #> #   dispersion <dbl>, bias <dbl>, interval_coverage_50 <dbl>, #> #   interval_coverage_90 <dbl>, ae_median <dbl>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_ape.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_ape — calc_ape","title":"calc_ape — calc_ape","text":"Calculates absolute percent error (ape)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_ape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_ape — calc_ape","text":"","code":"calc_ape(backtest_summary)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_ape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_ape — calc_ape","text":"backtest_summary results backtest call","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_ape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_ape — calc_ape","text":"Absolute Percent Error runs backtest().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_ape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calc_ape — calc_ape","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the model checking the model fit for two dates: btest <- backtest(ncast, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")))  # Get the rmse with the scoring utils package if (requireNamespace(\"scoringutils\", quietly = TRUE)){   calc_ape(btest) } #>                                   model        now horizon Strata_unified #>                                  <char>     <Date>   <num>         <char> #> 1: model_2025-02-20_21h10m37s_134101439 1990-06-11       0      No strata #> 2: model_2025-02-20_21h10m37s_134101439 1990-06-18       0      No strata #>         ape #>       <num> #> 1: 3.888167 #> 2: 4.550500"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_mae.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_mae — calc_mae","title":"calc_mae — calc_mae","text":"Calculates mean absolute error (mae)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_mae — calc_mae","text":"","code":"calc_mae(backtest_summary)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_mae — calc_mae","text":"backtest_summary results backtest()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_mae — calc_mae","text":"Mean Absolute Error runs backtest().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_mae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calc_mae — calc_mae","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the model checking the model fit for two dates: btest <- backtest(ncast, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")))  # Get the mean absolute error with the scoringutils package if (requireNamespace(\"scoringutils\", quietly = TRUE)){   calc_mae(btest) } #>                                   model        now horizon Strata_unified #>                                  <char>     <Date>   <num>         <char> #> 1: model_2025-02-20_21h10m39s_774518663 1990-06-11       0      No strata #> 2: model_2025-02-20_21h10m39s_774518663 1990-06-18       0      No strata #>       mse #>     <num> #> 1: 24.457 #> 2: 27.108"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_rmse — calc_rmse","title":"calc_rmse — calc_rmse","text":"Calculates root mean squared error (rmse)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_rmse — calc_rmse","text":"","code":"calc_rmse(backtest_summary)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_rmse — calc_rmse","text":"backtest_summary results backtest call","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_rmse — calc_rmse","text":"Root Mean Squared Error runs backtest().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calc_rmse — calc_rmse","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the model checking the model fit for two dates: btest <- backtest(ncast, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")))  # Get the rmse with the scoring utils package if (requireNamespace(\"scoringutils\", quietly = TRUE)){   calc_rmse(btest) } #>                                    model        now horizon Strata_unified #>                                   <char>     <Date>   <num>         <char> #> 1: model_2025-02-20_21h10m41s_1158282656 1990-06-11       0      No strata #> 2: model_2025-02-20_21h10m41s_1158282656 1990-06-18       0      No strata #>    se_point #>       <num> #> 1: 587.1414 #> 2: 740.6562"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_wis.html","id":null,"dir":"Reference","previous_headings":"","what":"calc_wis — calc_wis","title":"calc_wis — calc_wis","text":"Calculates weighted interval score (wis)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_wis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calc_wis — calc_wis","text":"","code":"calc_wis(backtest_summary)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_wis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calc_wis — calc_wis","text":"backtest_summary results backtest call","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_wis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calc_wis — calc_wis","text":"weighted interval score runs backtest().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/calc_wis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calc_wis — calc_wis","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10)  # Run a backtest for the model checking the model fit for two dates: btest <- backtest(ncast, dates_to_test = c(as.Date(\"1990-06-11\"), as.Date(\"1990-06-18\")))  # Get the rmse with the scoring utils package if (requireNamespace(\"scoringutils\", quietly = TRUE)){   calc_wis(btest) } #>    horizon Strata_unified                                 model        now #>      <num>         <char>                                <char>     <Date> #> 1:       0      No strata model_2025-02-20_21h10m43s_2120140673 1990-06-11 #> 2:       0      No strata model_2025-02-20_21h10m43s_2120140673 1990-06-18 #>          wis overprediction underprediction dispersion  bias #>        <num>          <num>           <num>      <num> <num> #> 1: 12.943036      11.000000               0   1.943036  1.00 #> 2:  8.921786       5.285714               0   3.636071  0.95 #>    interval_coverage_50 interval_coverage_90 ae_median #>                   <num>                <num>     <num> #> 1:                    0                    0        23 #> 2:                    0                    0        17"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the onset and report dates — check_date_columns","title":"Check the onset and report dates — check_date_columns","text":"Check onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the onset and report dates — check_date_columns","text":"","code":"check_date_columns(.disease_data, true_date, report_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the onset and report dates — check_date_columns","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata true_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the onset and report dates — check_date_columns","text":".disease_data data.frame filtered reports onset.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the now argument to be date — check_now","title":"Check the now argument to be date — check_now","text":"Check now argument date","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the now argument to be date — check_now","text":"","code":"check_now(.disease_data, now, true_date, report_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the now argument to be date — check_now","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata now object datatype Date indicating date perlform nowcast. true_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the now argument to be date — check_now","text":"(invisibly) TRUE now date achievable","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the proportion_reported argument — check_proportion_reported","title":"Check the proportion_reported argument — check_proportion_reported","text":"Check proportion_reported argument","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the proportion_reported argument — check_proportion_reported","text":"","code":"check_proportion_reported(proportion_reported)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the proportion_reported argument — check_proportion_reported","text":"proportion_reported decimal greater 0 less equal 1 representing proportion cases expected reported. Default: 1, e.g. 100 percent cases eventually reported. asymptomatic diseases cases ever reported, outbreaks severe -reporting expected, change less 1.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the proportion_reported argument — check_proportion_reported","text":"(invisibly) TRUE proportion valid","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_same_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check same columns — check_same_columns","title":"Check same columns — check_same_columns","text":"Checks given list dataframes contains columns","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_same_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check same columns — check_same_columns","text":"","code":"check_same_columns(df_list)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_same_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check same columns — check_same_columns","text":"df_list list dataframes","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_temporal_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the temporal_effect argument among the options — check_temporal_effect","title":"Check the temporal_effect argument among the options — check_temporal_effect","text":"Check temporal_effect argument among options","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_temporal_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the temporal_effect argument among the options — check_temporal_effect","text":"","code":"check_temporal_effect(t_effect)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_temporal_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the temporal_effect argument among the options — check_temporal_effect","text":"t_effect Either \"auto\" infer temporal effect temporal_effect object constructed temporal_effects() function.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_temporal_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the temporal_effect argument among the options — check_temporal_effect","text":"(invisibly) TRUE temporal effect valid","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the units argument among the options — check_units","title":"Check the units argument among the options — check_units","text":"Check units argument among options","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the units argument among the options — check_units","text":"","code":"check_units(units)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the units argument among the options — check_units","text":"units Time scale reporting. Options: \"1 day\", \"1 week\".","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the units argument among the options — check_units","text":"(invisibly) TRUE units valid","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/control_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default STAN control parameters for nowcasting — control_default","title":"Return the default STAN control parameters for nowcasting — control_default","text":"function estimates default control parameters running rstan::sampling().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/control_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default STAN control parameters for nowcasting — control_default","text":"","code":"control_default()"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/control_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the default STAN control parameters for nowcasting — control_default","text":"list default control parameters running sampling algorithm.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/datecol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the date column if column is in the data. — datecol","title":"Get the date column if column is in the data. — datecol","text":"Get date column column data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/datecol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the date column if column is in the data. — datecol","text":"","code":"datecol(.date_data, .colname)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/datecol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the date column if column is in the data. — datecol","text":".date_data data frame .colname Column check whether date data","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/datecol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the date column if column is in the data. — datecol","text":"column .colname column; empty vector.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Default y link — default_y_link","title":"Default y link — default_y_link","text":"Return default links model","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default y link — default_y_link","text":"","code":"default_y_link(dist)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default y link — default_y_link","text":"dist Distribution. Either \"NegativeBinomial\", \"Poisson\", \"Normal\", \"Student\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default y link — default_y_link","text":"name default link distribution","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default y link — default_y_link","text":"functions return corresponding default links data model","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_x_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Default x link — default_x_link","title":"Default x link — default_x_link","text":"Default x link","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/default_x_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default x link — default_x_link","text":"","code":"default_x_link(dist)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":null,"dir":"Reference","previous_headings":"","what":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"Surveillance data CDC Division Vector-Borne Diseases. 1990-2010 case reporting data included.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"","code":"data(denguedat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"data frame.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"row represents case columns indicating following: onset_week:  week symptom onset. report_week: week case report. gender: gender infected individual (randomly assigned 0.5:0.5 probability \"Male\"/\"Female\").","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"Data originally NobBS package. onset_week report_week correspond actual observed data gender constructed exclusively examples NobBS. synthetic (simulated) variable correspond reality.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"MCGOUGH, Sarah F., et al. Nowcasting Bayesian Smoothing: flexible, generalizable model real-time epidemic tracking. PLoS computational biology, 2020, vol. 16, 4, p. e1007735.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"denguedat: Dengue fever individual-level reporting data from Puerto Rico — denguedat","text":"","code":"data(denguedat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/diseasenowcasting-package.html","id":null,"dir":"Reference","previous_headings":"","what":"diseasenowcasting: Nowcasting disease onset cases given report dates — diseasenowcasting-package","title":"diseasenowcasting: Nowcasting disease onset cases given report dates — diseasenowcasting-package","text":"Implements bayesian state-space models nowcast incident cases disease given report dates controlling strata covariates.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/diseasenowcasting-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"diseasenowcasting: Nowcasting disease onset cases given report dates — diseasenowcasting-package","text":"Maintainer: Rodrigo Zepeda-Tello rzepeda17@gmail.com (ORCID) Authors: Rami Yaari (ORCID) Matteo Perini (ORCID) contributors: Tal Robin (ORCID) [contributor] Teresa Yamana (ORCID) [contributor] Jeffrey Shaman [contributor] Columbia University City New York [copyright holder, funder]","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/generate_nowcast_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate nowcast dates — generate_nowcast_dates","title":"Generate nowcast dates — generate_nowcast_dates","text":"Generates dates backtesting procedure given start_date, end_date stride","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/generate_nowcast_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate nowcast dates — generate_nowcast_dates","text":"","code":"generate_nowcast_dates(start_date, end_date, ncast, stride, subsample = NULL)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/generate_nowcast_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate nowcast dates — generate_nowcast_dates","text":"start_date start_date end_date end_date ncast nowcaster object generated nowcast() stride number time steps two consecutive nowcasts subsample integer, much subsample dates; NULL runs dates.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_distribution_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for setting the distribution from words to number — get_distribution_number","title":"Function for setting the distribution from words to number — get_distribution_number","text":"Function setting distribution words number","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_distribution_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for setting the distribution from words to number — get_distribution_number","text":"","code":"get_distribution_number(dist)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_distribution_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for setting the distribution from words to number — get_distribution_number","text":"dist Distribution. Either \"NegativeBinomial\", \"Poisson\", \"Normal\", \"Student\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_distribution_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for setting the distribution from words to number — get_distribution_number","text":"number distribution code Stan's data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_link_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for sets the link required — get_link_number","title":"Function for sets the link required — get_link_number","text":"following links implemented: identity: g(x) = x log: g(x) = log(x) softplus: g(x) = k*log(1 + exp(x/k)) dhyperbolic: g(x) = cx/2 + sqrt( (cx/2)^2 + k)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_link_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for sets the link required — get_link_number","text":"","code":"get_link_number(link)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_link_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for sets the link required — get_link_number","text":"number distribution code Stan's data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for mapping the priors to numbers — get_prior_code_stan","title":"Function for mapping the priors to numbers — get_prior_code_stan","text":"Takes prior one listed priors.stan returns number codes ","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for mapping the priors to numbers — get_prior_code_stan","text":"","code":"get_prior_code_stan(prior_name)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_stan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for mapping the priors to numbers — get_prior_code_stan","text":"prior_name (character) name prior distribution. Can one following: jeffreys (non-informative), standard_normal, normal, student_t, cauchy, exponential, gamma, inverse_gamma, lognormal, weibull, frechet, double_exponential, rayleigh, loglogistic, gumbel.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_priors_from_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for setting the initial values from priors for simulation — get_priors_from_init","title":"Function for setting the initial values from priors for simulation — get_priors_from_init","text":"Function setting initial values priors simulation","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_priors_from_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for setting the initial values from priors for simulation — get_priors_from_init","text":"","code":"get_priors_from_init(   priors,   num_strata,   num_delays,   num_steps,   autoregresive,   moving_average )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_priors_from_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for setting the initial values from priors for simulation — get_priors_from_init","text":"priors list nowcast priors. can use set_priors() change priors function (see details) num_strata Integer. Number strata population. Default 2. num_delays Integer. Number delay strata. Default 8. num_steps Integer. Number time steps simulate. Default 10. autoregresive AR() object autoregresive components epidemic delay processes. moving_average MA() object moving average component epidemic delay processes.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_priors_from_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for setting the initial values from priors for simulation — get_priors_from_init","text":"init function generates initial values based upon priors send rstan sampling optimization algorithm.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/has_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the date column is in the date data — has_date","title":"Check whether the date column is in the date data — has_date","text":"Check whether date column date data","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/has_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the date column is in the date data — has_date","text":"","code":"has_date(.date_data, .colname)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/has_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the date column is in the date data — has_date","text":".date_data data frame .colname Column check whether date data","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/has_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether the date column is in the date data — has_date","text":"Either true false whether .colname .date_data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer the data_type — infer_data_type","title":"Automatically infer the data_type — infer_data_type","text":"Infers whether data line-data count-data whether () column named n","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer the data_type — infer_data_type","text":"","code":"infer_data_type(.disease_data, data_type, verbose = FALSE)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer the data_type — infer_data_type","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata data_type Either linedata row represents test counts column named n counts many tests onset report dates verbose Boolean. Whether print data type assumptions.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer the data_type — infer_data_type","text":"Whether data count linelist","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer the dates for backtesting — infer_date","title":"Infer the dates for backtesting — infer_date","text":"Infers start (initial)  end date one needs consider backtesting","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer the dates for backtesting — infer_date","text":"","code":"infer_start_date(ncast)  infer_end_date(ncast, start_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer the dates for backtesting — infer_date","text":"ncast nowcaster object generated nowcast() start_date object datatype Date indicating date start historical nowcasting (first 'now' date nowcast).","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer the dates for backtesting — infer_date","text":"date backtesting possible start end (respectively)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer which value is now. — infer_now","title":"Automatically infer which value is now. — infer_now","text":"Function returns maximum onset date .disease_data now = NULL. Else check whether now possible data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer which value is now. — infer_now","text":"","code":"infer_now(.disease_data, now, true_date, report_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer which value is now. — infer_now","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata now object datatype Date indicating date perlform nowcast. true_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer which value is now. — infer_now","text":"now value nowcast() can last date data specified user","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_temporal_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer the temporal effect based on the units — infer_temporal_effect","title":"Automatically infer the temporal effect based on the units — infer_temporal_effect","text":"Function returns temporal_effect object t_effect auto. Else checks whether object temporal effect whether makes sense given units.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_temporal_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer the temporal effect based on the units — infer_temporal_effect","text":"","code":"infer_temporal_effect(   t_effect,   units,   .default = c(\"delay\", \"epidemic\", \"other\") )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_temporal_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer the temporal effect based on the units — infer_temporal_effect","text":"t_effect Either \"auto\" infer temporal effect temporal_effect object constructed temporal_effects() function. units Either \"weeks\" \"days\" weekly daily data. .default character indicating whether default delay epidemic process (empty effect)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_temporal_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer the temporal effect based on the units — infer_temporal_effect","text":"temporal_effect object model","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer which value is units. — infer_units","title":"Automatically infer which value is units. — infer_units","text":"Function returns whether data daily, weekly, monthly yearly date_column.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer which value is units. — infer_units","text":"","code":"infer_units(.disease_data, units, date_column)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer which value is units. — infer_units","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata units Time scale reporting. Options: \"1 day\", \"1 week\". date_column Name column .disease_data contains dates.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer which value is units. — infer_units","text":"Whether data's units days weeks","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/is_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a date is a weekday vs weekend — is_weekday","title":"Check whether a date is a weekday vs weekend — is_weekday","text":"Function checks whether date object weekday weekend.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/is_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a date is a weekday vs weekend — is_weekday","text":"","code":"is_weekday(date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/is_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a date is a weekday vs weekend — is_weekday","text":"date date object","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/is_weekday.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check whether a date is a weekday vs weekend — is_weekday","text":"https://stackoverflow.com//60346779/5067372","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/is_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a date is a weekday vs weekend — is_weekday","text":"","code":"is_weekday(as.Date(\"2020-04-22\")) #> [1] TRUE is_weekday(as.Date(\"2020-04-19\")) #> [1] FALSE"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":null,"dir":"Reference","previous_headings":"","what":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"Surveillance data New York City Health Department’s mpox surveillance database.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"","code":"data(mpoxdat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"data frame.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"line-list data row representing case counts. columns follows: dx_date: first positive mpox laboratory result dx_report_date: first positive mpox laboratory result received NYC Health Department n: case count individuals within dates. race: race corresponding cases. Race randomly assigned probabilities \"Non-Hispanic White\" = 0.309, \"Hispanic\" = 0.283, \"Black\" = 0.202, \"Asian\" = 0.156, \"\" = 0.05 follow reported US Census.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"dx_date, dx_report_date n correspond actual observed data race constructed exclusively examples package. synthetic (simulated) variable correspond reality.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"ROHRER, Rebecca, et al. Nowcasting Monitor Real-Time Mpox Trends 2022 Outbreak New York City: Evaluation Using Reportable Disease Data Stratified Race Ethnicity. Online Journal Public Health Informatics, 2025, vol. 17, 1, p. e56495.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/mpoxdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"mpoxdat: M-pox line-list reporting data for New York City — mpoxdat","text":"","code":"data(mpoxdat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcasting — nowcast","title":"Nowcasting — nowcast","text":"Function uses rstan::sampling() engine generate nowcasts.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcasting — nowcast","text":"","code":"nowcast(   .disease_data,   true_date,   report_date,   strata = NULL,   temporal_effects_delay = \"auto\",   temporal_effects_epidemic = \"auto\",   has_cycle = FALSE,   autoregresive = AR(),   moving_average = MA(),   dist = c(\"NegativeBinomial\", \"Poisson\", \"Normal\", \"Student\"),   link_x = default_x_link(dist),   link_y = default_y_link(dist),   now = NULL,   units = NULL,   max_delay = Inf,   prior_only = FALSE,   proportion_reported = 1,   normalize_data = (dist[1] %in% c(\"Normal\", \"Student\")),   refresh = 250 * rlang::is_interactive(),   control = control_default(),   method = c(\"sampling\", \"variational\", \"optimization\"),   priors = set_priors(),   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcasting — nowcast","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata true_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. temporal_effects_delay Either \"auto\" temporal_effects() object specifying effects influence delay. temporal_effects_epidemic Either \"auto\" temporal_effects() object specifying effects influence epidemic process (delay independent). has_cycle Boolean. Whether include cycle component model. autoregresive AR() object autoregresive components epidemic delay processes. moving_average MA() object moving average component epidemic delay processes. dist Distribution. Either \"NegativeBinomial\", \"Poisson\", \"Normal\", \"Student\" link_x Link function epidemic process (see section links). link_y Link function data (see section links). now object datatype Date indicating date perlform nowcast. units Time scale reporting. Options: \"1 day\", \"1 week\". max_delay Maximum possible delay observed considered estimation delay distribution (numeric). Default: Inf prior_only Boolean variable indicating whether compute prior distribution proportion_reported decimal greater 0 less equal 1 representing proportion cases expected reported. Default: 1, e.g. 100 percent cases eventually reported. asymptomatic diseases cases ever reported, outbreaks severe -reporting expected, change less 1. normalize_data Whether data y normalized (substracted mean divided standard deviation) fitting. option valid using continuous model (Normal Student). refresh Refresh parameter rstan::sampling() control Control parameter rstan::sampling() method Fitting method either sampling (recommended inference), variational (recommended testing) optimization. sampling method calls rstan::sampling() variational calls rstan::vb() optimization calls rstan::optimizing() priors list nowcast priors. can use set_priors() change priors function (see details) ... Additional arguments pass rstan::sampling()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nowcasting — nowcast","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\") nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10) #>  #> ── Nowcast for 1990-10-01 ── #>  #> • Column with `true_date` = \"onset_week\" #> • Column with `report_date` = \"report_week\" #> • units = \"weeks\" #>  #> ── Epidemic effects:  #> The following effects are in place: #>   • week_of_year #>  #> ── Delay effects:  #> No temporal effects are considered #>  #> Use the `summary` function to obtain the summary of predictions or `plot` to #> generate an image #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcasting with the rstan engine — nowcast.rstan","title":"Nowcasting with the rstan engine — nowcast.rstan","text":"Nowcasting rstan engine","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcasting with the rstan engine — nowcast.rstan","text":"","code":"nowcast.rstan(   .disease_data,   .date_epidemic,   .date_delay,   true_date,   report_date,   num_steps,   num_delays,   num_strata,   dist,   link_x,   link_y,   normalize_data,   has_cycle,   autoregresive,   moving_average,   prior_only,   control,   refresh,   method,   priors,   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcasting with the rstan engine — nowcast.rstan","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata true_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" num_steps Number time steps run model num_delays Number delays consider model num_strata Number strata model dist Distribution. Either \"NegativeBinomial\", \"Poisson\", \"Normal\", \"Student\" link_x Link function epidemic process (see section links). link_y Link function data (see section links). normalize_data Whether data y normalized (substracted mean divided standard deviation) fitting. option valid using continuous model (Normal Student). has_cycle Boolean. Whether include cycle component model. autoregresive AR() object autoregresive components epidemic delay processes. moving_average MA() object moving average component epidemic delay processes. prior_only Boolean variable indicating whether compute prior distribution control Control parameter rstan::sampling() refresh Refresh parameter rstan::sampling() method Fitting method either sampling (recommended inference), variational (recommended testing) optimization. sampling method calls rstan::sampling() variational calls rstan::vb() optimization calls rstan::optimizing() priors list nowcast priors. can use set_priors() change priors function (see details) ... Additional arguments pass rstan::sampling()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.backtest_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"plot.backtest_metrics — plot.backtest_metrics","title":"plot.backtest_metrics — plot.backtest_metrics","text":"Create plot compare metrics calculated backtest_metrics()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.backtest_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot.backtest_metrics — plot.backtest_metrics","text":"","code":"# S3 method for class 'backtest_metrics' plot(x, ..., metric = \"wis\", horizons = 0, datesbrakes = NULL)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.backtest_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot.backtest_metrics — plot.backtest_metrics","text":"x results calls backtest_metrics() ... arguments passed generic plot function. metric metric display. Specify one. Default = \"wis\" horizons vector horizons metrics calculated. Default calculate metrics horizon 0 (nowcast). datesbrakes string giving distance x-axis breaks specified, one label per bar. valid examples : \"2 weeks\", \"10 years\", 'sec', 'min', 'hour', 'day', 'week', 'month', 'year', optionally followed 's'.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.backtest_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot.backtest_metrics — plot.backtest_metrics","text":"","code":"#' These examples require the `scoringutils` package if (requireNamespace(\"scoringutils\", quietly = TRUE)) {   # Load the data   data(denguedat)   # In this example, we will test two models   now    <- as.Date(\"1990-10-01\")   ncast1 <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,                      method = \"optimization\", seed = 2495624, iter = 10)   ncast2 <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,                     method = \"optimization\", seed = 2495624, iter = 10,                     dist = \"Normal\")   # Run a backtest for each of the models   btest1 <- backtest(ncast1, dates_to_test = as.Date(\"1990-06-11\"),                      model_name = \"Classic\")   btest2 <- backtest(ncast2, dates_to_test = as.Date(\"1990-06-11\"),                       model_name = \"Normal\")   # Compare the models to select the best model   comparison <- backtest_metrics(btest1, btest2)   # plot the comparison   plot(comparison)   # specify metric and horizons   # plot(comparison, metric = \"mse\", horizons = c(-1, 0)) }"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.nowcaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot your nowcast — plot.nowcaster","title":"Plot your nowcast — plot.nowcaster","text":"Create barplots show real cases predictions function diseasenowcasting::nowcast()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.nowcaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot your nowcast — plot.nowcaster","text":"","code":"# S3 method for class 'nowcaster' plot(   x,   color = \"#5F7E62\",   datesbrakes = NULL,   casesbrakes = 10,   rowsfacet = NULL,   colsfacet = NULL,   quantiles = c(0.05, 0.95),   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.nowcaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot your nowcast — plot.nowcaster","text":"x output nowcast() function color string indicating color barplots. Works default R colors grDevices::colors(). Hex color codes works well. Best results darker colors. datesbrakes string giving distance x-axis breaks specified, one label per bar. valid examples : \"2 weeks\", \"10 years\", 'sec', 'min', 'hour', 'day', 'week', 'month', 'year', optionally followed 's'. casesbrakes Desired number y-axis breaks. may get slightly fewer breaks requested due dynamic adaptation. rowsfacet Number rows arranging facets using ggplot2::facet_wrap(). allows manual control layout multiple strata plot. colsfacet Number columns arranging facets using ggplot2::facet_wrap(). allows manual control layout multiple strata plot. quantiles vector two values specify quantiles error bars. ... Additional parameters pass plot","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.nowcaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot your nowcast — plot.nowcaster","text":"ggplot2::ggplot2() object barplots show real cases predictions function nowcast(). creates facet strata.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/plot.nowcaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot your nowcast — plot.nowcaster","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now <- as.Date(\"1990-10-01\")  # perform nowcasting ncast <- nowcast(denguedat, \"onset_week\", \"report_week\",strata = \"gender\",                       now = now, method = \"optimization\",                       seed = 2495624, iter = 10                       )   # plot results requires ggplot2 package if (!requireNamespace(\"ggplot2\", quietly = TRUE)){   plot(ncast)    # other plotting options   plot(ncast, rowsfacet = 2,        datesbrakes = \"2 weeks\", casesbrakes = 15,        color = \"deepskyblue3\") }"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess the dates to create a covariate matrix — preprocess_dates","title":"Preprocess the dates to create a covariate matrix — preprocess_dates","text":"Takes data.frame generated preprocess_for_nowcast() generates new data.frame time covariates codified model","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess the dates to create a covariate matrix — preprocess_dates","text":"","code":"preprocess_dates(.disease_data, date, temporal_effects)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess the dates to create a covariate matrix — preprocess_dates","text":".disease_data data.frame cases exported preprocess_for_nowcast() date name date column .disease_data used temporal effects temporal_effects temporal_effects object codifying temporal effects used.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess the dates to create a covariate matrix — preprocess_dates","text":"data.frame containing case info","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess the dates to create a covariate matrix — preprocess_dates","text":"","code":"#Get disease disease_data <- preprocess_for_nowcast(denguedat, \"onset_week\", \"report_week\",     units = \"weeks\", now = as.Date(\"1990-03-05\")) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` date_data    <- preprocess_dates(disease_data, date = \"onset_week\",   temporal_effects = temporal_effects(week_of_year = TRUE))"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"Function takes data frame true_date report_date generates possible combinations true_dates report_dates observable controlling covariates specified ...","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"","code":"preprocess_for_nowcast(   .disease_data,   true_date,   report_date,   strata = NULL,   now,   units,   max_delay = Inf,   data_type = c(\"auto\", \"linelist\", \"count\"),   verbose = TRUE )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, (optionally) strata true_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. now object datatype Date indicating date perlform nowcast. units Time scale reporting. Options: \"1 day\", \"1 week\". max_delay Maximum possible delay observed considered estimation delay distribution (numeric). Default: Inf data_type Either linedata row represents test counts column named n counts many tests onset report dates verbose Boolean. Whether print data type assumptions.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"data.frame possible counts delay-onset combinations. new column counts named n. Additional columns .tval .delay added .tval codifies dates numbers (starting 0) delay codifies difference onset report.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess data.frame for generating a nowcast — preprocess_for_nowcast","text":"","code":"data(denguedat)  # Get counts by onset date and report week consider all possible delays preprocess_for_nowcast(denguedat, \"onset_week\", \"report_week\",   units = \"weeks\", now = as.Date(\"1990-03-05\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 55 × 5 #>        n .tval .delay onset_week report_week #>    <int> <dbl>  <dbl> <date>     <date>      #>  1     3     1      0 1990-01-01 1990-01-01  #>  2    24     1      1 1990-01-01 1990-01-08  #>  3    23     1      2 1990-01-01 1990-01-15  #>  4     8     1      3 1990-01-01 1990-01-22  #>  5     1     1      4 1990-01-01 1990-01-29  #>  6     0     1      5 1990-01-01 1990-02-05  #>  7     1     1      6 1990-01-01 1990-02-12  #>  8     0     1      7 1990-01-01 1990-02-19  #>  9     0     1      8 1990-01-01 1990-02-26  #> 10     1     1      9 1990-01-01 1990-03-05  #> # ℹ 45 more rows  # Complete one date when there was no onset week df <- data.frame(   onset_week  = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-03\", \"1994-10-03\")),   report_week = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-10\", \"1994-10-10\")) ) preprocess_for_nowcast(df, \"onset_week\", \"report_week\",   units = \"weeks\",   now = as.Date(\"1994-10-10\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 7 × 5 #>       n .tval .delay onset_week report_week #>   <int> <dbl>  <dbl> <date>     <date>      #> 1     1     1      0 1994-09-19 1994-09-19  #> 2     0     1      1 1994-09-19 1994-09-26  #> 3     0     2      0 1994-09-26 1994-09-26  #> 4     0     2      1 1994-09-26 1994-10-03  #> 5     1     3      0 1994-10-03 1994-10-03  #> 6     2     3      1 1994-10-03 1994-10-10  #> 7     0     4      0 1994-10-10 1994-10-10   # Complete one date when there was no report of delay 3 mostly df <- data.frame(   onset_week  = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-03\", \"1994-10-10\")),   report_week = as.Date(c(\"1994-10-10\", \"1994-10-03\", \"1994-10-10\", \"1994-10-10\")) ) preprocess_for_nowcast(df, \"onset_week\", \"report_week\",   units = \"weeks\",   now = as.Date(\"1994-10-10\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 10 × 5 #>        n .tval .delay onset_week report_week #>    <int> <dbl>  <dbl> <date>     <date>      #>  1     0     1      0 1994-09-19 1994-09-19  #>  2     0     1      1 1994-09-19 1994-09-26  #>  3     0     1      2 1994-09-19 1994-10-03  #>  4     1     1      3 1994-09-19 1994-10-10  #>  5     0     2      0 1994-09-26 1994-09-26  #>  6     0     2      1 1994-09-26 1994-10-03  #>  7     0     2      2 1994-09-26 1994-10-10  #>  8     1     3      0 1994-10-03 1994-10-03  #>  9     1     3      1 1994-10-03 1994-10-10  #> 10     1     4      0 1994-10-10 1994-10-10   # Get counts by onset date and report week stratifying by gender and state df <- data.frame(   onset_week = sample(as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-10\")), 100, replace = TRUE),   gender = sample(c(\"Male\", \"Female\"), 100, replace = TRUE),   state = sample(c(\"A\", \"B\", \"C\", \"D\"), prob = c(0.5, 0.2, 0.2, 0.1), size = 100, replace = TRUE) ) df$report_week <- df$onset_week +   sample(c(lubridate::weeks(1), lubridate::weeks(2)), 100, replace = TRUE) preprocess_for_nowcast(df, \"onset_week\", \"report_week\", c(\"gender\", \"state\"),   units = \"weeks\",   now = as.Date(\"1994-09-26\") ) #> ℹ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 8 × 7 #>       n .tval .delay onset_week gender state report_week #>   <int> <dbl>  <dbl> <date>     <chr>  <chr> <date>      #> 1     2     1      1 1994-09-19 Male   D     1994-09-26  #> 2     2     1      1 1994-09-19 Male   A     1994-09-26  #> 3     2     1      1 1994-09-19 Male   C     1994-09-26  #> 4     1     1      1 1994-09-19 Male   B     1994-09-26  #> 5     0     1      1 1994-09-19 Female D     1994-09-26  #> 6     2     1      1 1994-09-19 Female A     1994-09-26  #> 7     3     1      1 1994-09-19 Female C     1994-09-26  #> 8     3     1      1 1994-09-19 Female B     1994-09-26"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get strata — preprocess_strata","title":"Get strata — preprocess_strata","text":"Function preprocess strata .disease_data","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get strata — preprocess_strata","text":"","code":"preprocess_strata(.disease_data, strata)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get strata — preprocess_strata","text":".disease_data data frame collapse strata strata vector names strata","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get strata — preprocess_strata","text":"list three entries:","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.nowcaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a nowcast object — print.nowcaster","title":"Print a nowcast object — print.nowcaster","text":"Generic print nowcaster object","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.nowcaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a nowcast object — print.nowcaster","text":"","code":"# S3 method for class 'nowcaster' print(x, ...)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.nowcaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a nowcast object — print.nowcaster","text":"x nowcaster object generated nowcast() ... Additional arguments pass print (currently anything)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.nowcaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a nowcast object — print.nowcaster","text":"","code":"#' # Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 (or set to iter = 2000) now   <- as.Date(\"1990-10-01\") ncast <- nowcast(denguedat, \"onset_week\", \"report_week\", now = now,   method = \"optimization\", seed = 2495624, iter = 10) print(ncast) #>  #> ── Nowcast for 1990-10-01 ── #>  #> • Column with `true_date` = \"onset_week\" #> • Column with `report_date` = \"report_week\" #> • units = \"weeks\" #>  #> ── Epidemic effects:  #> The following effects are in place: #>   • week_of_year #>  #> ── Delay effects:  #> No temporal effects are considered #>  #> Use the `summary` function to obtain the summary of predictions or `plot` to #> generate an image #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.temporal_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print temporal effects — print.temporal_effect","title":"Print temporal effects — print.temporal_effect","text":"Print function extension temporal_effect object created temporal_effects(). Prints temporal characteristics model","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.temporal_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print temporal effects — print.temporal_effect","text":"","code":"# S3 method for class 'temporal_effect' print(x, ...)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.temporal_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print temporal effects — print.temporal_effect","text":"x temporal_effect object created temporal_effects() ... Additional arguments pass print_temporal_effect_internal (currently anything)","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print.temporal_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print temporal effects — print.temporal_effect","text":"","code":"print(temporal_effects(day_of_week = TRUE, week_of_year = TRUE)) #>  #> ── Temporal effect object ── #>  #> The following effects are in place: #> • day_of_week #> • week_of_year #>  print(temporal_effects(day_of_week = FALSE, week_of_year = FALSE)) #> ── Temporal effect object ── #>  #> No temporal effects are considered #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print_temporal_effect_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"CLI for printing temporal effects — print_temporal_effect_internal","title":"CLI for printing temporal effects — print_temporal_effect_internal","text":"Print function printing temporal_effect.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print_temporal_effect_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLI for printing temporal effects — print_temporal_effect_internal","text":"","code":"print_temporal_effect_internal(x, ...)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print_temporal_effect_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CLI for printing temporal effects — print_temporal_effect_internal","text":"x temporal_effect object created temporal_effects() ... Additional arguments pass print.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/print_temporal_effect_internal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CLI for printing temporal effects — print_temporal_effect_internal","text":"","code":"print(temporal_effects(day_of_week = TRUE, week_of_year = TRUE)) #>  #> ── Temporal effect object ── #>  #> The following effects are in place: #> • day_of_week #> • week_of_year #>  print(temporal_effects(day_of_week = FALSE, week_of_year = FALSE)) #> ── Temporal effect object ── #>  #> No temporal effects are considered #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/random_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to randomly set the priors — random_priors","title":"Function to randomly set the priors — random_priors","text":"Assign random priors. mostly used simulate_disease() function.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/random_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to randomly set the priors — random_priors","text":"","code":"random_priors(...)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/random_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to randomly set the priors — random_priors","text":"... parameter used set_priors() remain fixed (random).","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/random_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to randomly set the priors — random_priors","text":"","code":"#Get random priors random_priors() #> $mu_intercept_param_1 #> [1] -0.8302143 #>  #> $mu_intercept_param_2 #> [1] 0.4964071 #>  #> $mu_0_param_1 #> [1] -1.193641 #>  #> $mu_0_param_2 #> [1] 0.2482767 #>  #> $nu_intercept_param_1 #> [1] 1.455841 #>  #> $nu_intercept_param_2 #> [1] 0.1713965 #>  #> $nu_0_param_1 #> [1] 0.2897745 #>  #> $nu_0_param_2 #> [1] 0.5199465 #>  #> $c_0_param_1 #> [1] -0.6048294 #>  #> $c_0_param_2 #> [1] 2.46011 #>  #> $ctilde_0_param_1 #> [1] 0.1496794 #>  #> $ctilde_0_param_2 #> [1] 0.4333211 #>  #> $sd_mu_param_1 #> [1] 0.01030332 #>  #> $sd_mu_param_2 #> [1] 0.787764 #>  #> $sd_nu_param_1 #> [1] 0.9063402 #>  #> $sd_nu_param_2 #> [1] 1.102152 #>  #> $sd_c_param_1 #> [1] 1.89336 #>  #> $sd_c_param_2 #> [1] 0.03187416 #>  #> $sd_ctilde_param_1 #> [1] 0.102603 #>  #> $sd_ctilde_param_2 #> [1] 1.23996 #>  #> $sd_m_param_1 #> [1] 0.06089889 #>  #> $sd_m_param_2 #> [1] 1.177576 #>  #> $sd_dow_epi_param_1 #> [1] 0.1178601 #>  #> $sd_dow_epi_param_2 #> [1] 1.112295 #>  #> $sd_wkend_epi_param_1 #> [1] 0.007886198 #>  #> $sd_wkend_epi_param_2 #> [1] 2.877744 #>  #> $sd_dom_epi_param_1 #> [1] 2.158757 #>  #> $sd_dom_epi_param_2 #> [1] 1.709715 #>  #> $sd_month_epi_param_1 #> [1] 0.7669834 #>  #> $sd_month_epi_param_2 #> [1] 0.6917886 #>  #> $sd_week_epi_param_1 #> [1] 1.012002 #>  #> $sd_week_epi_param_2 #> [1] 0.0809484 #>  #> $sd_holidays_epi_param_1 #> [1] 0.5633801 #>  #> $sd_holidays_epi_param_2 #> [1] 1.322483 #>  #> $dof #> [1] 7 #>  #> $control_k_transform #> [1] 2 #>  #> $control_c_transform #> [1] 0.5 #>   #Get random priors except for mu_0_param_1 which is fixed at 1 and nu_0_param_2 fixed at 0.5 random_priors(mu_0_param_1 = 1, nu_0_param_2 = 0.5) #> $mu_intercept_param_1 #> [1] 0.3666744 #>  #> $mu_intercept_param_2 #> [1] 2.129835 #>  #> $mu_0_param_1 #> [1] -0.9414981 #>  #> $mu_0_param_2 #> [1] 1.217838 #>  #> $nu_intercept_param_1 #> [1] 1.415412 #>  #> $nu_intercept_param_2 #> [1] 0.616267 #>  #> $nu_0_param_1 #> [1] -0.1740864 #>  #> $nu_0_param_2 #> [1] 0.7782555 #>  #> $c_0_param_1 #> [1] -1.009529 #>  #> $c_0_param_2 #> [1] 1.480725 #>  #> $ctilde_0_param_1 #> [1] 1.604407 #>  #> $ctilde_0_param_2 #> [1] 0.5150245 #>  #> $sd_mu_param_1 #> [1] 1.416024 #>  #> $sd_mu_param_2 #> [1] 1.876777 #>  #> $sd_nu_param_1 #> [1] 0.6241324 #>  #> $sd_nu_param_2 #> [1] 3.112277 #>  #> $sd_c_param_1 #> [1] 0.3561244 #>  #> $sd_c_param_2 #> [1] 0.06446421 #>  #> $sd_ctilde_param_1 #> [1] 1.077117 #>  #> $sd_ctilde_param_2 #> [1] 2.181576 #>  #> $sd_m_param_1 #> [1] 0.1983921 #>  #> $sd_m_param_2 #> [1] 0.5995948 #>  #> $sd_dow_epi_param_1 #> [1] 0.6161543 #>  #> $sd_dow_epi_param_2 #> [1] 2.974157 #>  #> $sd_wkend_epi_param_1 #> [1] 1.884662 #>  #> $sd_wkend_epi_param_2 #> [1] 0.5886205 #>  #> $sd_dom_epi_param_1 #> [1] 0.5399232 #>  #> $sd_dom_epi_param_2 #> [1] 0.1694615 #>  #> $sd_month_epi_param_1 #> [1] 0.559106 #>  #> $sd_month_epi_param_2 #> [1] 0.8193472 #>  #> $sd_week_epi_param_1 #> [1] 0.393344 #>  #> $sd_week_epi_param_2 #> [1] 1.042134 #>  #> $sd_holidays_epi_param_1 #> [1] 1.179664 #>  #> $sd_holidays_epi_param_2 #> [1] 0.7430788 #>  #> $mu_0_param_1 #> [1] 1 #>  #> $nu_0_param_2 #> [1] 0.5 #>  #> $dof #> [1] 7 #>  #> $control_k_transform #> [1] 2 #>  #> $control_c_transform #> [1] 0.5 #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/set_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get nowcast priors not controlling by distribution — set_priors","title":"Get nowcast priors not controlling by distribution — set_priors","text":"Function return default values nowcast() function list.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/set_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get nowcast priors not controlling by distribution — set_priors","text":"","code":"set_priors(   mu_intercept_param_1 = 0,   mu_intercept_param_2 = 1,   mu_0_param_1 = 0,   mu_0_param_2 = 1,   nu_intercept_param_1 = 0,   nu_intercept_param_2 = 1,   nu_0_param_1 = 0,   nu_0_param_2 = 1,   c_0_param_1 = 0,   c_0_param_2 = 1,   ctilde_0_param_1 = 0,   ctilde_0_param_2 = 1,   sd_mu_param_1 = 0,   sd_mu_param_2 = 1,   sd_nu_param_1 = 0,   sd_nu_param_2 = 1,   sd_c_param_1 = 0,   sd_c_param_2 = 1,   sd_ctilde_param_1 = 0,   sd_ctilde_param_2 = 1,   sd_m_param_1 = 0,   sd_m_param_2 = 1,   sd_dow_epi_param_1 = 0,   sd_dow_epi_param_2 = 1,   sd_wkend_epi_param_1 = 0,   sd_wkend_epi_param_2 = 1,   sd_dom_epi_param_1 = 0,   sd_dom_epi_param_2 = 1,   sd_month_epi_param_1 = 0,   sd_month_epi_param_2 = 1,   sd_week_epi_param_1 = 0,   sd_week_epi_param_2 = 1,   sd_holidays_epi_param_1 = 0,   sd_holidays_epi_param_2 = 1,   dof = 7,   control_k_transform = 2,   control_c_transform = 0.5 )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/set_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get nowcast priors not controlling by distribution — set_priors","text":"mu_intercept_param_1 Real. Mean epidemic intercept. mu_intercept_param_2 Positive real. Variance epidemic intercept. mu_0_param_1 Real. Mean initial value epidemic trend. mu_0_param_2 Positive Real. Variance initial value epidemic trend. nu_intercept_param_1 Real. Mean delay intercept. nu_intercept_param_2 Positive real. Variance delay intercept. nu_0_param_1 Real. Mean initial value disease trend. nu_0_param_2 Positive Real. Variance initial value disease trend. c_0_param_1 Initial value cycle parameter's mean c_0_param_2 Initial value cycle parameter's sd ctilde_0_param_1 Initial value cycle parameter's mean (latent cycle) ctilde_0_param_2 Initial value cycle parameter's sd (latent cycle) sd_mu_param_1 Positive real. Initial value mean standard deviation epidemic trend. sd_mu_param_2 Positive real. Initial value variance standard deviation epidemic trend. sd_nu_param_1 Positive real. Initial value mean standard deviation disease trend. sd_nu_param_2 Positive real. Initial value variance standard deviation disease trend. sd_c_param_1 Mean value standard deviation's c_0 sd_c_param_2 Standard deviation prior value standard deviation's c_0 sd_ctilde_param_1 Mean value standard deviation's c_0 tilde sd_ctilde_param_2 Standard deviation prior value standard deviation's c_0 tilde sd_m_param_1 Positive real. Initial value mean standard deviation observed cases (considered distribution Poisson) sd_m_param_2 Positive real. Initial value variance standard deviation observed cases (considered distribution Poisson) sd_dow_epi_param_1 Standard deviation's mean day week effect sd_dow_epi_param_2 Standard deviation's sd day week effect sd_wkend_epi_param_1 Standard deviation's mean weekend effect sd_wkend_epi_param_2 Standard deviation's sd weekend effect sd_dom_epi_param_1 Standard deviation's mean day month effect sd_dom_epi_param_2 Standard deviation's sd day month effect sd_month_epi_param_1 Standard deviation's mean month effect sd_month_epi_param_2 Standard deviation's sd month effect sd_week_epi_param_1 Standard deviation's mean epiweek effect sd_week_epi_param_2 Standard deviation's sd epiweek effect sd_holidays_epi_param_1 Standard deviation's mean holiday effect sd_holidays_epi_param_2 Standard deviation's sd holiday effect dof Degrees freedom distribution used nowcast() Student (default = 7). control_k_transform Parameter dhyperbolic softplus link functions. control_c_transform Parameter dhyperbolic link function.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/set_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get nowcast priors not controlling by distribution — set_priors","text":"list priors nowcast() function.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/set_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get nowcast priors not controlling by distribution — set_priors","text":"","code":"#Get the default priors set_priors() #> $mu_intercept_param_1 #> [1] 0 #>  #> $mu_intercept_param_2 #> [1] 1 #>  #> $mu_0_param_1 #> [1] 0 #>  #> $mu_0_param_2 #> [1] 1 #>  #> $nu_intercept_param_1 #> [1] 0 #>  #> $nu_intercept_param_2 #> [1] 1 #>  #> $nu_0_param_1 #> [1] 0 #>  #> $nu_0_param_2 #> [1] 1 #>  #> $c_0_param_1 #> [1] 0 #>  #> $c_0_param_2 #> [1] 1 #>  #> $ctilde_0_param_1 #> [1] 0 #>  #> $ctilde_0_param_2 #> [1] 1 #>  #> $sd_mu_param_1 #> [1] 0 #>  #> $sd_mu_param_2 #> [1] 1 #>  #> $sd_nu_param_1 #> [1] 0 #>  #> $sd_nu_param_2 #> [1] 1 #>  #> $sd_c_param_1 #> [1] 0 #>  #> $sd_c_param_2 #> [1] 1 #>  #> $sd_ctilde_param_1 #> [1] 0 #>  #> $sd_ctilde_param_2 #> [1] 1 #>  #> $sd_m_param_1 #> [1] 0 #>  #> $sd_m_param_2 #> [1] 1 #>  #> $sd_dow_epi_param_1 #> [1] 0 #>  #> $sd_dow_epi_param_2 #> [1] 1 #>  #> $sd_wkend_epi_param_1 #> [1] 0 #>  #> $sd_wkend_epi_param_2 #> [1] 1 #>  #> $sd_dom_epi_param_1 #> [1] 0 #>  #> $sd_dom_epi_param_2 #> [1] 1 #>  #> $sd_month_epi_param_1 #> [1] 0 #>  #> $sd_month_epi_param_2 #> [1] 1 #>  #> $sd_week_epi_param_1 #> [1] 0 #>  #> $sd_week_epi_param_2 #> [1] 1 #>  #> $sd_holidays_epi_param_1 #> [1] 0 #>  #> $sd_holidays_epi_param_2 #> [1] 1 #>  #> $dof #> [1] 7 #>  #> $control_k_transform #> [1] 2 #>  #> $control_c_transform #> [1] 0.5 #>   #Change the priors set_priors(mu_intercept_param_1 = 2) #> $mu_intercept_param_1 #> [1] 2 #>  #> $mu_intercept_param_2 #> [1] 1 #>  #> $mu_0_param_1 #> [1] 0 #>  #> $mu_0_param_2 #> [1] 1 #>  #> $nu_intercept_param_1 #> [1] 0 #>  #> $nu_intercept_param_2 #> [1] 1 #>  #> $nu_0_param_1 #> [1] 0 #>  #> $nu_0_param_2 #> [1] 1 #>  #> $c_0_param_1 #> [1] 0 #>  #> $c_0_param_2 #> [1] 1 #>  #> $ctilde_0_param_1 #> [1] 0 #>  #> $ctilde_0_param_2 #> [1] 1 #>  #> $sd_mu_param_1 #> [1] 0 #>  #> $sd_mu_param_2 #> [1] 1 #>  #> $sd_nu_param_1 #> [1] 0 #>  #> $sd_nu_param_2 #> [1] 1 #>  #> $sd_c_param_1 #> [1] 0 #>  #> $sd_c_param_2 #> [1] 1 #>  #> $sd_ctilde_param_1 #> [1] 0 #>  #> $sd_ctilde_param_2 #> [1] 1 #>  #> $sd_m_param_1 #> [1] 0 #>  #> $sd_m_param_2 #> [1] 1 #>  #> $sd_dow_epi_param_1 #> [1] 0 #>  #> $sd_dow_epi_param_2 #> [1] 1 #>  #> $sd_wkend_epi_param_1 #> [1] 0 #>  #> $sd_wkend_epi_param_2 #> [1] 1 #>  #> $sd_dom_epi_param_1 #> [1] 0 #>  #> $sd_dom_epi_param_2 #> [1] 1 #>  #> $sd_month_epi_param_1 #> [1] 0 #>  #> $sd_month_epi_param_2 #> [1] 1 #>  #> $sd_week_epi_param_1 #> [1] 0 #>  #> $sd_week_epi_param_2 #> [1] 1 #>  #> $sd_holidays_epi_param_1 #> [1] 0 #>  #> $sd_holidays_epi_param_2 #> [1] 1 #>  #> $dof #> [1] 7 #>  #> $control_k_transform #> [1] 2 #>  #> $control_c_transform #> [1] 0.5 #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_disease.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a process — simulate_disease","title":"Simulate a process — simulate_disease","text":"function simulates state-space process testing purposes model multiple delays strata. estimates process specified number steps, options trend degrees, priors, error distributions.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_disease.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a process — simulate_disease","text":"","code":"simulate_disease(   num_steps = 10,   num_delays = 8,   num_strata = 2,   initial_day = NULL,   warmup_steps = 50,   units = c(\"daily\", \"weekly\"),   priors = random_priors(has_cycle = FALSE),   autoregresive = AR(),   moving_average = MA(),   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_disease.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a process — simulate_disease","text":"num_steps Integer. Number time steps simulate. Default 10. num_delays Integer. Number delay strata. Default 8. num_strata Integer. Number strata population. Default 2. initial_day Date. simulation start specific day. warmup_steps Initial steps model (discard) units Either \"daily\" (default) \"weekly\". priors list nowcast priors. can use set_priors() change priors function (see details) autoregresive AR() object autoregresive components epidemic delay processes. moving_average MA() object moving average component epidemic delay processes. ... Additional arguments pass nowcast()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_disease.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a process — simulate_disease","text":"tibble simulated state-space process results, including onset report dates, strata, delays, number observed cases per time step.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_disease.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a process — simulate_disease","text":"","code":"# Simulate a disease for 20 time steps with delay of maximum 10 and 3 strata set.seed(48672) sims <- simulate_disease(num_steps = 20, num_delays = 3, num_strata = 3)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/summary.nowcaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a summary of your nowcast — summary.nowcaster","title":"Makes a summary of your nowcast — summary.nowcaster","text":"Makes tidy summary dataframe results function nowcast()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/summary.nowcaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a summary of your nowcast — summary.nowcaster","text":"","code":"# S3 method for class 'nowcaster' summary(object, quantiles = c(0.05, 0.95), ...)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/summary.nowcaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a summary of your nowcast — summary.nowcaster","text":"object nowcaster object generated nowcast() quantiles vector specifying quantiles include summary ... Additional options pass summary.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/summary.nowcaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a summary of your nowcast — summary.nowcaster","text":"summary tibble nowcast results, specifies: true date, strata, mean, standard deviation, median, quantiles","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/summary.nowcaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a summary of your nowcast — summary.nowcaster","text":"","code":"# Load the data data(denguedat)  # Run a nowcast with very few iterations # change to method = \"sampling\" when working and remove the iter = 10 now <- as.Date(\"1990-10-01\")  # perform nowcasting ncast <- nowcast(denguedat, \"onset_week\", \"report_week\",   now = now, method = \"optimization\",   seed = 2495624, iter = 10 )  # create summary dataframe summary(ncast) #> # A tibble: 40 × 7 #>    onset_week  mean    sd median  `5%` `95%` Strata_unified #>    <date>     <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>          #>  1 1990-01-01    61     0     61    61    61 No strata      #>  2 1990-01-08    50     0     50    50    50 No strata      #>  3 1990-01-15    44     0     44    44    44 No strata      #>  4 1990-01-22    46     0     46    46    46 No strata      #>  5 1990-01-29    39     0     39    39    39 No strata      #>  6 1990-02-05    34     0     34    34    34 No strata      #>  7 1990-02-12    24     0     24    24    24 No strata      #>  8 1990-02-19    17     0     17    17    17 No strata      #>  9 1990-02-26    17     0     17    17    17 No strata      #> 10 1990-03-05    16     0     16    16    16 No strata      #> # ℹ 30 more rows  # Specific quantiles can be requested summary(ncast, quantiles = c(0.1, 0.2, 0.3, 0.4)) #> # A tibble: 40 × 9 #>    onset_week  mean    sd median `10%` `20%` `30%` `40%` Strata_unified #>    <date>     <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <chr>          #>  1 1990-01-01    61     0     61    61    61    61    61 No strata      #>  2 1990-01-08    50     0     50    50    50    50    50 No strata      #>  3 1990-01-15    44     0     44    44    44    44    44 No strata      #>  4 1990-01-22    46     0     46    46    46    46    46 No strata      #>  5 1990-01-29    39     0     39    39    39    39    39 No strata      #>  6 1990-02-05    34     0     34    34    34    34    34 No strata      #>  7 1990-02-12    24     0     24    24    24    24    24 No strata      #>  8 1990-02-19    17     0     17    17    17    17    17 No strata      #>  9 1990-02-26    17     0     17    17    17    17    17 No strata      #> 10 1990-03-05    16     0     16    16    16    16    16 No strata      #> # ℹ 30 more rows"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/temporal_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal effects — temporal_effects","title":"Temporal effects — temporal_effects","text":"Matrix constructing temporal effects nowcast().","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/temporal_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal effects — temporal_effects","text":"","code":"temporal_effects(   day_of_week = FALSE,   weekend = FALSE,   day_of_month = FALSE,   month_of_year = FALSE,   week_of_year = FALSE,   holidays = NULL )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/temporal_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal effects — temporal_effects","text":"day_of_week Boolean. Whether include effect seven days week. weekend Boolean. Whether include effect weekend vs weekday. day_of_month Boolean. Whether include effect day month (.e. 1 31st) month_of_year Boolean. Whether include effect month. week_of_year Boolean. Whether include effect epidemiological week. holidays Either NULL almanac::rcalendar() almanac() package specifying calculate holidays.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/temporal_effects.html","id":"us-holidays","dir":"Reference","previous_headings":"","what":"US holidays","title":"Temporal effects — temporal_effects","text":"US Federal holidays can passed just passing almanac::cal_us_federal() function temporal effects.","code":"library(almanac) temporal_effects(holidays = cal_us_federal())"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/temporal_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal effects — temporal_effects","text":"","code":"#Create day of week and week of year class temporal_effects(day_of_week = TRUE, week_of_year = TRUE) #>  #> ── Temporal effect object ── #>  #> The following effects are in place: #> • day_of_week #> • week_of_year #>   #Set up a holiday effect on Christmass using the almanac package if(!requireNamespace(\"almanac\", quietly = TRUE)){   cal <- rcalendar(hol_christmas())   temporal_effects(holidays = cal) }"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/update.nowcaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a nowcast object — update.nowcaster","title":"Update a nowcast object — update.nowcaster","text":"Generic update nowcaster object new data","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/update.nowcaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a nowcast object — update.nowcaster","text":"","code":"# S3 method for class 'nowcaster' update(   object,   new_data,   now = NULL,   refresh = 250 * rlang::is_interactive(),   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/update.nowcaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a nowcast object — update.nowcaster","text":"object nowcaster object generated nowcast() new_data New .disease_data use fitting nowcast(). Ideally include previous data + new observations data.frame. now object datatype Date indicating date perlform nowcast. refresh Refresh parameter rstan::sampling() ... Additional arguments pass rstan::sampling()","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/update.nowcaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a nowcast object — update.nowcaster","text":"","code":"#' # Load the data data(denguedat)  # Run a nowcast using the first 1000 data points first_1k <- denguedat[1:1000,] ncast <- nowcast(first_1k, \"onset_week\", \"report_week\",   method = \"optimization\", seed = 2495624, iter = 10, refresh = 0) ncast #>  #> ── Nowcast for 1990-11-12 ── #>  #> • Column with `true_date` = \"onset_week\" #> • Column with `report_date` = \"report_week\" #> • units = \"weeks\" #>  #> ── Epidemic effects:  #> The following effects are in place: #>   • week_of_year #>  #> ── Delay effects:  #> No temporal effects are considered #>  #> Use the `summary` function to obtain the summary of predictions or `plot` to #> generate an image #>   #Update the nowcast now that new information was acquired first_3k <- denguedat[1:3000,] update(ncast, new_data = first_3k) #> ── Nowcast for 1991-10-14 ── #>  #> • Column with `true_date` = \"onset_week\" #> • Column with `report_date` = \"report_week\" #> • units = \"weeks\" #>  #> ── Epidemic effects:  #> The following effects are in place: #>   • week_of_year #>  #> ── Delay effects:  #> No temporal effects are considered #>  #> Use the `summary` function to obtain the summary of predictions or `plot` to #> generate an image #>"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/news/index.html","id":"diseasenowcasting-010","dir":"Changelog","previous_headings":"","what":"diseasenowcasting 0.1.0","title":"diseasenowcasting 0.1.0","text":"Initial creation.","code":""}]
