[{"path":"https://rodrigozepeda.github.io/diseasenowcasting/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Columbia University City New York Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Nowcasting-methods.html","id":"intuitive-explanation","dir":"Articles","previous_headings":"","what":"Intuitive explanation","title":"Nowcasting methods","text":"consider problem reporting number cases certain disease. Results disease‚Äôs tests reported delay. day see disease-cases day; disease-cases day reported upcoming days. Delay ladder shows day reports come subsequent days thus forming ladder. Figure 1 shows idea assume maximum delay corresponds 66 days. can see today, April 11th, data April 2nd already arrived: data arrived zero delay (report Apr.¬†2) well data arrived delay 11 (report Apr.¬†3), 22 (report Apr.¬†4), 33 (report Apr.¬†5), etc data reported April 8th maximum delay 6. dates data yet arrived. can see April 9th see data delay 0 till 3 (corresponding April 11th). Data delay larger 3 seen future. idea model predict number cases seen time tt denoted ntn_{t} sum delayed cases. includes cases ‚Äôve already observed nt,dn_{t,d} cases haven‚Äôt yet observed nÃÉt,d\\tilde{n}_{t,d}. number cases time tt, ntn_t can decomposed observed delays 00 (delay), 1,2,31,2,3, nt,0,nt,1,nt,2,nt,3n_{t,0},n_{t,1},n_{t,2},n_{t,3} predicted delays 4,5,64,5,6: nt,4,nt,5,nt,6n_{t,4},n_{t,5},n_{t,6} main objective model nt,dn_{t,d}, number cases time tt appear delay dd. actually model log expected value nt,dn_{t,d}, denoted ‚Ñìt,d\\ell_{t,d}. average variable driven process composed two elements: time-dependent process delay-time-dependent process. can think time-dependent process process drives epidemic curve delay-time-dependent process process drives testing (changes testing). log expected number cases time tt reported delay dd, ‚Ñìt,d\\ell_{t,d} function time-dependent process Œºt\\mu_t delay-time-dependent process ŒΩt,d\\nu_{t,d}. processes can decomposed trend, season (multiple seasons), cycle: decomposition time-dependent process Œºt\\mu_t. delay-time-dependent process ŒΩt,d\\nu_{t,d} decomposed similar fashion. model thus captures seasonality epidemic curve delay curve well trends noise.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Nowcasting-methods.html","id":"mathematical-explanation","dir":"Articles","previous_headings":"","what":"Mathematical explanation","title":"Nowcasting methods","text":"Let nt,dsn_{t,d}^s denote number incident cases (individuals) stratum ss (say race/gender) time tt reported delay dd. , nt,0n_{t,0} denotes number individuals diseased time tt reported moment tt, nt,1n_{t,1} number individuals diseased time tt reported moment t+1t + 1 general nt,dn_{t,d} number individuals diseased time tt reported moment t+dt + d. assume expected value nt,dsn_{t,d}^s given : ùîº[nt,ds]=Œªt,ds \\mathbb{E}\\left[n_{t,d}^s\\right] = \\lambda_{t,d}^s  ‚Ñìt,ds=lnŒªt,ds\\ell_{t,d}^s = \\ln\\lambda_{t,d}^s follows linear state-space model covariates (see Durbin Koopman (2012)): ‚Ñìt,ds=LŒº‚ãÖŒºts+LdŒΩ‚ãÖŒΩt,ds+Bd‚ãÖXt,ds+œµt,dsŒºt+1s=AŒºŒºts+RŒºŒæts,Œº(time-dependent process)ŒΩt+1,ds=AdŒΩŒΩt,ds+RdŒΩŒæt,ds,ŒΩ(delay-dependent process)\\begin{equation} \\begin{aligned}   \\ell_{t,d}^s & = L^{\\mu} \\cdot \\mu_{t}^s + L_{d}^{\\nu}  \\cdot \\nu_{t,d}^s + B_{d}  \\cdot X_{t,d}^s + \\epsilon_{t,d}^s \\\\   \\mu_{t+1}^s & = ^{\\mu} \\mu_{t}^s + R^{\\mu} \\xi_{t}^{s,\\mu} \\quad & \\text{(time-dependent process)}\\\\   \\nu_{t+1,d}^s & = A_{d}^{\\nu}\\nu_{t,d}^s + R_d^{\\nu} \\xi_{t,d}^{s,\\nu} \\quad & \\text{(delay-dependent process)}\\\\ \\end{aligned}   \\end{equation} Œºts\\mu_{t}^s represents time-dependent latent process ŒΩt,ds\\nu_{t,d}^s delay-dependent latent process. system defined t=1,‚Ä¶,Tt = 1,\\dots, T (time), d=0,‚Ä¶,Dd = 0,\\dots, D (delays) s=1,‚Ä¶,Ss = 1,\\dots,S (strata). Table 1 describes variables dimensions. Dimensions variables. model, AŒºA^{\\mu},AdŒΩA_{d}^{\\nu}, RŒºR^{\\mu},RdŒΩR_d^{\\nu},LŒºL^{\\mu}, LdŒΩL_d^{\\nu} given. Variables œµt,ds\\epsilon_{t,d}^s, Œæts,Œº\\xi_{t}^{s,\\mu}, Œæt,ds,ŒΩ\\xi_{t,d}^{s,\\nu} represent random (correlated) noise; Xt,dsX_{t,d}^s vector known covariates, BdB_d vector unknown parameters. Additionally, Œº0\\mu_{0} ŒΩ0,d\\nu_{0,d} also unknown parameters. total number incident cases stratum ss expected time tt given : nts=‚àëd=0‚àûnt,ds=nt,D+s+‚àëd=0Dnt,ds‚âà‚àëd=0Dnt,ds\\begin{equation} n_t^s = \\sum\\limits_{d = 0}^{\\infty} n_{t,d}^s = n_{t,D+}^s  + \\sum\\limits_{d = 0}^{D} n_{t,d}^s \\approx \\sum\\limits_{d = 0}^{D} n_{t,d}^s \\end{equation} time tt, predicted number cases delay dd stratum ss denoted nÃÉt,ds\\tilde{n}_{t,d}^s. Finally, predicted number cases (nowcasted cases) stratum ss time tt estimated : nÃÉts=‚àëd=0d*nt,ds‚èüAlready observed+‚àëd=d*+1DnÃÉt,ds‚èüPredicted\\begin{equation} \\tilde{n}_t^s =  \\underbrace{\\sum\\limits_{d = 0}^{d^{*}} n_{t,d}^s}_{\\text{Already observed}}  + \\underbrace{\\sum\\limits_{d = d^{*} + 1}^{D} \\tilde{n}_{t,d}^s}_{\\text{Predicted}}  \\end{equation} d*d^* denotes latest delay observed current data. add option zero-inflation","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/articles/Nowcasting-methods.html","id":"construction-of-the-l_d-a_d-mu_ts-and-nu_tds","dir":"Articles","previous_headings":"Mathematical explanation","what":"Construction of the LdL_{d}, AdA_{d}, Œºts\\mu_{t}^s, and ŒΩt,ds\\nu_{t,d}^s","title":"Nowcasting methods","text":"LŒºL^{\\mu}, LdŒΩL_d^{\\nu}, AŒºA^{\\mu}, AdŒΩA_{d}^{\\nu}, RŒºR^{\\mu}, RdŒΩR_{d}^{\\nu}, Œºts\\mu_{t}^s, ŒΩt,ds\\nu_{t,d}^s matrices can constructed blocks. follows ‚Äôll show construction works general matrices Œ±‚Üít,ds\\vec{\\alpha}_{t,d}^s, LdL_{d}, AdA_d, RdR_{d} stand either ŒΩt,ds\\nu_{t,d}^s , LdŒΩL_d^{\\nu}, AdŒΩA_{d}^{\\nu} RdŒΩR_{d}^{\\nu}; Œºts\\mu_{t}^s, LŒºL^{\\mu}, AŒºA^{\\mu} RŒºR^{\\mu}. general idea vectors Œ±‚Üít,ds\\vec{\\alpha}_{t,d}^s LdL_{d}, matrices AdA_d RdR_{d} can constructed three blocks: trend, seasonality, cyclical component: Ld=(LdTrend,LdSeason,LdCycle)‚ä§,Ad=diag(AdTrend,AdSeason,AdCycle),Rd=diag(RdTrend,RdSeason,RdCycle), andŒ±‚Üít,ds=(Œ±t,ds,Trend,Œ±t,ds,Season,Œ±t,ds,Cycle)‚ä§.\\begin{equation} \\begin{aligned} L_{d} & = \\left(L_{d}^{\\text{Trend}}, L_{d}^{\\text{Season}}, L_{d}^{\\text{Cycle}} \\right)^{\\top}, \\\\ A_{d} & = \\text{diag}\\left(A_{d}^{\\text{Trend}}, A_{d}^{\\text{Season}}, A_{d}^{\\text{Cycle}}\\right),\\\\ R_{d} & = \\text{diag}\\left(R_{d}^{\\text{Trend}}, R_{d}^{\\text{Season}}, R_{d}^{\\text{Cycle}}\\right), \\text{ } \\\\  \\vec{\\alpha}_{t,d}^s & = \\left(\\alpha_{t,d}^{s,\\text{Trend}}, \\alpha_{t,d}^{s,\\text{Season}}, \\alpha_{t,d}^{s,\\text{Cycle}} \\right)^{\\top}. \\end{aligned} \\end{equation} notation, section model specified empty block considered. example, model without seasonality might following LdL_d: Ld=(LdTrend,LdCycle)‚ä§ L_{d} = \\left(L_{d}^{\\text{Trend}}, L_{d}^{\\text{Cycle}} \\right)^{\\top}  definitions Ad,RdA_{d}, R_{d}, Œ±t,ds\\alpha_{t,d}^s case follow pattern. trend describes general direction ‚Ñìt,ds\\ell_{t,d}^s. three trend options: Constant Local linear trend Local trend degree kk constant trend model given : ‚Ñìt,ds=Œ±t,ds+œµt,dsŒ±t+1,ds=Œ±t,ds\\begin{equation} \\begin{aligned} \\ell_{t,d}^s & = \\alpha_{t,d}^s + \\epsilon_{t,d}^s \\\\ \\alpha_{t+1,d}^s & = \\alpha_{t,d}^s \\\\ \\end{aligned}   \\end{equation} case LdTrend=1L_{d}^{\\text{Trend}} = 1, Œ±t,ds,Trend=Œ±t,ds\\alpha_{t,d}^{s,\\text{Trend}} = \\alpha_{t,d}^s, AdTrend=1A_{d}^{\\text{Trend}} = 1, Rd=0R_d = 0. simplest local linear trend model given : ‚Ñìt,ds=Œ±t,ds+œµt,dsŒΩt+1,ds=ŒΩt,ds+RdŒæt,ds\\begin{equation} \\begin{aligned} \\ell_{t,d}^s & = \\alpha_{t,d}^s  + \\epsilon_{t,d}^s \\\\ \\nu_{t+1,d}^s & = \\nu_{t,d}^s + R_d \\xi_{t,d}^s \\end{aligned}   \\end{equation} case LdTrend=1L_{d}^{\\text{Trend}} = 1, Œ±t,ds,Trend=Œ±t,ds\\alpha_{t,d}^{s,\\text{Trend}} = \\alpha_{t,d}^s, AdTrend=1A_{d}^{\\text{Trend}} = 1, RdTrend‚àà{0,1}R_d^{\\text{Trend}} \\\\{0,1\\}. Notice Rd=0R_d = 0 recover constant trend model. general (smoothing purposes), can adjust local linear trend degree kk fitting model: ‚Ñìt,ds=Œ±t,ds+œµt,dsŒîkŒ±t+1,ds=RdŒæt,ds\\begin{equation} \\begin{aligned} \\ell_{t,d}^s & = \\alpha_{t,d}^s + \\epsilon_{t,d}^s \\\\ \\Delta^{k} \\alpha_{t+1,d}^s & = R_d\\xi_{t,d}^s \\end{aligned}   \\end{equation} ŒîŒ±t+1=Œ±t+1‚àíŒ±t\\Delta \\alpha_{t+1} = \\alpha_{t+1} - \\alpha_{t} general ŒîkŒ±t+1=Œî(Œîk‚àí1Œ±t+1)\\Delta^k \\alpha_{t+1} = \\Delta\\big(\\Delta^{k-1} \\alpha_{t+1}\\big). model can rewritten using general formula higher order (backward) differences : ‚Ñìt,ds=Œ±t,ds+œµt,dsŒ±t+1,ds=‚àëj=1k(‚àí1)j+1(kj)Œ±t‚àíj,ds+RdŒæt,ds\\begin{equation} \\begin{aligned} \\ell_{t,d}^s & = \\alpha_{t,d}^s + \\epsilon_{t,d}^s \\\\ \\alpha_{t+1,d}^s & = \\sum\\limits_{j=1}^{k} (-1)^{j+1} \\binom{k}{j} \\alpha_{t - j,d}^s  + R_d\\xi_{t,d}^s \\end{aligned}   \\end{equation} Œ±t,ds,Trend=(Œ±ts,Œ±t‚àí1s,‚Ä¶,Œ±t‚àí(k‚àí1)s)‚ä§\\alpha_{t,d}^{s,\\text{Trend}} = (\\alpha_t^s,\\alpha_{t-1}^s,\\dots,\\alpha_{t-(k-1)}^s)^{\\top}, RdTrend=diag(1,0,0,‚Ä¶,0)R_d^{\\text{Trend}} = \\textrm{diag}(1,0,0,\\dots,0), LdTrend=(1,0,0,‚Ä¶,0)‚ä§L_{d}^{\\text{Trend}} = (1, 0, 0, \\dots, 0)^{\\top} vector zeroes one first entry, AdTrend=((k1)‚àí(k2)‚Ä¶(‚àí1)j+1(kj)‚Ä¶(‚àí1)k(kk‚àí1)(‚àí1)k+1(kk)10‚Ä¶0‚Ä¶0001‚Ä¶0‚Ä¶00‚ãÆ00‚Ä¶0‚Ä¶10) A_{d}^{\\text{Trend}} = \\begin{pmatrix} \\binom{k}{1} &  -\\binom{k}{2} & \\dots & (-1)^{j + 1} \\binom{k}{j} & \\dots & (-1)^{k} \\binom{k}{k-1} & (-1)^{k + 1} \\binom{k}{k} \\\\ 1 &  0 & \\dots & 0 & \\dots & 0 & 0\\\\ 0 & 1 & \\dots & 0 & \\dots & 0 & 0\\\\ \\vdots & & & \\\\ 0 & 0 & \\dots & 0 & \\dots & 1 & 0\\\\ \\end{pmatrix} Delvelopers Local trend degree kk encompasses constant trend Rd=0R_d = 0 local linear trend k=1k = 1 Rd=1R_d = 1. general option one programmed. two types seasonality considered model: Discrete Trigonometric assume zz given seasons length ll. example tt represents days can z=52z = 52 (weekly) seasons length 77 (week contains 77 days). represented following baseline model: ‚Ñìt,ds=Œ±t,ds+œµt,dsŒ≥k+1,ds=‚àí‚àëj=1z‚àí1Œ≥k+1‚àíj,ds+wkŒ±t+1,ds=Œ≥‚åàt+1l‚åâ,ds\\begin{equation} \\begin{aligned} \\ell_{t,d}^s & = \\alpha_{t,d}^s + \\epsilon_{t,d}^s \\\\ \\gamma_{k+1,d}^s & = - \\sum\\limits_{j=1}^{z-1} \\gamma_{k+1-j, d}^s + w_k\\\\ \\alpha_{t+1,d}^s & = \\gamma_{\\lceil \\frac{t+1}{l} \\rceil,d}^s \\end{aligned}   \\end{equation} wkw_k gaussian white noise. expression can represented matrix form LdSeason=(1,0,0,‚Ä¶,0)‚ä§L_{d}^{\\text{Season}} = (1,0,0,\\dots,0)^{\\top} Rd=(0,0,‚Ä¶,0,rt)‚ä§R_d = (0, 0, \\dots, 0,r_t)^{\\top} rt=1r_t = 1 tl\\frac{t}{l} integer 00 otherwise. vector Œ±t,ds,Season\\alpha_{t,d}^{s,\\text{Season}} length zl+1z l + 1. defined initially tt ‚åàt/l‚åâ=z\\lceil t/l \\rceil = z Œ±t,ds,Season=(Œ≥z,Œ≥z,‚Ä¶,Œ≥z‚èül times,Œ≥z‚àí1,Œ≥z‚àí1,‚Ä¶,Œ≥z‚àí1‚èül times,‚Ä¶Œ≥1,‚Ä¶,Œ≥1‚èül times,w1)‚ä§. \\alpha_{t,d}^{s,\\text{Season}} = \\Big( \\underbrace{\\gamma_{z}, \\gamma_{z}, \\dots,  \\gamma_{z}}_{l\\text{ times}},  \\underbrace{\\gamma_{z-1}, \\gamma_{z-1},\\dots,\\gamma_{z-1}}_{l\\text{ times}}, \\dots \\underbrace{\\gamma_{1}, \\dots, \\gamma_{1}}_{l\\text{ times}}, w_1 \\Big)^{\\top}. Matrix AdSeasonA_d^{\\text{Season}} given following expression: Ad=(000‚Ä¶‚àí100‚Ä¶‚àí100‚Ä¶‚àí100‚Ä¶001100‚Ä¶000‚Ä¶000‚Ä¶000‚Ä¶000010‚Ä¶000‚Ä¶000‚Ä¶000‚Ä¶000001‚Ä¶000‚Ä¶000‚Ä¶000‚Ä¶000‚ãÆ‚ãÆ‚ãÆ000‚Ä¶000‚Ä¶000‚Ä¶000‚Ä¶100000‚Ä¶000‚Ä¶000‚Ä¶000‚Ä¶001) A_d = \\begin{pmatrix} 0 & 0 & 0 & \\dots & -1 & 0  & 0 & \\dots & -1 & 0 & 0 & \\dots & -1 & 0 & 0 & \\dots & 0 & 0 & 1\\\\ 1 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 \\\\ 0 & 1 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 \\\\ 0 & 0 & 1 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 \\\\ \\vdots & &&& &&&& \\vdots &&&&&& \\vdots\\\\ 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 1 & 0 & 0\\\\ 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 0 & \\dots & 0 & 0 & 1\\\\ \\end{pmatrix}  first row AdA_d ‚àí1-1 every llth column starting column ll column l√ó(z‚àí1)l\\times (z-1). last entry first row AdA_d 11. rest entries, AdA_d zeroes except entries Ai,‚àí1A_{,-1} (>1i > 1) value 11. last entry last row column AdA_d also 11. Consider seasonality z=3z = 3 seasons length l=2l = 2. Œ±6=(Œ≥3,Œ≥3,Œ≥2,Œ≥2,Œ≥1,Œ≥1,0)‚ä§ \\alpha_6 = (\\gamma_3, \\gamma_3, \\gamma_2, \\gamma_2, \\gamma_1, \\gamma_1, 0)^{\\top}  Ad=(0‚àí10‚àí1001100000001000000010000000100000001000000001) A_d = \\begin{pmatrix} 0 & -1 & 0 & -1 & 0 & 0 & 1\\\\ 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\ \\end{pmatrix}  : Œ±7=(0‚àí10‚àí1001100000001000000010000000100000001000000001)‚èüAd(Œ≥3Œ≥3Œ≥2Œ≥2Œ≥1Œ≥1w1)‚èüŒ±6+(0000000)‚èüRdŒæ6,d=(‚àíŒ≥3‚àíŒ≥2+w1Œ≥3Œ≥3Œ≥2Œ≥2Œ≥1w1) \\alpha_7 =\\underbrace{\\begin{pmatrix} 0 & -1 & 0 & -1 & 0 & 0 & 1\\\\ 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\ \\end{pmatrix}}_{A_d} \\underbrace{\\begin{pmatrix} \\gamma_3\\\\  \\gamma_3\\\\  \\gamma_2\\\\  \\gamma_2\\\\  \\gamma_1\\\\  \\gamma_1\\\\ w_1  \\end{pmatrix}}_{ \\alpha_6} + \\underbrace{\\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ \\end{pmatrix}}_{R_d} \\xi_{6,d} = \\begin{pmatrix} -\\gamma_3 - \\gamma_2 + w_1\\\\  \\gamma_3\\\\  \\gamma_3\\\\  \\gamma_2\\\\  \\gamma_2\\\\  \\gamma_1\\\\  w_1  \\end{pmatrix}  Substituting Œ≥4=‚àíŒ≥3‚àíŒ≥2+w1\\gamma_4 = -\\gamma_3 - \\gamma_2 + w_1 obtain next component : Œ±8=(0‚àí10‚àí1001100000001000000010000000100000001000000001)(Œ≥4Œ≥3Œ≥3Œ≥2Œ≥2Œ≥1w1)+(0000001)‚èüRdŒæ7,d=(‚àíŒ≥3‚àíŒ≥2+w1Œ≥4Œ≥3Œ≥3Œ≥2Œ≥2w1+Œæ7,d) \\alpha_8 =\\begin{pmatrix} 0 & -1 & 0 & -1 & 0 & 0 & 1\\\\ 1 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\ \\end{pmatrix} \\begin{pmatrix} \\gamma_4 \\\\  \\gamma_3\\\\  \\gamma_3\\\\  \\gamma_2\\\\  \\gamma_2\\\\  \\gamma_1\\\\  w_1  \\end{pmatrix} + \\underbrace{\\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 1 \\\\ \\end{pmatrix}}_{R_d} \\xi_{7,d} = \\begin{pmatrix} -\\gamma_3 - \\gamma_2 + w_1\\\\  \\gamma_4 \\\\ \\gamma_3\\\\  \\gamma_3\\\\  \\gamma_2\\\\  \\gamma_2\\\\  w_1 + \\xi_{7,d} \\end{pmatrix}  defining w2=w1+Œæ7,dw_2 = w_1 + \\xi_{7,d} using fact sum independent gaussians independent one summands recover original expression. different approach use harmonic functions. particular, let ll define period (number time frames cycle) define Œªk=2œÄkl\\lambda_k = \\frac{2\\pi k}{l} use following baseline model ‚Ñìt,ds=Œ±t,ds+œµt,dsŒ±t,ds=‚àëj=1‚åäl2‚åãŒ≥t,ds,jŒ≥t,ds,j=Œ≥t‚àí1,ds,jcosŒªj+Œ≥ÃÉt,ds,jsinŒªj+wt,ds,jŒ≥ÃÉt,ds,j=‚àíŒ≥t‚àí1,ds,jsinŒªj+Œ≥ÃÉt,ds,jcosŒªj+wÃÉt,ds,j\\begin{equation} \\begin{aligned} \\ell_{t,d}^s & = \\alpha_{t,d}^s + \\epsilon_{t,d}^s \\\\ \\alpha_{t,d}^s & = \\sum\\limits_{j=1}^{\\lfloor \\frac{l}{2} \\rfloor} \\gamma_{t,d}^{s,j}\\\\ \\gamma_{t,d}^{s,j} & = \\gamma_{t-1,d}^{s,j}\\cos\\lambda_j + \\tilde{\\gamma}_{t,d}^{s,j}\\sin\\lambda_j + w_{t,d}^{s,j}\\\\ \\tilde{\\gamma}_{t,d}^{s,j} & = -\\gamma_{t-1,d}^{s,j}\\sin\\lambda_j + \\tilde{\\gamma}_{t,d}^{s,j}\\cos\\lambda_j + \\tilde{w}_{t,d}^{s,j}\\\\ \\end{aligned}   \\end{equation} Following Durbin Koopman (2012) can write: Œ±t,ds=(Œ≥t,ds,1,Œ≥ÃÉt,ds,1,Œ≥t,ds,2,Œ≥ÃÉt,ds,2,‚Ä¶,Œ≥t,ds,l,Œ≥ÃÉt,ds,l)‚ä§ \\alpha_{t,d}^s = (\\gamma_{t,d}^{s,1},\\tilde{\\gamma}_{t,d}^{s,1},\\gamma_{t,d}^{s,2},\\tilde{\\gamma}_{t,d}^{s,2},\\dots, \\gamma_{t,d}^{s,l},\\tilde{\\gamma}_{t,d}^{s,l})^{\\top}  Ld=(1,0,1,0,1,0,‚Ä¶)‚ä§L_d = (1,0,1,0,1,0,\\dots)^{\\top}, Rd=Il‚àí1R_d = I_{l-1} identity, Ad={diag(C1,C2,‚Ä¶,Cl*,‚àí1)l even,diag(C1,C2,‚Ä¶,Cl*)l odd. A_d = \\begin{cases} \\text{diag}(C_1, C_2, \\dots, C_{l^*}, -1) & \\text{} l \\text{ even,}\\\\ \\text{diag}(C_1, C_2, \\dots, C_{l^*}) & \\text{} l \\text{ odd.} \\end{cases}  l*=‚åäz/2‚åãl^* = \\lfloor z/2 \\rfloor Cj=(cosŒªjsinŒªj‚àísinŒªjcosŒªj) C_j = \\begin{pmatrix} \\cos \\lambda_j & \\sin \\lambda_j \\\\ - \\sin \\lambda_j & \\cos\\lambda_j \\end{pmatrix} Multiple seasonalities can adjusted blocks construct seasonal block: LdSeason=(LdSeason1,LdSeason2,‚Ä¶,LdSeasonk)‚ä§,AdSeason=diag(AdSeason1,AdSeason2,‚Ä¶,AdSeasonk),RdSeason=diag(RdSeason1,RdSeason2,‚Ä¶,RdSeasonk),Œ±t,ds,Season=(Œ±t,ds,Season1,Œ±t,ds,Season2,‚Ä¶,Œ±t,ds,Seasonk)‚ä§.\\begin{equation} \\begin{aligned} L_{d}^{\\text{Season}} & = \\left(L_{d}^{\\text{Season}_1}, L_{d}^{\\text{Season}_2}, \\dots, L_{d}^{\\text{Season}_k} \\right)^{\\top}, \\\\ A_{d}^{\\text{Season}} & = \\text{diag}\\left(A_{d}^{\\text{Season}_1}, A_{d}^{\\text{Season}_2}, \\dots, A_{d}^{\\text{Season}_k}\\right),\\\\ R_{d}^{\\text{Season}} & = \\text{diag}\\left(R_{d}^{\\text{Season}_1}, R_{d}^{\\text{Season}_2}, \\dots, R_{d}^{\\text{Season}_k}\\right), \\\\ \\alpha_{t,d}^{s,\\text{Season}} & = \\left(\\alpha_{t,d}^{s,\\text{Season}_1}, \\alpha_{t,d}^{s,\\text{Season}_2}, \\dots, \\alpha_{t,d}^{s,\\text{Season}_k}\\right)^{\\top}. \\end{aligned} \\end{equation} used definitions Ld,Ad,RdL_d, A_d, R_d, Œ±t,ds\\alpha_{t,d}^{s} respectively. Cycles represent fluctuations rises falls fixed period. Usually greater length seasonal cycles. example epidemic wave might cycle daily effects seasonal. cycle modelled trigonometric seasons unknown Œªc\\lambda_c damping factor œÅc\\rho_c. Hence: Ld=(1,0)‚ä§,Ad=Cc,Rd=I2 L_d = (1,0)^{\\top}, \\quad A_d = C_c, \\quad R_d = I_2  Cc=œÅc(cosŒªcsinŒªc‚àísinŒªccosŒªc) C_c = \\rho_c \\begin{pmatrix} \\cos \\lambda_c & \\sin \\lambda_c \\\\ -\\sin\\lambda_c & \\cos\\lambda_c \\end{pmatrix}","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2024). diseasenowcasting: Package (Title Case). R package version 0.1.0, https://rodrigozepeda.github.io/diseasenowcasting/.","code":"@Manual{,   title = {diseasenowcasting: What the Package Does (Title Case)},   author = {Who wrote it},   year = {2024},   note = {R package version 0.1.0},   url = {https://rodrigozepeda.github.io/diseasenowcasting/}, }"},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (Title Case)","text":"","code":"library(diseasenowcasting)  # Create a fake disease process set.seed(265824) sims <- simulate_process_for_testing()  # Run a nowcast with very few iterations predictions <- nowcast(sims, \"onset_date\", \"report_date\", cores = 4) #> ‚Ñπ Computing a nowcast for 2024-09-11 per \"days\" #> ‚Ñπ Assuming data is count-data where counts are in column `n`. To change this set `data_type = \"linelist\"`  #Get the predicted values preds <- predictions |>    posterior::as_draws() |>    posterior::subset_draws(\"N_predict\") |>    posterior::summarise_draws()  preds #> # A tibble: 10 √ó 10 #>    variable          mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail #>    <chr>            <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl>    <dbl> #>  1 N_predict[1,1]   7485    7485  0     0     7485  7485 NA         NA       NA  #>  2 N_predict[2,1]   7178    7178  0     0     7178  7178 NA         NA       NA  #>  3 N_predict[3,1]  16581   16581  0     0    16581 16581 NA         NA       NA  #>  4 N_predict[4,1]  28006.  28005  3.03  2.97 28003 28012  1.00    4071.    3860. #>  5 N_predict[5,1]  16233.  16232  4.51  4.45 16228 16242  1.00    3983.    3990. #>  6 N_predict[6,1]  14445.  14444  5.56  4.45 14438 14456  1.00    4214.    3982. #>  7 N_predict[7,1]   6076.   6075  6.31  5.93  6068  6088  1.00    3934.    3805. #>  8 N_predict[8,1]   2219.   2218  7.10  7.41  2209  2232  1.00    3404.    3965. #>  9 N_predict[9,1]   3486.   3485  7.90  7.41  3476  3501  1.00    4076.    3876. #> 10 N_predict[10,1] 56870.  56869  8.46  8.90 56859 56885  1.00    3726.    3897."},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms an array into a list of lists ‚Äî array_to_list","title":"Transforms an array into a list of lists ‚Äî array_to_list","text":"Function takes array transforms lists lists mainly interacting [Rcpp::cppFunction()].","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms an array into a list of lists ‚Äî array_to_list","text":"","code":"array_to_list(my_array, last_dim_as = \"vector\")"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms an array into a list of lists ‚Äî array_to_list","text":"my_array array transform last_dim_as Either 'vector', 'matrix'  'scalar'  depending want last dimension","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/array_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms an array into a list of lists ‚Äî array_to_list","text":"list lists structure array","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the onset and report dates ‚Äî check_date_columns","title":"Check the onset and report dates ‚Äî check_date_columns","text":"Check onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the onset and report dates ‚Äî check_date_columns","text":"","code":"check_date_columns(.disease_data, onset_date, report_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the onset and report dates ‚Äî check_date_columns","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_date_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the onset and report dates ‚Äî check_date_columns","text":"`.disease_data` data.frame filtered reports onset.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the `now` argument to be date ‚Äî check_now","title":"Check the `now` argument to be date ‚Äî check_now","text":"Check `now` argument date","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the `now` argument to be date ‚Äî check_now","text":"","code":"check_now(.disease_data, now, onset_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the `now` argument to be date ‚Äî check_now","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, now object datatype Date indicating date perform nowcast. onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the `now` argument to be date ‚Äî check_now","text":"(invisibly) TRUE `now` date achievable","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the `proportion_reported` argument ‚Äî check_proportion_reported","title":"Check the `proportion_reported` argument ‚Äî check_proportion_reported","text":"Check `proportion_reported` argument","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the `proportion_reported` argument ‚Äî check_proportion_reported","text":"","code":"check_proportion_reported(proportion_reported)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the `proportion_reported` argument ‚Äî check_proportion_reported","text":"proportion_reported decimal greater 0 less equal 1 representing proportion cases expected reported. Default: 1, e.g. 100 percent cases eventually reported. asymptomatic diseases cases ever reported, outbreaks severe -reporting expected, change  less 1.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_proportion_reported.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the `proportion_reported` argument ‚Äî check_proportion_reported","text":"(invisibly) `TRUE` proportion valid","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the `units` argument among the options ‚Äî check_units","title":"Check the `units` argument among the options ‚Äî check_units","text":"Check `units` argument among options","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the `units` argument among the options ‚Äî check_units","text":"","code":"check_units(units)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the `units` argument among the options ‚Äî check_units","text":"units Time scale reporting. Options: \"1 day\", \"1 week\".","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/check_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the `units` argument among the options ‚Äî check_units","text":"(invisibly) `TRUE` units valid","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/control_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default `STAN` control parameters for nowcasting ‚Äî control_default","title":"Return the default `STAN` control parameters for nowcasting ‚Äî control_default","text":"function estimates default control parameters running [rstan::sampling()].","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/control_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default `STAN` control parameters for nowcasting ‚Äî control_default","text":"","code":"control_default()"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/control_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the default `STAN` control parameters for nowcasting ‚Äî control_default","text":"list default control parameters running sampling algorithm.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":null,"dir":"Reference","previous_headings":"","what":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","title":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","text":"Surveillance data CDC Division Vector-Borne Diseases. 1990-2010 case reporting data included.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","text":"","code":"data(denguedat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","text":"data frame.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","text":"first column, `onset_week`, indicates week symptom onset. second column, `report_week`, indicates week case report. third column, `gender`, indicates gender infected individual (randomly assigned 0.5:0.5 probability \"Male\"/\"Female\").","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","text":"Data originally `NobBS` package.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/denguedat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"denguedat: Dengue fever reporting data from Puerto Rico ‚Äî denguedat","text":"","code":"data(denguedat)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/diseasenowcasting-package.html","id":null,"dir":"Reference","previous_headings":"","what":"diseasenowcasting: What the Package Does (Title Case) ‚Äî diseasenowcasting-package","title":"diseasenowcasting: What the Package Does (Title Case) ‚Äî diseasenowcasting-package","text":"(maybe one line) Use four spaces indenting paragraphs within Description.","code":""},{"path":[]},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_sim_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for mapping the priors to numbers ‚Äî get_prior_code_sim_R","title":"Function for mapping the priors to numbers ‚Äî get_prior_code_sim_R","text":"Takes prior one listed `priors.stan` returns function generating random numbers ","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_sim_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for mapping the priors to numbers ‚Äî get_prior_code_sim_R","text":"","code":"get_prior_code_sim_R(prior_name)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_sim_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for mapping the priors to numbers ‚Äî get_prior_code_sim_R","text":"prior_name (character) name prior distribution. Can one following: `standard_normal`, `normal`, `student_t`, `cauchy`, `exponential`, `gamma`, `inverse_gamma`, `lognormal`, `weibull`, `frechet`, `double_exponential`, `rayleigh`, `loglogistic`, `gumbel`.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_stan.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for mapping the priors to numbers ‚Äî get_prior_code_stan","title":"Function for mapping the priors to numbers ‚Äî get_prior_code_stan","text":"Takes prior one listed `priors.stan` returns number codes ","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_stan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for mapping the priors to numbers ‚Äî get_prior_code_stan","text":"","code":"get_prior_code_stan(prior_name)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/get_prior_code_stan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for mapping the priors to numbers ‚Äî get_prior_code_stan","text":"prior_name (character) name prior distribution. Can one following: `standard_normal`, `normal`, `student_t`, `cauchy`, `exponential`, `gamma`, `inverse_gamma`, `lognormal`, `weibull`, `frechet`, `double_exponential`, `rayleigh`, `loglogistic`, `gumbel`.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer the `data_type` ‚Äî infer_data_type","title":"Automatically infer the `data_type` ‚Äî infer_data_type","text":"Infers whether data line-data count-data whether () column named `n`","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer the `data_type` ‚Äî infer_data_type","text":"","code":"infer_data_type(.disease_data, data_type)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer the `data_type` ‚Äî infer_data_type","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, data_type Either `linedata` row represents test `counts` column named `n` counts many tests onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_data_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer the `data_type` ‚Äî infer_data_type","text":"Whether data `count` `linelist`","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer which value is `now`. ‚Äî infer_now","title":"Automatically infer which value is `now`. ‚Äî infer_now","text":"Function returns maximum onset date `.disease_data` `now = NULL`. Else check whether now possible data.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer which value is `now`. ‚Äî infer_now","text":"","code":"infer_now(.disease_data, now, onset_date)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer which value is `now`. ‚Äî infer_now","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, now object datatype Date indicating date perform nowcast. onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\"","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer which value is `now`. ‚Äî infer_now","text":"`now` value [nowcasting()] can last date data specified user","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically infer which value is `units`. ‚Äî infer_units","title":"Automatically infer which value is `units`. ‚Äî infer_units","text":"Function returns whether data daily, weekly, monthly yearly `date_column`.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically infer which value is `units`. ‚Äî infer_units","text":"","code":"infer_units(.disease_data, units, date_column)"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically infer which value is `units`. ‚Äî infer_units","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, units Time scale reporting. Options: \"1 day\", \"1 week\". date_column Name column `.disease_data` contains dates.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/infer_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically infer which value is `units`. ‚Äî infer_units","text":"Whether data's units `days` `weeks`","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcasting ‚Äî nowcast","title":"Nowcasting ‚Äî nowcast","text":"Function uses [rstan::sampling()] engine generate nowcasts.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcasting ‚Äî nowcast","text":"","code":"nowcast(   .disease_data,   onset_date,   report_date,   strata = NULL,   dist = c(\"NegativeBinomial\", \"Poisson\"),   now = NULL,   units = NULL,   max_delay = Inf,   prior_only = FALSE,   proportion_reported = 1,   refresh = 250 * interactive(),   control = control_default(),   mu_degree = 2,   nu_degree = 1,   mu_is_constant = FALSE,   nu_is_constant = TRUE,   mu_error_prior = \"normal\",   nu_error_prior = \"normal\",   mu_param_1 = 0,   mu_param_2 = 0.1,   nu_param_1 = 0,   nu_param_2 = 0.1,   mu_0_prior = \"normal\",   nu_0_prior = \"normal\",   mu_0_param_1 = \"auto\",   mu_0_param_2 = 0.01,   nu_0_param_1 = 0,   nu_0_param_2 = 0.01,   r_prior = \"normal\",   r_param_1 = 0,   r_param_2 = 1,   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcasting ‚Äî nowcast","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. dist Distribution. Either \"NegativeBinomial\"  \"Poisson\" now object datatype Date indicating date perform nowcast. units Time scale reporting. Options: \"1 day\", \"1 week\". max_delay Maximum possible delay observed considered estimation delay distribution (numeric). Default: `Inf` prior_only Boolean variable indicating whether compute prior distribution proportion_reported decimal greater 0 less equal 1 representing proportion cases expected reported. Default: 1, e.g. 100 percent cases eventually reported. asymptomatic diseases cases ever reported, outbreaks severe -reporting expected, change  less 1. refresh Refresh parameter [rstan::sampling()] control Control parameter [rstan::sampling()] mu_degree Integer. Degree epidemic trend. Default 2. nu_degree Integer. Degree delay trend. Default 1. mu_is_constant Logical. Indicates whether epidemic trend constant. Default FALSE. nu_is_constant Logical. Indicates whether delay trend constant. Default TRUE. mu_error_prior Character. Prior epidemic trend error. Default \"normal\". nu_error_prior Character. Prior delay trend error. Default \"normal\". mu_param_1 Numeric. First parameter epidemic trend error. Default 0.0. mu_param_2 Numeric. Second parameter epidemic trend error. Default 1.0. nu_param_1 Numeric. First parameter delay trend error. Default 0.0. nu_param_2 Numeric. Second parameter delay trend error. Default 1.0. mu_0_prior Character. Prior initial epidemic trend distribution. Default \"normal\". nu_0_prior Character. Prior initial delay trend distribution. Default \"normal\". mu_0_param_1 Numeric. First parameter initial epidemic trend distribution. Default 0.0. mu_0_param_2 Numeric. Second parameter initial epidemic trend distribution. Default 1.0. nu_0_param_1 Numeric. First parameter initial delay trend distribution. Default 0.0. nu_0_param_2 Numeric. Second parameter initial delay trend distribution. Default 1.0. r_prior Character. Prior negative binomial precision parameter. Default \"normal\". r_param_1 Numeric. First parameter dispersion prior negative binomial. Default 0.0. r_param_2 Numeric. Second parameter dispersion prior negative binomial. Default 1.0. ... Additional arguments pass [rstan::sampling()]","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nowcasting ‚Äî nowcast","text":"","code":"# Load the data data(denguedat)  # Create a fake disease process sims <- simulate_process_for_testing()  # Run a nowcast with very few iterations # change to 4 chains and 2000 iter when doing inference nowcast(sims, \"onset_date\", \"report_date\", iter = 100, chains = 1, seed = 2524) #> ‚Ñπ Computing a nowcast for 2024-09-11 per \"days\" #> ‚Ñπ Assuming data is count-data where counts are in column `n`. To change this set `data_type = \"linelist\"` #> Error : Exception: int variable contained non-int values; processing stage=data initialization; variable name=N_cases; base type=int (in 'nowcast_v2', line 478, column 4 to column 33) #> failed to create the sampler; sampling not done #> Stan model 'nowcast_v2' does not contain samples."},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":null,"dir":"Reference","previous_headings":"","what":"Nowcasting with the `rstan` engine ‚Äî nowcast.rstan","title":"Nowcasting with the `rstan` engine ‚Äî nowcast.rstan","text":"Nowcasting `rstan` engine","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nowcasting with the `rstan` engine ‚Äî nowcast.rstan","text":"","code":"nowcast.rstan(   .disease_data,   onset_date,   report_date,   strata = NULL,   dist = c(\"NegativeBinomial\", \"Poisson\"),   prior_only = FALSE,   control = control_default(),   refresh = 250,   mu_degree = 2,   nu_degree = 1,   mu_is_constant = FALSE,   nu_is_constant = TRUE,   mu_error_prior = \"normal\",   nu_error_prior = \"normal\",   mu_param_1 = 0,   mu_param_2 = 1,   nu_param_1 = 0,   nu_param_2 = 1,   mu_0_prior = \"normal\",   nu_0_prior = \"normal\",   mu_0_param_1 = log(mean(.disease_data$n, na.rm = T)),   mu_0_param_2 = 0.01,   nu_0_param_1 = 0,   nu_0_param_2 = 0.01,   r_prior = \"normal\",   r_param_1 = 0,   r_param_2 = 1,   ... )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/nowcast.rstan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nowcasting with the `rstan` engine ‚Äî nowcast.rstan","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. dist Distribution. Either \"NegativeBinomial\"  \"Poisson\" prior_only Boolean variable indicating whether compute prior distribution control Control parameter [rstan::sampling()] refresh Refresh parameter [rstan::sampling()] mu_degree Integer. Degree epidemic trend. Default 2. nu_degree Integer. Degree delay trend. Default 1. mu_is_constant Logical. Indicates whether epidemic trend constant. Default FALSE. nu_is_constant Logical. Indicates whether delay trend constant. Default TRUE. mu_error_prior Character. Prior epidemic trend error. Default \"normal\". nu_error_prior Character. Prior delay trend error. Default \"normal\". mu_param_1 Numeric. First parameter epidemic trend error. Default 0.0. mu_param_2 Numeric. Second parameter epidemic trend error. Default 1.0. nu_param_1 Numeric. First parameter delay trend error. Default 0.0. nu_param_2 Numeric. Second parameter delay trend error. Default 1.0. mu_0_prior Character. Prior initial epidemic trend distribution. Default \"normal\". nu_0_prior Character. Prior initial delay trend distribution. Default \"normal\". mu_0_param_1 Numeric. First parameter initial epidemic trend distribution. Default 0.0. mu_0_param_2 Numeric. Second parameter initial epidemic trend distribution. Default 1.0. nu_0_param_1 Numeric. First parameter initial delay trend distribution. Default 0.0. nu_0_param_2 Numeric. Second parameter initial delay trend distribution. Default 1.0. r_prior Character. Prior negative binomial precision parameter. Default \"normal\". r_param_1 Numeric. First parameter dispersion prior negative binomial. Default 0.0. r_param_2 Numeric. Second parameter dispersion prior negative binomial. Default 1.0. ... Additional arguments pass [rstan::sample()]","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess data.frame for generating a nowcast ‚Äî preprocess_for_nowcast","title":"Preprocess data.frame for generating a nowcast ‚Äî preprocess_for_nowcast","text":"Function takes data frame `onset_date` `report_date` generates possible combinations onset_dates report_dates observable controlling covariates specified `...`","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess data.frame for generating a nowcast ‚Äî preprocess_for_nowcast","text":"","code":"preprocess_for_nowcast(   .disease_data,   onset_date,   report_date,   strata = NULL,   now,   units,   max_delay = Inf,   data_type = c(\"auto\", \"linelist\", \"count\") )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess data.frame for generating a nowcast ‚Äî preprocess_for_nowcast","text":".disease_data time series reporting data aggregated line list format row column onset date, report date, onset_date quotations, name column datatype Date designating date case onset. e.g. \"onset_week\" report_date quotations, name column datatype Date designating date case report. e.g. \"report_week\" strata Character vector names strata included data. now object datatype Date indicating date perform nowcast. units Time scale reporting. Options: \"1 day\", \"1 week\". max_delay Maximum possible delay observed considered estimation delay distribution (numeric). Default: `Inf` data_type Either `linedata` row represents test `counts` column named `n` counts many tests onset report dates","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess data.frame for generating a nowcast ‚Äî preprocess_for_nowcast","text":"`data.frame` possible counts delay-onset combinations. new column counts named `n`. Additional columns `.tval` `.delay` added `.tval` codifies dates numbers (starting 0) delay codifies difference onset report.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/preprocess_for_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess data.frame for generating a nowcast ‚Äî preprocess_for_nowcast","text":"","code":"data(denguedat)  # Get counts by onset date and report week consider all possible delays preprocess_for_nowcast(denguedat, \"onset_week\", \"report_week\",   units = \"weeks\", now = as.Date(\"1990-03-05\") ) #> ‚Ñπ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 55 √ó 5 #>    onset_week .delay report_week     n .tval #>    <date>      <dbl> <date>      <int> <dbl> #>  1 1990-01-01      0 1990-01-01      3     1 #>  2 1990-01-01      1 1990-01-08     24     1 #>  3 1990-01-01      2 1990-01-15     23     1 #>  4 1990-01-01      3 1990-01-22      8     1 #>  5 1990-01-01      4 1990-01-29      1     1 #>  6 1990-01-01      5 1990-02-05      0     1 #>  7 1990-01-01      6 1990-02-12      1     1 #>  8 1990-01-01      7 1990-02-19      0     1 #>  9 1990-01-01      8 1990-02-26      0     1 #> 10 1990-01-01      9 1990-03-05      1     1 #> # ‚Ñπ 45 more rows  # Complete one date when there was no onset week df <- data.frame(   onset_week  = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-03\", \"1994-10-10\")),   report_week = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-10\", \"1994-10-10\")) ) preprocess_for_nowcast(df, \"onset_week\", \"report_week\",   units = \"weeks\",   now = as.Date(\"1994-10-10\") ) #> ‚Ñπ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 7 √ó 5 #>   onset_week .delay report_week     n .tval #>   <date>      <dbl> <date>      <int> <dbl> #> 1 1994-09-19      0 1994-09-19      1     1 #> 2 1994-09-19      1 1994-09-26      0     1 #> 3 1994-09-26      0 1994-09-26      0     2 #> 4 1994-09-26      1 1994-10-03      0     2 #> 5 1994-10-03      0 1994-10-03      1     3 #> 6 1994-10-03      1 1994-10-10      1     3 #> 7 1994-10-10      0 1994-10-10      1     4  # Complete one date when there was no report of delay 3 mostly df <- data.frame(   onset_week  = as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-03\", \"1994-10-10\")),   report_week = as.Date(c(\"1994-10-10\", \"1994-10-03\", \"1994-10-10\", \"1994-10-10\")) ) preprocess_for_nowcast(df, \"onset_week\", \"report_week\",   units = \"weeks\",   now = as.Date(\"1994-10-10\") ) #> ‚Ñπ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 10 √ó 5 #>    onset_week .delay report_week     n .tval #>    <date>      <dbl> <date>      <int> <dbl> #>  1 1994-09-19      0 1994-09-19      0     1 #>  2 1994-09-19      1 1994-09-26      0     1 #>  3 1994-09-19      2 1994-10-03      0     1 #>  4 1994-09-19      3 1994-10-10      1     1 #>  5 1994-09-26      0 1994-09-26      0     2 #>  6 1994-09-26      1 1994-10-03      0     2 #>  7 1994-09-26      2 1994-10-10      0     2 #>  8 1994-10-03      0 1994-10-03      1     3 #>  9 1994-10-03      1 1994-10-10      1     3 #> 10 1994-10-10      0 1994-10-10      1     4  # Get counts by onset date and report week stratifying by gender and state df <- data.frame(   onset_week = sample(as.Date(c(\"1994-09-19\", \"1994-10-03\", \"1994-10-10\")), 100, replace = TRUE),   gender = sample(c(\"Male\", \"Female\"), 100, replace = TRUE),   state = sample(c(\"A\", \"B\", \"C\", \"D\"), prob = c(0.5, 0.2, 0.2, 0.1), size = 100, replace = TRUE) ) df$report_week <- df$onset_week +   sample(c(lubridate::weeks(1), lubridate::weeks(2)), 100, replace = TRUE) preprocess_for_nowcast(df, \"onset_week\", \"report_week\", c(\"gender\", \"state\"),   units = \"weeks\",   now = as.Date(\"1994-09-26\") ) #> ‚Ñπ Assuming data is linelist-data where each observation is a test. If you are working with count-data set `data_type = \"count\"` #> # A tibble: 8 √ó 7 #>   onset_week .delay gender state report_week     n .tval #>   <date>      <dbl> <chr>  <chr> <date>      <int> <dbl> #> 1 1994-09-19      1 Female A     1994-09-26      3     1 #> 2 1994-09-19      1 Female C     1994-09-26      3     1 #> 3 1994-09-19      1 Female B     1994-09-26      1     1 #> 4 1994-09-19      1 Female D     1994-09-26      1     1 #> 5 1994-09-19      1 Male   A     1994-09-26      8     1 #> 6 1994-09-19      1 Male   C     1994-09-26      1     1 #> 7 1994-09-19      1 Male   B     1994-09-26      2     1 #> 8 1994-09-19      1 Male   D     1994-09-26      2     1"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_process_for_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a process ‚Äî simulate_process_for_testing","title":"Simulate a process ‚Äî simulate_process_for_testing","text":"function simulates state-space process testing purposes model multiple delays strata. estimates process specified number steps,  options trend degrees, priors, error distributions.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_process_for_testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a process ‚Äî simulate_process_for_testing","text":"","code":"simulate_process_for_testing(   num_steps = 10,   num_delays = 8,   num_strata = 2,   mu_degree = 2,   nu_degree = 1,   mu_is_constant = FALSE,   nu_is_constant = TRUE,   mu_error_prior = \"normal\",   nu_error_prior = \"normal\",   mu_param_1 = 0,   mu_param_2 = 0.1,   nu_param_1 = 0,   nu_param_2 = 0.1,   mu_0_prior = \"normal\",   nu_0_prior = \"normal\",   mu_0_param_1 = log(100),   mu_0_param_2 = 0.01,   nu_0_param_1 = log(6),   nu_0_param_2 = 0.01,   r_prior = \"normal\",   is_negative_binomial = TRUE,   r_param_1 = 0,   r_param_2 = 1 )"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_process_for_testing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a process ‚Äî simulate_process_for_testing","text":"num_steps Integer. Number time steps simulate. Default 10. num_delays Integer. Number delay strata. Default 8. num_strata Integer. Number strata population. Default 2. mu_degree Integer. Degree epidemic trend. Default 2. nu_degree Integer. Degree delay trend. Default 1. mu_is_constant Logical. Indicates whether epidemic trend constant. Default FALSE. nu_is_constant Logical. Indicates whether delay trend constant. Default TRUE. mu_error_prior Character. Prior epidemic trend error. Default \"normal\". nu_error_prior Character. Prior delay trend error. Default \"normal\". mu_param_1 Numeric. First parameter epidemic trend error. Default 0.0. mu_param_2 Numeric. Second parameter epidemic trend error. Default 1.0. nu_param_1 Numeric. First parameter delay trend error. Default 0.0. nu_param_2 Numeric. Second parameter delay trend error. Default 1.0. mu_0_prior Character. Prior initial epidemic trend distribution. Default \"normal\". nu_0_prior Character. Prior initial delay trend distribution. Default \"normal\". mu_0_param_1 Numeric. First parameter initial epidemic trend distribution. Default 0.0. mu_0_param_2 Numeric. Second parameter initial epidemic trend distribution. Default 1.0. nu_0_param_1 Numeric. First parameter initial delay trend distribution. Default 0.0. nu_0_param_2 Numeric. Second parameter initial delay trend distribution. Default 1.0. r_prior Character. Prior negative binomial precision parameter. Default \"normal\". is_negative_binomial Logical. Indicates whether data modeled using negative binomial distribution. Default TRUE. r_param_1 Numeric. First parameter dispersion prior negative binomial. Default 0.0. r_param_2 Numeric. Second parameter dispersion prior negative binomial. Default 1.0.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_process_for_testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a process ‚Äî simulate_process_for_testing","text":"tibble simulated state-space process results, including onset report dates, strata, delays, number observed cases per time step.","code":""},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/reference/simulate_process_for_testing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a process ‚Äî simulate_process_for_testing","text":"","code":"simulate_process_for_testing(num_steps = 20, num_delays = 5, num_strata = 3) #> # A tibble: 300 √ó 7 #>    .strata .delay .tval     n lambda onset_date report_date #>      <dbl>  <int> <dbl> <dbl>  <dbl> <date>     <date>      #>  1       0      1     1  6.40   600. 2024-08-23 2024-08-23  #>  2       0      1     2  6.48   655. 2024-08-24 2024-08-24  #>  3       0      1     3  6.54   695. 2024-08-25 2024-08-25  #>  4     393      1     4  6.82   915. 2024-08-26 2024-08-26  #>  5       0      1     5  7.20  1345. 2024-08-27 2024-08-27  #>  6       0      1     6  7.66  2128. 2024-08-28 2024-08-28  #>  7       0      1     7  8.00  2985. 2024-08-29 2024-08-29  #>  8       0      1     8  8.37  4325. 2024-08-30 2024-08-30  #>  9       0      1     9  8.69  5942. 2024-08-31 2024-08-31  #> 10       0      1    10  9.14  9282. 2024-09-01 2024-09-01  #> # ‚Ñπ 290 more rows"},{"path":"https://rodrigozepeda.github.io/diseasenowcasting/news/index.html","id":"diseasenowcasting-010","dir":"Changelog","previous_headings":"","what":"diseasenowcasting 0.1.0","title":"diseasenowcasting 0.1.0","text":"Initial creation.","code":""}]
